import {createRequire} from "node:module";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __require = createRequire(import.meta.url);

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/r
var require_err_helpers = __commonJS((exports, module) => {
  var isErrorLike = (err) => {
    return err && typeof err.message === "string";
  };
  var getErrorCause = (err) => {
    if (!err)
      return;
    const cause = err.cause;
    if (typeof cause === "function") {
      const causeResult = err.cause();
      return isErrorLike(causeResult) ? causeResult : undefined;
    } else {
      return isErrorLike(cause) ? cause : undefined;
    }
  };
  var _stackWithCauses = (err, seen) => {
    if (!isErrorLike(err))
      return "";
    const stack = err.stack || "";
    if (seen.has(err)) {
      return stack + "\ncauses have become circular...";
    }
    const cause = getErrorCause(err);
    if (cause) {
      seen.add(err);
      return stack + "\ncaused by: " + _stackWithCauses(cause, seen);
    } else {
      return stack;
    }
  };
  var stackWithCauses = (err) => _stackWithCauses(err, new Set);
  var _messageWithCauses = (err, seen, skip) => {
    if (!isErrorLike(err))
      return "";
    const message = skip ? "" : err.message || "";
    if (seen.has(err)) {
      return message + ": ...";
    }
    const cause = getErrorCause(err);
    if (cause) {
      seen.add(err);
      const skipIfVErrorStyleCause = typeof err.cause === "function";
      return message + (skipIfVErrorStyleCause ? "" : ": ") + _messageWithCauses(cause, seen, skipIfVErrorStyleCause);
    } else {
      return message;
    }
  };
  var messageWithCauses = (err) => _messageWithCauses(err, new Set);
  module.exports = {
    isErrorLike,
    getErrorCause,
    stackWithCauses,
    messageWithCauses
  };
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint
var require_err_proto = __commonJS((exports, module) => {
  var seen = Symbol("circular-ref-tag");
  var rawSymbol = Symbol("pino-raw-err-ref");
  var pinoErrProto = Object.create({}, {
    type: {
      enumerable: true,
      writable: true,
      value: undefined
    },
    message: {
      enumerable: true,
      writable: true,
      value: undefined
    },
    stack: {
      enumerable: true,
      writable: true,
      value: undefined
    },
    aggregateErrors: {
      enumerable: true,
      writable: true,
      value: undefined
    },
    raw: {
      enumerable: false,
      get: function() {
        return this[rawSymbol];
      },
      set: function(val2) {
        this[rawSymbol] = val2;
      }
    }
  });
  Object.defineProperty(pinoErrProto, rawSymbol, {
    writable: true,
    value: {}
  });
  module.exports = {
    pinoErrProto,
    pinoErrorSymbols: {
      seen,
      rawSymbol
    }
  };
});

// node_modules/@aws-sdk/client-sso/dist-cjs/en
var require_err = __commonJS((exports, module) => {
  var errSerializer = function(err) {
    if (!isErrorLike(err)) {
      return err;
    }
    err[seen] = undefined;
    const _err = Object.create(pinoErrProto);
    _err.type = toString.call(err.constructor) === "[object Function]" ? err.constructor.name : err.name;
    _err.message = messageWithCauses(err);
    _err.stack = stackWithCauses(err);
    if (Array.isArray(err.errors)) {
      _err.aggregateErrors = err.errors.map((err2) => errSerializer(err2));
    }
    for (const key in err) {
      if (_err[key] === undefined) {
        const val2 = err[key];
        if (isErrorLike(val2)) {
          if (key !== "cause" && !Object.prototype.hasOwnProperty.call(val2, seen)) {
            _err[key] = errSerializer(val2);
          }
        } else {
          _err[key] = val2;
        }
      }
    }
    delete err[seen];
    _err.raw = err;
    return _err;
  };
  module.exports = errSerializer;
  var { messageWithCauses, stackWithCauses, isErrorLike } = require_err_helpers();
  var { pinoErrProto, pinoErrorSymbols } = require_err_proto();
  var { seen } = pinoErrorSymbols;
  var { toString } = Object.prototype;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rule
var require_err_with_cause = __commonJS((exports, module) => {
  var errWithCauseSerializer = function(err) {
    if (!isErrorLike(err)) {
      return err;
    }
    err[seen] = undefined;
    const _err = Object.create(pinoErrProto);
    _err.type = toString.call(err.constructor) === "[object Function]" ? err.constructor.name : err.name;
    _err.message = err.message;
    _err.stack = err.stack;
    if (Array.isArray(err.errors)) {
      _err.aggregateErrors = err.errors.map((err2) => errWithCauseSerializer(err2));
    }
    if (isErrorLike(err.cause) && !Object.prototype.hasOwnProperty.call(err.cause, seen)) {
      _err.cause = errWithCauseSerializer(err.cause);
    }
    for (const key in err) {
      if (_err[key] === undefined) {
        const val2 = err[key];
        if (isErrorLike(val2)) {
          if (!Object.prototype.hasOwnProperty.call(val2, seen)) {
            _err[key] = errWithCauseSerializer(val2);
          }
        } else {
          _err[key] = val2;
        }
      }
    }
    delete err[seen];
    _err.raw = err;
    return _err;
  };
  module.exports = errWithCauseSerializer;
  var { isErrorLike } = require_err_helpers();
  var { pinoErrProto, pinoErrorSymbols } = require_err_proto();
  var { seen } = pinoErrorSymbols;
  var { toString } = Object.prototype;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/en
var require_req = __commonJS((exports, module) => {
  var reqSerializer = function(req) {
    const connection = req.info || req.socket;
    const _req = Object.create(pinoReqProto);
    _req.id = typeof req.id === "function" ? req.id() : req.id || (req.info ? req.info.id : undefined);
    _req.method = req.method;
    if (req.originalUrl) {
      _req.url = req.originalUrl;
    } else {
      const path = req.path;
      _req.url = typeof path === "string" ? path : req.url ? req.url.path || req.url : undefined;
    }
    if (req.query) {
      _req.query = req.query;
    }
    if (req.params) {
      _req.params = req.params;
    }
    _req.headers = req.headers;
    _req.remoteAddress = connection && connection.remoteAddress;
    _req.remotePort = connection && connection.remotePort;
    _req.raw = req.raw || req;
    return _req;
  };
  var mapHttpRequest = function(req) {
    return {
      req: reqSerializer(req)
    };
  };
  module.exports = {
    mapHttpRequest,
    reqSerializer
  };
  var rawSymbol = Symbol("pino-raw-req-ref");
  var pinoReqProto = Object.create({}, {
    id: {
      enumerable: true,
      writable: true,
      value: ""
    },
    method: {
      enumerable: true,
      writable: true,
      value: ""
    },
    url: {
      enumerable: true,
      writable: true,
      value: ""
    },
    query: {
      enumerable: true,
      writable: true,
      value: ""
    },
    params: {
      enumerable: true,
      writable: true,
      value: ""
    },
    headers: {
      enumerable: true,
      writable: true,
      value: {}
    },
    remoteAddress: {
      enumerable: true,
      writable: true,
      value: ""
    },
    remotePort: {
      enumerable: true,
      writable: true,
      value: ""
    },
    raw: {
      enumerable: false,
      get: function() {
        return this[rawSymbol];
      },
      set: function(val2) {
        this[rawSymbol] = val2;
      }
    }
  });
  Object.defineProperty(pinoReqProto, rawSymbol, {
    writable: true,
    value: {}
  });
});

// node_modules/@aws-sdk/client-sso/dist-cjs/en
var require_res = __commonJS((exports, module) => {
  var resSerializer = function(res) {
    const _res = Object.create(pinoResProto);
    _res.statusCode = res.headersSent ? res.statusCode : null;
    _res.headers = res.getHeaders ? res.getHeaders() : res._headers;
    _res.raw = res;
    return _res;
  };
  var mapHttpResponse = function(res) {
    return {
      res: resSerializer(res)
    };
  };
  module.exports = {
    mapHttpResponse,
    resSerializer
  };
  var rawSymbol = Symbol("pino-raw-res-ref");
  var pinoResProto = Object.create({}, {
    statusCode: {
      enumerable: true,
      writable: true,
      value: 0
    },
    headers: {
      enumerable: true,
      writable: true,
      value: ""
    },
    raw: {
      enumerable: false,
      get: function() {
        return this[rawSymbol];
      },
      set: function(val2) {
        this[rawSymbol] = val2;
      }
    }
  });
  Object.defineProperty(pinoResProto, rawSymbol, {
    writable: true,
    value: {}
  });
});

// node_modules/@aws-sdk/client-sso/dist-cjs/
var require_pino_std_serializers = __commonJS((exports, module) => {
  var errSerializer = require_err();
  var errWithCauseSerializer = require_err_with_cause();
  var reqSerializers = require_req();
  var resSerializers = require_res();
  module.exports = {
    err: errSerializer,
    errWithCause: errWithCauseSerializer,
    mapHttpRequest: reqSerializers.mapHttpRequest,
    mapHttpResponse: resSerializers.mapHttpResponse,
    req: reqSerializers.reqSerializer,
    res: resSerializers.resSerializer,
    wrapErrorSerializer: function wrapErrorSerializer(customSerializer) {
      if (customSerializer === errSerializer)
        return customSerializer;
      return function wrapErrSerializer(err) {
        return customSerializer(errSerializer(err));
      };
    },
    wrapRequestSerializer: function wrapRequestSerializer(customSerializer) {
      if (customSerializer === reqSerializers.reqSerializer)
        return customSerializer;
      return function wrappedReqSerializer(req) {
        return customSerializer(reqSerializers.reqSerializer(req));
      };
    },
    wrapResponseSerializer: function wrapResponseSerializer(customSerializer) {
      if (customSerializer === resSerializers.resSerializer)
        return customSerializer;
      return function wrappedResSerializer(res) {
        return customSerializer(resSerializers.resSerializer(res));
      };
    }
  };
});

// node_modules/@aws-sdk/client-ss
var require_caller = __commonJS((exports, module) => {
  var noOpPrepareStackTrace = function(_, stack) {
    return stack;
  };
  module.exports = function getCallers() {
    const originalPrepare = Error.prepareStackTrace;
    Error.prepareStackTrace = noOpPrepareStackTrace;
    const stack = new Error().stack;
    Error.prepareStackTrace = originalPrepare;
    if (!Array.isArray(stack)) {
      return;
    }
    const entries = stack.slice(2);
    const fileNames = [];
    for (const entry of entries) {
      if (!entry) {
        continue;
      }
      fileNames.push(entry.getFileName());
    }
    return fileNames;
  };
});

// node_modules/@aws-sdk/client-sso/dist-cjs
var require_validator = __commonJS((exports, module) => {
  var validator = function(opts = {}) {
    const {
      ERR_PATHS_MUST_BE_STRINGS = () => "fast-redact - Paths must be (non-empty) strings",
      ERR_INVALID_PATH = (s) => `fast-redact \u2013 Invalid path (${s})`
    } = opts;
    return function validate({ paths }) {
      paths.forEach((s) => {
        if (typeof s !== "string") {
          throw Error(ERR_PATHS_MUST_BE_STRINGS());
        }
        try {
          if (/〇/.test(s))
            throw Error();
          const expr = (s[0] === "[" ? "" : ".") + s.replace(/^\*/, "\u3007").replace(/\.\*/g, ".\u3007").replace(/\[\*\]/g, "[\u3007]");
          if (/\n|\r|;/.test(expr))
            throw Error();
          if (/\/\*/.test(expr))
            throw Error();
          Function(`
            'use strict'
            const o = new Proxy({}, { get: () => o, set: () => { throw Error() } });
            const \u3007 = null;
            o${expr}
            if ([o${expr}].length !== 1) throw Error()`)();
        } catch (e) {
          throw Error(ERR_INVALID_PATH(s));
        }
      });
    };
  };
  module.exports = validator;
});

// node_modules/@aws-sdk/client-sso/d
var require_rx = __commonJS((exports, module) => {
  module.exports = /[^.[\]]+|\[((?:.)*?)\]/g;
});

// node_modules/@aws-sdk/client-sso/dist
var require_parse = __commonJS((exports, module) => {
  var parse = function({ paths }) {
    const wildcards = [];
    var wcLen = 0;
    const secret = paths.reduce(function(o, strPath, ix) {
      var path = strPath.match(rx).map((p) => p.replace(/'|"|`/g, ""));
      const leadingBracket = strPath[0] === "[";
      path = path.map((p) => {
        if (p[0] === "[")
          return p.substr(1, p.length - 2);
        else
          return p;
      });
      const star = path.indexOf("*");
      if (star > -1) {
        const before = path.slice(0, star);
        const beforeStr = before.join(".");
        const after = path.slice(star + 1, path.length);
        const nested = after.length > 0;
        wcLen++;
        wildcards.push({
          before,
          beforeStr,
          after,
          nested
        });
      } else {
        o[strPath] = {
          path,
          val: undefined,
          precensored: false,
          circle: "",
          escPath: JSON.stringify(strPath),
          leadingBracket
        };
      }
      return o;
    }, {});
    return { wildcards, wcLen, secret };
  };
  var rx = require_rx();
  module.exports = parse;
});

// node_modules/@aws-sdk/client-sso/dist-cj
var require_redactor = __commonJS((exports, module) => {
  var redactor = function({ secret, serialize, wcLen, strict, isCensorFct, censorFctTakesPath }, state) {
    const redact = Function("o", `
    if (typeof o !== 'object' || o == null) {
      ${strictImpl(strict, serialize)}
    }
    const { censor, secret } = this
    ${redactTmpl(secret, isCensorFct, censorFctTakesPath)}
    this.compileRestore()
    ${dynamicRedactTmpl(wcLen > 0, isCensorFct, censorFctTakesPath)}
    ${resultTmpl(serialize)}
  `).bind(state);
    if (serialize === false) {
      redact.restore = (o) => state.restore(o);
    }
    return redact;
  };
  var redactTmpl = function(secret, isCensorFct, censorFctTakesPath) {
    return Object.keys(secret).map((path) => {
      const { escPath, leadingBracket, path: arrPath } = secret[path];
      const skip = leadingBracket ? 1 : 0;
      const delim = leadingBracket ? "" : ".";
      const hops = [];
      var match;
      while ((match = rx.exec(path)) !== null) {
        const [, ix] = match;
        const { index, input } = match;
        if (index > skip)
          hops.push(input.substring(0, index - (ix ? 0 : 1)));
      }
      var existence = hops.map((p) => `o${delim}${p}`).join(" && ");
      if (existence.length === 0)
        existence += `o${delim}${path} != null`;
      else
        existence += ` && o${delim}${path} != null`;
      const circularDetection = `
      switch (true) {
        ${hops.reverse().map((p) => `
          case o${delim}${p} === censor:
            secret[${escPath}].circle = ${JSON.stringify(p)}
            break
        `).join("\n")}
      }
    `;
      const censorArgs = censorFctTakesPath ? `val, ${JSON.stringify(arrPath)}` : `val`;
      return `
      if (${existence}) {
        const val = o${delim}${path}
        if (val === censor) {
          secret[${escPath}].precensored = true
        } else {
          secret[${escPath}].val = val
          o${delim}${path} = ${isCensorFct ? `censor(${censorArgs})` : "censor"}
          ${circularDetection}
        }
      }
    `;
    }).join("\n");
  };
  var dynamicRedactTmpl = function(hasWildcards, isCensorFct, censorFctTakesPath) {
    return hasWildcards === true ? `
    {
      const { wildcards, wcLen, groupRedact, nestedRedact } = this
      for (var i = 0; i < wcLen; i++) {
        const { before, beforeStr, after, nested } = wildcards[i]
        if (nested === true) {
          secret[beforeStr] = secret[beforeStr] || []
          nestedRedact(secret[beforeStr], o, before, after, censor, ${isCensorFct}, ${censorFctTakesPath})
        } else secret[beforeStr] = groupRedact(o, before, censor, ${isCensorFct}, ${censorFctTakesPath})
      }
    }
  ` : "";
  };
  var resultTmpl = function(serialize) {
    return serialize === false ? `return o` : `
    var s = this.serialize(o)
    this.restore(o)
    return s
  `;
  };
  var strictImpl = function(strict, serialize) {
    return strict === true ? `throw Error('fast-redact: primitives cannot be redacted')` : serialize === false ? `return o` : `return this.serialize(o)`;
  };
  var rx = require_rx();
  module.exports = redactor;
});

// node_modules/@aws-sdk/client-sso/dist-cjs
var require_modifiers = __commonJS((exports, module) => {
  var groupRestore = function({ keys, values, target }) {
    if (target == null)
      return;
    const length = keys.length;
    for (var i = 0;i < length; i++) {
      const k = keys[i];
      target[k] = values[i];
    }
  };
  var groupRedact = function(o, path, censor, isCensorFct, censorFctTakesPath) {
    const target = get(o, path);
    if (target == null)
      return { keys: null, values: null, target: null, flat: true };
    const keys = Object.keys(target);
    const keysLength = keys.length;
    const pathLength = path.length;
    const pathWithKey = censorFctTakesPath ? [...path] : undefined;
    const values = new Array(keysLength);
    for (var i = 0;i < keysLength; i++) {
      const key = keys[i];
      values[i] = target[key];
      if (censorFctTakesPath) {
        pathWithKey[pathLength] = key;
        target[key] = censor(target[key], pathWithKey);
      } else if (isCensorFct) {
        target[key] = censor(target[key]);
      } else {
        target[key] = censor;
      }
    }
    return { keys, values, target, flat: true };
  };
  var nestedRestore = function(instructions) {
    for (let i = 0;i < instructions.length; i++) {
      const { target, path, value } = instructions[i];
      let current = target;
      for (let i2 = path.length - 1;i2 > 0; i2--) {
        current = current[path[i2]];
      }
      current[path[0]] = value;
    }
  };
  var nestedRedact = function(store, o, path, ns, censor, isCensorFct, censorFctTakesPath) {
    const target = get(o, path);
    if (target == null)
      return;
    const keys = Object.keys(target);
    const keysLength = keys.length;
    for (var i = 0;i < keysLength; i++) {
      const key = keys[i];
      specialSet(store, target, key, path, ns, censor, isCensorFct, censorFctTakesPath);
    }
    return store;
  };
  var has = function(obj, prop) {
    return obj !== undefined && obj !== null ? "hasOwn" in Object ? Object.hasOwn(obj, prop) : Object.prototype.hasOwnProperty.call(obj, prop) : false;
  };
  var specialSet = function(store, o, k, path, afterPath, censor, isCensorFct, censorFctTakesPath) {
    const afterPathLen = afterPath.length;
    const lastPathIndex = afterPathLen - 1;
    const originalKey = k;
    var i = -1;
    var n;
    var nv;
    var ov;
    var oov = null;
    var wc = null;
    var kIsWc;
    var wcov;
    var consecutive = false;
    var level = 0;
    var depth = 0;
    var redactPathCurrent = tree();
    ov = n = o[k];
    if (typeof n !== "object")
      return;
    while (n != null && ++i < afterPathLen) {
      depth += 1;
      k = afterPath[i];
      oov = ov;
      if (k !== "*" && !wc && !(typeof n === "object" && (k in n))) {
        break;
      }
      if (k === "*") {
        if (wc === "*") {
          consecutive = true;
        }
        wc = k;
        if (i !== lastPathIndex) {
          continue;
        }
      }
      if (wc) {
        const wcKeys = Object.keys(n);
        for (var j = 0;j < wcKeys.length; j++) {
          const wck = wcKeys[j];
          wcov = n[wck];
          kIsWc = k === "*";
          if (consecutive) {
            redactPathCurrent = node(redactPathCurrent, wck, depth);
            level = i;
            ov = iterateNthLevel(wcov, level - 1, k, path, afterPath, censor, isCensorFct, censorFctTakesPath, originalKey, n, nv, ov, kIsWc, wck, i, lastPathIndex, redactPathCurrent, store, o[originalKey], depth + 1);
          } else {
            if (kIsWc || typeof wcov === "object" && wcov !== null && k in wcov) {
              if (kIsWc) {
                ov = wcov;
              } else {
                ov = wcov[k];
              }
              nv = i !== lastPathIndex ? ov : isCensorFct ? censorFctTakesPath ? censor(ov, [...path, originalKey, ...afterPath]) : censor(ov) : censor;
              if (kIsWc) {
                const rv = restoreInstr(node(redactPathCurrent, wck, depth), ov, o[originalKey]);
                store.push(rv);
                n[wck] = nv;
              } else {
                if (wcov[k] === nv) {
                } else if (nv === undefined && censor !== undefined || has(wcov, k) && nv === ov) {
                  redactPathCurrent = node(redactPathCurrent, wck, depth);
                } else {
                  redactPathCurrent = node(redactPathCurrent, wck, depth);
                  const rv = restoreInstr(node(redactPathCurrent, k, depth + 1), ov, o[originalKey]);
                  store.push(rv);
                  wcov[k] = nv;
                }
              }
            }
          }
        }
        wc = null;
      } else {
        ov = n[k];
        redactPathCurrent = node(redactPathCurrent, k, depth);
        nv = i !== lastPathIndex ? ov : isCensorFct ? censorFctTakesPath ? censor(ov, [...path, originalKey, ...afterPath]) : censor(ov) : censor;
        if (has(n, k) && nv === ov || nv === undefined && censor !== undefined) {
        } else {
          const rv = restoreInstr(redactPathCurrent, ov, o[originalKey]);
          store.push(rv);
          n[k] = nv;
        }
        n = n[k];
      }
      if (typeof n !== "object")
        break;
      if (ov === oov || typeof ov === "undefined") {
      }
    }
  };
  var get = function(o, p) {
    var i = -1;
    var l = p.length;
    var n = o;
    while (n != null && ++i < l) {
      n = n[p[i]];
    }
    return n;
  };
  var iterateNthLevel = function(wcov, level, k, path, afterPath, censor, isCensorFct, censorFctTakesPath, originalKey, n, nv, ov, kIsWc, wck, i, lastPathIndex, redactPathCurrent, store, parent, depth) {
    if (level === 0) {
      if (kIsWc || typeof wcov === "object" && wcov !== null && k in wcov) {
        if (kIsWc) {
          ov = wcov;
        } else {
          ov = wcov[k];
        }
        nv = i !== lastPathIndex ? ov : isCensorFct ? censorFctTakesPath ? censor(ov, [...path, originalKey, ...afterPath]) : censor(ov) : censor;
        if (kIsWc) {
          const rv = restoreInstr(redactPathCurrent, ov, parent);
          store.push(rv);
          n[wck] = nv;
        } else {
          if (wcov[k] === nv) {
          } else if (nv === undefined && censor !== undefined || has(wcov, k) && nv === ov) {
          } else {
            const rv = restoreInstr(node(redactPathCurrent, k, depth + 1), ov, parent);
            store.push(rv);
            wcov[k] = nv;
          }
        }
      }
    }
    for (const key in wcov) {
      if (typeof wcov[key] === "object") {
        redactPathCurrent = node(redactPathCurrent, key, depth);
        iterateNthLevel(wcov[key], level - 1, k, path, afterPath, censor, isCensorFct, censorFctTakesPath, originalKey, n, nv, ov, kIsWc, wck, i, lastPathIndex, redactPathCurrent, store, parent, depth + 1);
      }
    }
  };
  var tree = function() {
    return { parent: null, key: null, children: [], depth: 0 };
  };
  var node = function(parent, key, depth) {
    if (parent.depth === depth) {
      return node(parent.parent, key, depth);
    }
    var child = {
      parent,
      key,
      depth,
      children: []
    };
    parent.children.push(child);
    return child;
  };
  var restoreInstr = function(node2, value, target) {
    let current = node2;
    const path = [];
    do {
      path.push(current.key);
      current = current.parent;
    } while (current.parent != null);
    return { path, value, target };
  };
  module.exports = {
    groupRedact,
    groupRestore,
    nestedRedact,
    nestedRestore
  };
});

// node_modules/@aws-sdk/client-sso/dist-cj
var require_restorer = __commonJS((exports, module) => {
  var restorer = function({ secret, wcLen }) {
    return function compileRestore() {
      if (this.restore)
        return;
      const paths = Object.keys(secret);
      const resetters = resetTmpl(secret, paths);
      const hasWildcards = wcLen > 0;
      const state = hasWildcards ? { secret, groupRestore, nestedRestore } : { secret };
      this.restore = Function("o", restoreTmpl(resetters, paths, hasWildcards)).bind(state);
    };
  };
  var resetTmpl = function(secret, paths) {
    return paths.map((path) => {
      const { circle, escPath, leadingBracket } = secret[path];
      const delim = leadingBracket ? "" : ".";
      const reset = circle ? `o.${circle} = secret[${escPath}].val` : `o${delim}${path} = secret[${escPath}].val`;
      const clear = `secret[${escPath}].val = undefined`;
      return `
      if (secret[${escPath}].val !== undefined) {
        try { ${reset} } catch (e) {}
        ${clear}
      }
    `;
    }).join("");
  };
  var restoreTmpl = function(resetters, paths, hasWildcards) {
    const dynamicReset = hasWildcards === true ? `
    const keys = Object.keys(secret)
    const len = keys.length
    for (var i = len - 1; i >= ${paths.length}; i--) {
      const k = keys[i]
      const o = secret[k]
      if (o.flat === true) this.groupRestore(o)
      else this.nestedRestore(o)
      secret[k] = null
    }
  ` : "";
    return `
    const secret = this.secret
    ${dynamicReset}
    ${resetters}
    return o
  `;
  };
  var { groupRestore, nestedRestore } = require_modifiers();
  module.exports = restorer;
});

// node_modules/@aws-sdk/client-sso/dist
var require_state = __commonJS((exports, module) => {
  var state = function(o) {
    const {
      secret,
      censor,
      compileRestore,
      serialize,
      groupRedact,
      nestedRedact,
      wildcards,
      wcLen
    } = o;
    const builder = [{ secret, censor, compileRestore }];
    if (serialize !== false)
      builder.push({ serialize });
    if (wcLen > 0)
      builder.push({ groupRedact, nestedRedact, wildcards, wcLen });
    return Object.assign(...builder);
  };
  module.exports = state;
});

// node_modules/@aws-sdk/client-sso/
var require_fast_redact = __commonJS((exports, module) => {
  var fastRedact = function(opts = {}) {
    const paths = Array.from(new Set(opts.paths || []));
    const serialize = "serialize" in opts ? opts.serialize === false ? opts.serialize : typeof opts.serialize === "function" ? opts.serialize : JSON.stringify : JSON.stringify;
    const remove = opts.remove;
    if (remove === true && serialize !== JSON.stringify) {
      throw Error("fast-redact \u2013 remove option may only be set when serializer is JSON.stringify");
    }
    const censor = remove === true ? undefined : ("censor" in opts) ? opts.censor : DEFAULT_CENSOR;
    const isCensorFct = typeof censor === "function";
    const censorFctTakesPath = isCensorFct && censor.length > 1;
    if (paths.length === 0)
      return serialize || noop;
    validate({ paths, serialize, censor });
    const { wildcards, wcLen, secret } = parse({ paths, censor });
    const compileRestore = restorer({ secret, wcLen });
    const strict = "strict" in opts ? opts.strict : true;
    return redactor({ secret, wcLen, serialize, strict, isCensorFct, censorFctTakesPath }, state({
      secret,
      censor,
      compileRestore,
      serialize,
      groupRedact,
      nestedRedact,
      wildcards,
      wcLen
    }));
  };
  var validator = require_validator();
  var parse = require_parse();
  var redactor = require_redactor();
  var restorer = require_restorer();
  var { groupRedact, nestedRedact } = require_modifiers();
  var state = require_state();
  var rx = require_rx();
  var validate = validator();
  var noop = (o) => o;
  noop.restore = noop;
  var DEFAULT_CENSOR = "[REDACTED]";
  fastRedact.rx = rx;
  fastRedact.validator = validator;
  module.exports = fastRedact;
});

// node_modules/@aws-sdk/client-sso
var require_symbols = __commonJS((exports, module) => {
  var setLevelSym = Symbol("pino.setLevel");
  var getLevelSym = Symbol("pino.getLevel");
  var levelValSym = Symbol("pino.levelVal");
  var useLevelLabelsSym = Symbol("pino.useLevelLabels");
  var useOnlyCustomLevelsSym = Symbol("pino.useOnlyCustomLevels");
  var mixinSym = Symbol("pino.mixin");
  var lsCacheSym = Symbol("pino.lsCache");
  var chindingsSym = Symbol("pino.chindings");
  var asJsonSym = Symbol("pino.asJson");
  var writeSym = Symbol("pino.write");
  var redactFmtSym = Symbol("pino.redactFmt");
  var timeSym = Symbol("pino.time");
  var timeSliceIndexSym = Symbol("pino.timeSliceIndex");
  var streamSym = Symbol("pino.stream");
  var stringifySym = Symbol("pino.stringify");
  var stringifySafeSym = Symbol("pino.stringifySafe");
  var stringifiersSym = Symbol("pino.stringifiers");
  var endSym = Symbol("pino.end");
  var formatOptsSym = Symbol("pino.formatOpts");
  var messageKeySym = Symbol("pino.messageKey");
  var errorKeySym = Symbol("pino.errorKey");
  var nestedKeySym = Symbol("pino.nestedKey");
  var nestedKeyStrSym = Symbol("pino.nestedKeyStr");
  var mixinMergeStrategySym = Symbol("pino.mixinMergeStrategy");
  var msgPrefixSym = Symbol("pino.msgPrefix");
  var wildcardFirstSym = Symbol("pino.wildcardFirst");
  var serializersSym = Symbol.for("pino.serializers");
  var formattersSym = Symbol.for("pino.formatters");
  var hooksSym = Symbol.for("pino.hooks");
  var needsMetadataGsym = Symbol.for("pino.metadata");
  module.exports = {
    setLevelSym,
    getLevelSym,
    levelValSym,
    useLevelLabelsSym,
    mixinSym,
    lsCacheSym,
    chindingsSym,
    asJsonSym,
    writeSym,
    serializersSym,
    redactFmtSym,
    timeSym,
    timeSliceIndexSym,
    streamSym,
    stringifySym,
    stringifySafeSym,
    stringifiersSym,
    endSym,
    formatOptsSym,
    messageKeySym,
    errorKeySym,
    nestedKeySym,
    wildcardFirstSym,
    needsMetadataGsym,
    useOnlyCustomLevelsSym,
    formattersSym,
    hooksSym,
    nestedKeyStrSym,
    mixinMergeStrategySym,
    msgPrefixSym
  };
});

// node_modules/@aws-sdk/client-sso/d
var require_redaction = __commonJS((exports, module) => {
  var redaction = function(opts, serialize) {
    const { paths, censor } = handle(opts);
    const shape = paths.reduce((o, str) => {
      rx.lastIndex = 0;
      const first = rx.exec(str);
      const next = rx.exec(str);
      let ns = first[1] !== undefined ? first[1].replace(/^(?:"|'|`)(.*)(?:"|'|`)$/, "$1") : first[0];
      if (ns === "*") {
        ns = wildcardFirstSym;
      }
      if (next === null) {
        o[ns] = null;
        return o;
      }
      if (o[ns] === null) {
        return o;
      }
      const { index } = next;
      const nextPath = `${str.substr(index, str.length - 1)}`;
      o[ns] = o[ns] || [];
      if (ns !== wildcardFirstSym && o[ns].length === 0) {
        o[ns].push(...o[wildcardFirstSym] || []);
      }
      if (ns === wildcardFirstSym) {
        Object.keys(o).forEach(function(k) {
          if (o[k]) {
            o[k].push(nextPath);
          }
        });
      }
      o[ns].push(nextPath);
      return o;
    }, {});
    const result = {
      [redactFmtSym]: fastRedact({ paths, censor, serialize, strict })
    };
    const topCensor = (...args) => {
      return typeof censor === "function" ? serialize(censor(...args)) : serialize(censor);
    };
    return [...Object.keys(shape), ...Object.getOwnPropertySymbols(shape)].reduce((o, k) => {
      if (shape[k] === null) {
        o[k] = (value) => topCensor(value, [k]);
      } else {
        const wrappedCensor = typeof censor === "function" ? (value, path) => {
          return censor(value, [k, ...path]);
        } : censor;
        o[k] = fastRedact({
          paths: shape[k],
          censor: wrappedCensor,
          serialize,
          strict
        });
      }
      return o;
    }, result);
  };
  var handle = function(opts) {
    if (Array.isArray(opts)) {
      opts = { paths: opts, censor: CENSOR };
      validate(opts);
      return opts;
    }
    let { paths, censor = CENSOR, remove } = opts;
    if (Array.isArray(paths) === false) {
      throw Error("pino \u2013 redact must contain an array of strings");
    }
    if (remove === true)
      censor = undefined;
    validate({ paths, censor });
    return { paths, censor };
  };
  var fastRedact = require_fast_redact();
  var { redactFmtSym, wildcardFirstSym } = require_symbols();
  var { rx, validator } = fastRedact;
  var validate = validator({
    ERR_PATHS_MUST_BE_STRINGS: () => "pino \u2013 redacted paths must be strings",
    ERR_INVALID_PATH: (s) => `pino \u2013 redact paths array contains an invalid path (${s})`
  });
  var CENSOR = "[Redacted]";
  var strict = false;
  module.exports = redaction;
});

// node_modules/@aws-sdk/client-
var require_time = __commonJS((exports, module) => {
  var nullTime = () => "";
  var epochTime = () => `,"time":${Date.now()}`;
  var unixTime = () => `,"time":${Math.round(Date.now() / 1000)}`;
  var isoTime = () => `,"time":"${new Date(Date.now()).toISOString()}"`;
  module.exports = { nullTime, epochTime, unixTime, isoTime };
});

// node_modules/@aws-sdk/client-sso/dist-cjs/en
var require_quick_format_unescaped = __commonJS((exports, module) => {
  var tryStringify = function(o) {
    try {
      return JSON.stringify(o);
    } catch (e) {
      return '"[Circular]"';
    }
  };
  var format = function(f, args, opts) {
    var ss = opts && opts.stringify || tryStringify;
    var offset = 1;
    if (typeof f === "object" && f !== null) {
      var len = args.length + offset;
      if (len === 1)
        return f;
      var objects = new Array(len);
      objects[0] = ss(f);
      for (var index = 1;index < len; index++) {
        objects[index] = ss(args[index]);
      }
      return objects.join(" ");
    }
    if (typeof f !== "string") {
      return f;
    }
    var argLen = args.length;
    if (argLen === 0)
      return f;
    var str = "";
    var a = 1 - offset;
    var lastPos = -1;
    var flen = f && f.length || 0;
    for (var i = 0;i < flen; ) {
      if (f.charCodeAt(i) === 37 && i + 1 < flen) {
        lastPos = lastPos > -1 ? lastPos : 0;
        switch (f.charCodeAt(i + 1)) {
          case 100:
          case 102:
            if (a >= argLen)
              break;
            if (args[a] == null)
              break;
            if (lastPos < i)
              str += f.slice(lastPos, i);
            str += Number(args[a]);
            lastPos = i + 2;
            i++;
            break;
          case 105:
            if (a >= argLen)
              break;
            if (args[a] == null)
              break;
            if (lastPos < i)
              str += f.slice(lastPos, i);
            str += Math.floor(Number(args[a]));
            lastPos = i + 2;
            i++;
            break;
          case 79:
          case 111:
          case 106:
            if (a >= argLen)
              break;
            if (args[a] === undefined)
              break;
            if (lastPos < i)
              str += f.slice(lastPos, i);
            var type = typeof args[a];
            if (type === "string") {
              str += "\'" + args[a] + "\'";
              lastPos = i + 2;
              i++;
              break;
            }
            if (type === "function") {
              str += args[a].name || "<anonymous>";
              lastPos = i + 2;
              i++;
              break;
            }
            str += ss(args[a]);
            lastPos = i + 2;
            i++;
            break;
          case 115:
            if (a >= argLen)
              break;
            if (lastPos < i)
              str += f.slice(lastPos, i);
            str += String(args[a]);
            lastPos = i + 2;
            i++;
            break;
          case 37:
            if (lastPos < i)
              str += f.slice(lastPos, i);
            str += "%";
            lastPos = i + 2;
            i++;
            a--;
            break;
        }
        ++a;
      }
      ++i;
    }
    if (lastPos === -1)
      return f;
    else if (lastPos < flen) {
      str += f.slice(lastPos);
    }
    return str;
  };
  module.exports = format;
});

// node_modules/@aws-sdk/client-sso/d
var require_atomic_sleep = __commonJS((exports, module) => {
  if (typeof SharedArrayBuffer !== "undefined" && typeof Atomics !== "undefined") {
    let sleep = function(ms) {
      const valid = ms > 0 && ms < Infinity;
      if (valid === false) {
        if (typeof ms !== "number" && typeof ms !== "bigint") {
          throw TypeError("sleep: ms must be a number");
        }
        throw RangeError("sleep: ms must be a number that is greater than 0 but less than Infinity");
      }
      Atomics.wait(nil, 0, 0, Number(ms));
    };
    const nil = new Int32Array(new SharedArrayBuffer(4));
    module.exports = sleep;
  } else {
    let sleep = function(ms) {
      const valid = ms > 0 && ms < Infinity;
      if (valid === false) {
        if (typeof ms !== "number" && typeof ms !== "bigint") {
          throw TypeError("sleep: ms must be a number");
        }
        throw RangeError("sleep: ms must be a number that is greater than 0 but less than Infinity");
      }
      const target = Date.now() + Number(ms);
      while (target > Date.now()) {
      }
    };
    module.exports = sleep;
  }
});

// node_modules/@aws-sdk/client-sso
var require_sonic_boom = __commonJS((exports, module) => {
  var openFile = function(file, sonic) {
    sonic._opening = true;
    sonic._writing = true;
    sonic._asyncDrainScheduled = false;
    function fileOpened(err, fd) {
      if (err) {
        sonic._reopening = false;
        sonic._writing = false;
        sonic._opening = false;
        if (sonic.sync) {
          process.nextTick(() => {
            if (sonic.listenerCount("error") > 0) {
              sonic.emit("error", err);
            }
          });
        } else {
          sonic.emit("error", err);
        }
        return;
      }
      sonic.fd = fd;
      sonic.file = file;
      sonic._reopening = false;
      sonic._opening = false;
      sonic._writing = false;
      if (sonic.sync) {
        process.nextTick(() => sonic.emit("ready"));
      } else {
        sonic.emit("ready");
      }
      if (sonic._reopening || sonic.destroyed) {
        return;
      }
      if (!sonic._writing && sonic._len > sonic.minLength || sonic._flushPending) {
        sonic._actualWrite();
      }
    }
    const flags = sonic.append ? "a" : "w";
    const mode = sonic.mode;
    if (sonic.sync) {
      try {
        if (sonic.mkdir)
          fs.mkdirSync(path.dirname(file), { recursive: true });
        const fd = fs.openSync(file, flags, mode);
        fileOpened(null, fd);
      } catch (err) {
        fileOpened(err);
        throw err;
      }
    } else if (sonic.mkdir) {
      fs.mkdir(path.dirname(file), { recursive: true }, (err) => {
        if (err)
          return fileOpened(err);
        fs.open(file, flags, mode, fileOpened);
      });
    } else {
      fs.open(file, flags, mode, fileOpened);
    }
  };
  var SonicBoom = function(opts) {
    if (!(this instanceof SonicBoom)) {
      return new SonicBoom(opts);
    }
    let { fd, dest, minLength, maxLength, maxWrite, sync, append = true, mkdir, retryEAGAIN, fsync, contentMode, mode } = opts || {};
    fd = fd || dest;
    this._len = 0;
    this.fd = -1;
    this._bufs = [];
    this._lens = [];
    this._writing = false;
    this._ending = false;
    this._reopening = false;
    this._asyncDrainScheduled = false;
    this._flushPending = false;
    this._hwm = Math.max(minLength || 0, 16387);
    this.file = null;
    this.destroyed = false;
    this.minLength = minLength || 0;
    this.maxLength = maxLength || 0;
    this.maxWrite = maxWrite || MAX_WRITE;
    this.sync = sync || false;
    this.writable = true;
    this._fsync = fsync || false;
    this.append = append || false;
    this.mode = mode;
    this.retryEAGAIN = retryEAGAIN || (() => true);
    this.mkdir = mkdir || false;
    let fsWriteSync;
    let fsWrite;
    if (contentMode === kContentModeBuffer) {
      this._writingBuf = kEmptyBuffer;
      this.write = writeBuffer;
      this.flush = flushBuffer;
      this.flushSync = flushBufferSync;
      this._actualWrite = actualWriteBuffer;
      fsWriteSync = () => fs.writeSync(this.fd, this._writingBuf);
      fsWrite = () => fs.write(this.fd, this._writingBuf, this.release);
    } else if (contentMode === undefined || contentMode === kContentModeUtf8) {
      this._writingBuf = "";
      this.write = write;
      this.flush = flush;
      this.flushSync = flushSync;
      this._actualWrite = actualWrite;
      fsWriteSync = () => fs.writeSync(this.fd, this._writingBuf, "utf8");
      fsWrite = () => fs.write(this.fd, this._writingBuf, "utf8", this.release);
    } else {
      throw new Error(`SonicBoom supports "${kContentModeUtf8}" and "${kContentModeBuffer}", but passed ${contentMode}`);
    }
    if (typeof fd === "number") {
      this.fd = fd;
      process.nextTick(() => this.emit("ready"));
    } else if (typeof fd === "string") {
      openFile(fd, this);
    } else {
      throw new Error("SonicBoom supports only file descriptors and files");
    }
    if (this.minLength >= this.maxWrite) {
      throw new Error(`minLength should be smaller than maxWrite (${this.maxWrite})`);
    }
    this.release = (err, n) => {
      if (err) {
        if ((err.code === "EAGAIN" || err.code === "EBUSY") && this.retryEAGAIN(err, this._writingBuf.length, this._len - this._writingBuf.length)) {
          if (this.sync) {
            try {
              sleep(BUSY_WRITE_TIMEOUT);
              this.release(undefined, 0);
            } catch (err2) {
              this.release(err2);
            }
          } else {
            setTimeout(fsWrite, BUSY_WRITE_TIMEOUT);
          }
        } else {
          this._writing = false;
          this.emit("error", err);
        }
        return;
      }
      this.emit("write", n);
      const releasedBufObj = releaseWritingBuf(this._writingBuf, this._len, n);
      this._len = releasedBufObj.len;
      this._writingBuf = releasedBufObj.writingBuf;
      if (this._writingBuf.length) {
        if (!this.sync) {
          fsWrite();
          return;
        }
        try {
          do {
            const n2 = fsWriteSync();
            const releasedBufObj2 = releaseWritingBuf(this._writingBuf, this._len, n2);
            this._len = releasedBufObj2.len;
            this._writingBuf = releasedBufObj2.writingBuf;
          } while (this._writingBuf.length);
        } catch (err2) {
          this.release(err2);
          return;
        }
      }
      if (this._fsync) {
        fs.fsyncSync(this.fd);
      }
      const len = this._len;
      if (this._reopening) {
        this._writing = false;
        this._reopening = false;
        this.reopen();
      } else if (len > this.minLength) {
        this._actualWrite();
      } else if (this._ending) {
        if (len > 0) {
          this._actualWrite();
        } else {
          this._writing = false;
          actualClose(this);
        }
      } else {
        this._writing = false;
        if (this.sync) {
          if (!this._asyncDrainScheduled) {
            this._asyncDrainScheduled = true;
            process.nextTick(emitDrain, this);
          }
        } else {
          this.emit("drain");
        }
      }
    };
    this.on("newListener", function(name) {
      if (name === "drain") {
        this._asyncDrainScheduled = false;
      }
    });
  };
  var releaseWritingBuf = function(writingBuf, len, n) {
    if (typeof writingBuf === "string" && Buffer.byteLength(writingBuf) !== n) {
      n = Buffer.from(writingBuf).subarray(0, n).toString().length;
    }
    len = Math.max(len - n, 0);
    writingBuf = writingBuf.slice(n);
    return { writingBuf, len };
  };
  var emitDrain = function(sonic) {
    const hasListeners = sonic.listenerCount("drain") > 0;
    if (!hasListeners)
      return;
    sonic._asyncDrainScheduled = false;
    sonic.emit("drain");
  };
  var mergeBuf = function(bufs, len) {
    if (bufs.length === 0) {
      return kEmptyBuffer;
    }
    if (bufs.length === 1) {
      return bufs[0];
    }
    return Buffer.concat(bufs, len);
  };
  var write = function(data) {
    if (this.destroyed) {
      throw new Error("SonicBoom destroyed");
    }
    const len = this._len + data.length;
    const bufs = this._bufs;
    if (this.maxLength && len > this.maxLength) {
      this.emit("drop", data);
      return this._len < this._hwm;
    }
    if (bufs.length === 0 || bufs[bufs.length - 1].length + data.length > this.maxWrite) {
      bufs.push("" + data);
    } else {
      bufs[bufs.length - 1] += data;
    }
    this._len = len;
    if (!this._writing && this._len >= this.minLength) {
      this._actualWrite();
    }
    return this._len < this._hwm;
  };
  var writeBuffer = function(data) {
    if (this.destroyed) {
      throw new Error("SonicBoom destroyed");
    }
    const len = this._len + data.length;
    const bufs = this._bufs;
    const lens = this._lens;
    if (this.maxLength && len > this.maxLength) {
      this.emit("drop", data);
      return this._len < this._hwm;
    }
    if (bufs.length === 0 || lens[lens.length - 1] + data.length > this.maxWrite) {
      bufs.push([data]);
      lens.push(data.length);
    } else {
      bufs[bufs.length - 1].push(data);
      lens[lens.length - 1] += data.length;
    }
    this._len = len;
    if (!this._writing && this._len >= this.minLength) {
      this._actualWrite();
    }
    return this._len < this._hwm;
  };
  var callFlushCallbackOnDrain = function(cb) {
    this._flushPending = true;
    const onDrain = () => {
      if (!this._fsync) {
        fs.fsync(this.fd, (err) => {
          this._flushPending = false;
          cb(err);
        });
      } else {
        this._flushPending = false;
        cb();
      }
      this.off("error", onError);
    };
    const onError = (err) => {
      this._flushPending = false;
      cb(err);
      this.off("drain", onDrain);
    };
    this.once("drain", onDrain);
    this.once("error", onError);
  };
  var flush = function(cb) {
    if (cb != null && typeof cb !== "function") {
      throw new Error("flush cb must be a function");
    }
    if (this.destroyed) {
      const error = new Error("SonicBoom destroyed");
      if (cb) {
        cb(error);
        return;
      }
      throw error;
    }
    if (this.minLength <= 0) {
      cb?.();
      return;
    }
    if (cb) {
      callFlushCallbackOnDrain.call(this, cb);
    }
    if (this._writing) {
      return;
    }
    if (this._bufs.length === 0) {
      this._bufs.push("");
    }
    this._actualWrite();
  };
  var flushBuffer = function(cb) {
    if (cb != null && typeof cb !== "function") {
      throw new Error("flush cb must be a function");
    }
    if (this.destroyed) {
      const error = new Error("SonicBoom destroyed");
      if (cb) {
        cb(error);
        return;
      }
      throw error;
    }
    if (this.minLength <= 0) {
      cb?.();
      return;
    }
    if (cb) {
      callFlushCallbackOnDrain.call(this, cb);
    }
    if (this._writing) {
      return;
    }
    if (this._bufs.length === 0) {
      this._bufs.push([]);
      this._lens.push(0);
    }
    this._actualWrite();
  };
  var flushSync = function() {
    if (this.destroyed) {
      throw new Error("SonicBoom destroyed");
    }
    if (this.fd < 0) {
      throw new Error("sonic boom is not ready yet");
    }
    if (!this._writing && this._writingBuf.length > 0) {
      this._bufs.unshift(this._writingBuf);
      this._writingBuf = "";
    }
    let buf = "";
    while (this._bufs.length || buf) {
      if (buf.length <= 0) {
        buf = this._bufs[0];
      }
      try {
        const n = fs.writeSync(this.fd, buf, "utf8");
        const releasedBufObj = releaseWritingBuf(buf, this._len, n);
        buf = releasedBufObj.writingBuf;
        this._len = releasedBufObj.len;
        if (buf.length <= 0) {
          this._bufs.shift();
        }
      } catch (err) {
        const shouldRetry = err.code === "EAGAIN" || err.code === "EBUSY";
        if (shouldRetry && !this.retryEAGAIN(err, buf.length, this._len - buf.length)) {
          throw err;
        }
        sleep(BUSY_WRITE_TIMEOUT);
      }
    }
    try {
      fs.fsyncSync(this.fd);
    } catch {
    }
  };
  var flushBufferSync = function() {
    if (this.destroyed) {
      throw new Error("SonicBoom destroyed");
    }
    if (this.fd < 0) {
      throw new Error("sonic boom is not ready yet");
    }
    if (!this._writing && this._writingBuf.length > 0) {
      this._bufs.unshift([this._writingBuf]);
      this._writingBuf = kEmptyBuffer;
    }
    let buf = kEmptyBuffer;
    while (this._bufs.length || buf.length) {
      if (buf.length <= 0) {
        buf = mergeBuf(this._bufs[0], this._lens[0]);
      }
      try {
        const n = fs.writeSync(this.fd, buf);
        buf = buf.subarray(n);
        this._len = Math.max(this._len - n, 0);
        if (buf.length <= 0) {
          this._bufs.shift();
          this._lens.shift();
        }
      } catch (err) {
        const shouldRetry = err.code === "EAGAIN" || err.code === "EBUSY";
        if (shouldRetry && !this.retryEAGAIN(err, buf.length, this._len - buf.length)) {
          throw err;
        }
        sleep(BUSY_WRITE_TIMEOUT);
      }
    }
  };
  var actualWrite = function() {
    const release = this.release;
    this._writing = true;
    this._writingBuf = this._writingBuf || this._bufs.shift() || "";
    if (this.sync) {
      try {
        const written = fs.writeSync(this.fd, this._writingBuf, "utf8");
        release(null, written);
      } catch (err) {
        release(err);
      }
    } else {
      fs.write(this.fd, this._writingBuf, "utf8", release);
    }
  };
  var actualWriteBuffer = function() {
    const release = this.release;
    this._writing = true;
    this._writingBuf = this._writingBuf.length ? this._writingBuf : mergeBuf(this._bufs.shift(), this._lens.shift());
    if (this.sync) {
      try {
        const written = fs.writeSync(this.fd, this._writingBuf);
        release(null, written);
      } catch (err) {
        release(err);
      }
    } else {
      fs.write(this.fd, this._writingBuf, release);
    }
  };
  var actualClose = function(sonic) {
    if (sonic.fd === -1) {
      sonic.once("ready", actualClose.bind(null, sonic));
      return;
    }
    sonic.destroyed = true;
    sonic._bufs = [];
    sonic._lens = [];
    fs.fsync(sonic.fd, closeWrapped);
    function closeWrapped() {
      if (sonic.fd !== 1 && sonic.fd !== 2) {
        fs.close(sonic.fd, done);
      } else {
        done();
      }
    }
    function done(err) {
      if (err) {
        sonic.emit("error", err);
        return;
      }
      if (sonic._ending && !sonic._writing) {
        sonic.emit("finish");
      }
      sonic.emit("close");
    }
  };
  var fs = __require("fs");
  var EventEmitter = __require("events");
  var inherits = __require("util").inherits;
  var path = __require("path");
  var sleep = require_atomic_sleep();
  var BUSY_WRITE_TIMEOUT = 100;
  var kEmptyBuffer = Buffer.allocUnsafe(0);
  var MAX_WRITE = 16 * 1024;
  var kContentModeBuffer = "buffer";
  var kContentModeUtf8 = "utf8";
  inherits(SonicBoom, EventEmitter);
  SonicBoom.prototype.reopen = function(file) {
    if (this.destroyed) {
      throw new Error("SonicBoom destroyed");
    }
    if (this._opening) {
      this.once("ready", () => {
        this.reopen(file);
      });
      return;
    }
    if (this._ending) {
      return;
    }
    if (!this.file) {
      throw new Error("Unable to reopen a file descriptor, you must pass a file to SonicBoom");
    }
    this._reopening = true;
    if (this._writing) {
      return;
    }
    const fd = this.fd;
    this.once("ready", () => {
      if (fd !== this.fd) {
        fs.close(fd, (err) => {
          if (err) {
            return this.emit("error", err);
          }
        });
      }
    });
    openFile(file || this.file, this);
  };
  SonicBoom.prototype.end = function() {
    if (this.destroyed) {
      throw new Error("SonicBoom destroyed");
    }
    if (this._opening) {
      this.once("ready", () => {
        this.end();
      });
      return;
    }
    if (this._ending) {
      return;
    }
    this._ending = true;
    if (this._writing) {
      return;
    }
    if (this._len > 0 && this.fd >= 0) {
      this._actualWrite();
    } else {
      actualClose(this);
    }
  };
  SonicBoom.prototype.destroy = function() {
    if (this.destroyed) {
      return;
    }
    actualClose(this);
  };
  SonicBoom.SonicBoom = SonicBoom;
  SonicBoom.default = SonicBoom;
  module.exports = SonicBoom;
});

// node_modules/@aws-sdk/client-sso/dist-c
var require_on_exit_leak_free = __commonJS((exports, module) => {
  var ensureRegistry = function() {
    if (registry === undefined) {
      registry = new FinalizationRegistry(clear);
    }
  };
  var install = function(event) {
    if (refs[event].length > 0) {
      return;
    }
    process.on(event, functions[event]);
  };
  var uninstall = function(event) {
    if (refs[event].length > 0) {
      return;
    }
    process.removeListener(event, functions[event]);
    if (refs.exit.length === 0 && refs.beforeExit.length === 0) {
      registry = undefined;
    }
  };
  var onExit = function() {
    callRefs("exit");
  };
  var onBeforeExit = function() {
    callRefs("beforeExit");
  };
  var callRefs = function(event) {
    for (const ref of refs[event]) {
      const obj = ref.deref();
      const fn = ref.fn;
      if (obj !== undefined) {
        fn(obj, event);
      }
    }
    refs[event] = [];
  };
  var clear = function(ref) {
    for (const event of ["exit", "beforeExit"]) {
      const index = refs[event].indexOf(ref);
      refs[event].splice(index, index + 1);
      uninstall(event);
    }
  };
  var _register = function(event, obj, fn) {
    if (obj === undefined) {
      throw new Error("the object can\'t be undefined");
    }
    install(event);
    const ref = new WeakRef(obj);
    ref.fn = fn;
    ensureRegistry();
    registry.register(obj, ref);
    refs[event].push(ref);
  };
  var register = function(obj, fn) {
    _register("exit", obj, fn);
  };
  var registerBeforeExit = function(obj, fn) {
    _register("beforeExit", obj, fn);
  };
  var unregister = function(obj) {
    if (registry === undefined) {
      return;
    }
    registry.unregister(obj);
    for (const event of ["exit", "beforeExit"]) {
      refs[event] = refs[event].filter((ref) => {
        const _obj = ref.deref();
        return _obj && _obj !== obj;
      });
      uninstall(event);
    }
  };
  var refs = {
    exit: [],
    beforeExit: []
  };
  var functions = {
    exit: onExit,
    beforeExit: onBeforeExit
  };
  var registry;
  module.exports = {
    register,
    registerBeforeExit,
    unregister
  };
});

// node_modules/@aws-sdk/client-sso/dist-c
var require_package = __commonJS((exports, module) => {
  module.exports = {
    name: "thread-stream",
    version: "2.4.1",
    description: "A streaming way to send data to a Node.js Worker Thread",
    main: "index.js",
    types: "index.d.ts",
    dependencies: {
      "real-require": "^0.2.0"
    },
    devDependencies: {
      "@types/node": "^20.1.0",
      "@types/tap": "^15.0.0",
      desm: "^1.3.0",
      fastbench: "^1.0.1",
      husky: "^8.0.1",
      "pino-elasticsearch": "^6.0.0",
      "sonic-boom": "^3.0.0",
      standard: "^17.0.0",
      tap: "^16.2.0",
      "ts-node": "^10.8.0",
      typescript: "^4.7.2",
      "why-is-node-running": "^2.2.2"
    },
    scripts: {
      test: "standard && npm run transpile && tap test/*.test.*js && tap --ts test/*.test.*ts",
      "test:ci": "standard && npm run transpile && npm run test:ci:js && npm run test:ci:ts",
      "test:ci:js": "tap --no-check-coverage --coverage-report=lcovonly \"test/**/*.test.*js\"",
      "test:ci:ts": "tap --ts --no-check-coverage --coverage-report=lcovonly \"test/**/*.test.*ts\"",
      "test:yarn": "npm run transpile && tap \"test/**/*.test.js\" --no-check-coverage",
      transpile: "sh ./test/ts/transpile.sh",
      prepare: "husky install"
    },
    standard: {
      ignore: [
        "test/ts/**/*"
      ]
    },
    repository: {
      type: "git",
      url: "git+https://github.com/mcollina/thread-stream.git"
    },
    keywords: [
      "worker",
      "thread",
      "threads",
      "stream"
    ],
    author: "Matteo Collina <hello@matteocollina.com>",
    license: "MIT",
    bugs: {
      url: "https://github.com/mcollina/thread-stream/issues"
    },
    homepage: "https://github.com/mcollina/thread-stream#readme"
  };
});

// node_modules/@aws-sdk/client-sso/dist-
var require_wait = __commonJS((exports, module) => {
  var wait = function(state, index, expected, timeout, done) {
    const max = Date.now() + timeout;
    let current = Atomics.load(state, index);
    if (current === expected) {
      done(null, "ok");
      return;
    }
    let prior = current;
    const check = (backoff) => {
      if (Date.now() > max) {
        done(null, "timed-out");
      } else {
        setTimeout(() => {
          prior = current;
          current = Atomics.load(state, index);
          if (current === prior) {
            check(backoff >= MAX_TIMEOUT ? MAX_TIMEOUT : backoff * 2);
          } else {
            if (current === expected)
              done(null, "ok");
            else
              done(null, "not-equal");
          }
        }, backoff);
      }
    };
    check(1);
  };
  var waitDiff = function(state, index, expected, timeout, done) {
    const max = Date.now() + timeout;
    let current = Atomics.load(state, index);
    if (current !== expected) {
      done(null, "ok");
      return;
    }
    const check = (backoff) => {
      if (Date.now() > max) {
        done(null, "timed-out");
      } else {
        setTimeout(() => {
          current = Atomics.load(state, index);
          if (current !== expected) {
            done(null, "ok");
          } else {
            check(backoff >= MAX_TIMEOUT ? MAX_TIMEOUT : backoff * 2);
          }
        }, backoff);
      }
    };
    check(1);
  };
  var MAX_TIMEOUT = 1000;
  module.exports = { wait, waitDiff };
});

// node_modules/@aws-sdk/client-sso/dist-cjs
var require_indexes = __commonJS((exports, module) => {
  var WRITE_INDEX = 4;
  var READ_INDEX = 8;
  module.exports = {
    WRITE_INDEX,
    READ_INDEX
  };
});

// node_modules/@aws-sdk/client-sso/di
var require_thread_stream = __commonJS((exports, module) => {
  var createWorker = function(stream, opts) {
    const { filename, workerData } = opts;
    const bundlerOverrides = "__bundlerPathsOverrides" in globalThis ? globalThis.__bundlerPathsOverrides : {};
    const toExecute = bundlerOverrides["thread-stream-worker"] || join(__dirname, "lib", "worker.js");
    const worker = new Worker(toExecute, {
      ...opts.workerOpts,
      trackUnmanagedFds: false,
      workerData: {
        filename: filename.indexOf("file://") === 0 ? filename : pathToFileURL(filename).href,
        dataBuf: stream[kImpl].dataBuf,
        stateBuf: stream[kImpl].stateBuf,
        workerData: {
          $context: {
            threadStreamVersion: version
          },
          ...workerData
        }
      }
    });
    worker.stream = new FakeWeakRef(stream);
    worker.on("message", onWorkerMessage);
    worker.on("exit", onWorkerExit);
    registry.register(stream, worker);
    return worker;
  };
  var drain = function(stream) {
    assert(!stream[kImpl].sync);
    if (stream[kImpl].needDrain) {
      stream[kImpl].needDrain = false;
      stream.emit("drain");
    }
  };
  var nextFlush = function(stream) {
    const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX);
    let leftover = stream[kImpl].data.length - writeIndex;
    if (leftover > 0) {
      if (stream[kImpl].buf.length === 0) {
        stream[kImpl].flushing = false;
        if (stream[kImpl].ending) {
          end(stream);
        } else if (stream[kImpl].needDrain) {
          process.nextTick(drain, stream);
        }
        return;
      }
      let toWrite = stream[kImpl].buf.slice(0, leftover);
      let toWriteBytes = Buffer.byteLength(toWrite);
      if (toWriteBytes <= leftover) {
        stream[kImpl].buf = stream[kImpl].buf.slice(leftover);
        write(stream, toWrite, nextFlush.bind(null, stream));
      } else {
        stream.flush(() => {
          if (stream.destroyed) {
            return;
          }
          Atomics.store(stream[kImpl].state, READ_INDEX, 0);
          Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);
          while (toWriteBytes > stream[kImpl].data.length) {
            leftover = leftover / 2;
            toWrite = stream[kImpl].buf.slice(0, leftover);
            toWriteBytes = Buffer.byteLength(toWrite);
          }
          stream[kImpl].buf = stream[kImpl].buf.slice(leftover);
          write(stream, toWrite, nextFlush.bind(null, stream));
        });
      }
    } else if (leftover === 0) {
      if (writeIndex === 0 && stream[kImpl].buf.length === 0) {
        return;
      }
      stream.flush(() => {
        Atomics.store(stream[kImpl].state, READ_INDEX, 0);
        Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);
        nextFlush(stream);
      });
    } else {
      destroy(stream, new Error("overwritten"));
    }
  };
  var onWorkerMessage = function(msg) {
    const stream = this.stream.deref();
    if (stream === undefined) {
      this.exited = true;
      this.terminate();
      return;
    }
    switch (msg.code) {
      case "READY":
        this.stream = new WeakRef2(stream);
        stream.flush(() => {
          stream[kImpl].ready = true;
          stream.emit("ready");
        });
        break;
      case "ERROR":
        destroy(stream, msg.err);
        break;
      case "EVENT":
        if (Array.isArray(msg.args)) {
          stream.emit(msg.name, ...msg.args);
        } else {
          stream.emit(msg.name, msg.args);
        }
        break;
      case "WARNING":
        process.emitWarning(msg.err);
        break;
      default:
        destroy(stream, new Error("this should not happen: " + msg.code));
    }
  };
  var onWorkerExit = function(code) {
    const stream = this.stream.deref();
    if (stream === undefined) {
      return;
    }
    registry.unregister(stream);
    stream.worker.exited = true;
    stream.worker.off("exit", onWorkerExit);
    destroy(stream, code !== 0 ? new Error("the worker thread exited") : null);
  };
  var error = function(stream, err) {
    setImmediate(() => {
      stream.emit("error", err);
    });
  };
  var destroy = function(stream, err) {
    if (stream[kImpl].destroyed) {
      return;
    }
    stream[kImpl].destroyed = true;
    if (err) {
      stream[kImpl].errored = err;
      error(stream, err);
    }
    if (!stream.worker.exited) {
      stream.worker.terminate().catch(() => {
      }).then(() => {
        stream[kImpl].closed = true;
        stream.emit("close");
      });
    } else {
      setImmediate(() => {
        stream[kImpl].closed = true;
        stream.emit("close");
      });
    }
  };
  var write = function(stream, data, cb) {
    const current = Atomics.load(stream[kImpl].state, WRITE_INDEX);
    const length = Buffer.byteLength(data);
    stream[kImpl].data.write(data, current);
    Atomics.store(stream[kImpl].state, WRITE_INDEX, current + length);
    Atomics.notify(stream[kImpl].state, WRITE_INDEX);
    cb();
    return true;
  };
  var end = function(stream) {
    if (stream[kImpl].ended || !stream[kImpl].ending || stream[kImpl].flushing) {
      return;
    }
    stream[kImpl].ended = true;
    try {
      stream.flushSync();
      let readIndex = Atomics.load(stream[kImpl].state, READ_INDEX);
      Atomics.store(stream[kImpl].state, WRITE_INDEX, -1);
      Atomics.notify(stream[kImpl].state, WRITE_INDEX);
      let spins = 0;
      while (readIndex !== -1) {
        Atomics.wait(stream[kImpl].state, READ_INDEX, readIndex, 1000);
        readIndex = Atomics.load(stream[kImpl].state, READ_INDEX);
        if (readIndex === -2) {
          destroy(stream, new Error("end() failed"));
          return;
        }
        if (++spins === 10) {
          destroy(stream, new Error("end() took too long (10s)"));
          return;
        }
      }
      process.nextTick(() => {
        stream[kImpl].finished = true;
        stream.emit("finish");
      });
    } catch (err) {
      destroy(stream, err);
    }
  };
  var writeSync = function(stream) {
    const cb = () => {
      if (stream[kImpl].ending) {
        end(stream);
      } else if (stream[kImpl].needDrain) {
        process.nextTick(drain, stream);
      }
    };
    stream[kImpl].flushing = false;
    while (stream[kImpl].buf.length !== 0) {
      const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX);
      let leftover = stream[kImpl].data.length - writeIndex;
      if (leftover === 0) {
        flushSync(stream);
        Atomics.store(stream[kImpl].state, READ_INDEX, 0);
        Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);
        continue;
      } else if (leftover < 0) {
        throw new Error("overwritten");
      }
      let toWrite = stream[kImpl].buf.slice(0, leftover);
      let toWriteBytes = Buffer.byteLength(toWrite);
      if (toWriteBytes <= leftover) {
        stream[kImpl].buf = stream[kImpl].buf.slice(leftover);
        write(stream, toWrite, cb);
      } else {
        flushSync(stream);
        Atomics.store(stream[kImpl].state, READ_INDEX, 0);
        Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);
        while (toWriteBytes > stream[kImpl].buf.length) {
          leftover = leftover / 2;
          toWrite = stream[kImpl].buf.slice(0, leftover);
          toWriteBytes = Buffer.byteLength(toWrite);
        }
        stream[kImpl].buf = stream[kImpl].buf.slice(leftover);
        write(stream, toWrite, cb);
      }
    }
  };
  var flushSync = function(stream) {
    if (stream[kImpl].flushing) {
      throw new Error("unable to flush while flushing");
    }
    const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX);
    let spins = 0;
    while (true) {
      const readIndex = Atomics.load(stream[kImpl].state, READ_INDEX);
      if (readIndex === -2) {
        throw Error("_flushSync failed");
      }
      if (readIndex !== writeIndex) {
        Atomics.wait(stream[kImpl].state, READ_INDEX, readIndex, 1000);
      } else {
        break;
      }
      if (++spins === 10) {
        throw new Error("_flushSync took too long (10s)");
      }
    }
  };
  var __dirname = "/app/node_modules/thread-stream";
  var { version } = require_package();
  var { EventEmitter } = __require("events");
  var { Worker } = __require("worker_threads");
  var { join } = __require("path");
  var { pathToFileURL } = __require("url");
  var { wait } = require_wait();
  var {
    WRITE_INDEX,
    READ_INDEX
  } = require_indexes();
  var buffer = __require("buffer");
  var assert = __require("assert");
  var kImpl = Symbol("kImpl");
  var MAX_STRING = buffer.constants.MAX_STRING_LENGTH;

  class FakeWeakRef {
    constructor(value) {
      this._value = value;
    }
    deref() {
      return this._value;
    }
  }

  class FakeFinalizationRegistry {
    register() {
    }
    unregister() {
    }
  }
  var FinalizationRegistry2 = process.env.NODE_V8_COVERAGE ? FakeFinalizationRegistry : global.FinalizationRegistry || FakeFinalizationRegistry;
  var WeakRef2 = process.env.NODE_V8_COVERAGE ? FakeWeakRef : global.WeakRef || FakeWeakRef;
  var registry = new FinalizationRegistry2((worker) => {
    if (worker.exited) {
      return;
    }
    worker.terminate();
  });

  class ThreadStream extends EventEmitter {
    constructor(opts = {}) {
      super();
      if (opts.bufferSize < 4) {
        throw new Error("bufferSize must at least fit a 4-byte utf-8 char");
      }
      this[kImpl] = {};
      this[kImpl].stateBuf = new SharedArrayBuffer(128);
      this[kImpl].state = new Int32Array(this[kImpl].stateBuf);
      this[kImpl].dataBuf = new SharedArrayBuffer(opts.bufferSize || 4 * 1024 * 1024);
      this[kImpl].data = Buffer.from(this[kImpl].dataBuf);
      this[kImpl].sync = opts.sync || false;
      this[kImpl].ending = false;
      this[kImpl].ended = false;
      this[kImpl].needDrain = false;
      this[kImpl].destroyed = false;
      this[kImpl].flushing = false;
      this[kImpl].ready = false;
      this[kImpl].finished = false;
      this[kImpl].errored = null;
      this[kImpl].closed = false;
      this[kImpl].buf = "";
      this.worker = createWorker(this, opts);
    }
    write(data) {
      if (this[kImpl].destroyed) {
        error(this, new Error("the worker has exited"));
        return false;
      }
      if (this[kImpl].ending) {
        error(this, new Error("the worker is ending"));
        return false;
      }
      if (this[kImpl].flushing && this[kImpl].buf.length + data.length >= MAX_STRING) {
        try {
          writeSync(this);
          this[kImpl].flushing = true;
        } catch (err) {
          destroy(this, err);
          return false;
        }
      }
      this[kImpl].buf += data;
      if (this[kImpl].sync) {
        try {
          writeSync(this);
          return true;
        } catch (err) {
          destroy(this, err);
          return false;
        }
      }
      if (!this[kImpl].flushing) {
        this[kImpl].flushing = true;
        setImmediate(nextFlush, this);
      }
      this[kImpl].needDrain = this[kImpl].data.length - this[kImpl].buf.length - Atomics.load(this[kImpl].state, WRITE_INDEX) <= 0;
      return !this[kImpl].needDrain;
    }
    end() {
      if (this[kImpl].destroyed) {
        return;
      }
      this[kImpl].ending = true;
      end(this);
    }
    flush(cb) {
      if (this[kImpl].destroyed) {
        if (typeof cb === "function") {
          process.nextTick(cb, new Error("the worker has exited"));
        }
        return;
      }
      const writeIndex = Atomics.load(this[kImpl].state, WRITE_INDEX);
      wait(this[kImpl].state, READ_INDEX, writeIndex, Infinity, (err, res) => {
        if (err) {
          destroy(this, err);
          process.nextTick(cb, err);
          return;
        }
        if (res === "not-equal") {
          this.flush(cb);
          return;
        }
        process.nextTick(cb);
      });
    }
    flushSync() {
      if (this[kImpl].destroyed) {
        return;
      }
      writeSync(this);
      flushSync(this);
    }
    unref() {
      this.worker.unref();
    }
    ref() {
      this.worker.ref();
    }
    get ready() {
      return this[kImpl].ready;
    }
    get destroyed() {
      return this[kImpl].destroyed;
    }
    get closed() {
      return this[kImpl].closed;
    }
    get writable() {
      return !this[kImpl].destroyed && !this[kImpl].ending;
    }
    get writableEnded() {
      return this[kImpl].ending;
    }
    get writableFinished() {
      return this[kImpl].finished;
    }
    get writableNeedDrain() {
      return this[kImpl].needDrain;
    }
    get writableObjectMode() {
      return false;
    }
    get writableErrored() {
      return this[kImpl].errored;
    }
  }
  module.exports = ThreadStream;
});

// node_modules/@aws-sdk/client-sso/d
var require_transport = __commonJS((exports, module) => {
  var setupOnExit = function(stream) {
    onExit.register(stream, autoEnd);
    onExit.registerBeforeExit(stream, flush);
    stream.on("close", function() {
      onExit.unregister(stream);
    });
  };
  var buildStream = function(filename, workerData, workerOpts) {
    const stream = new ThreadStream({
      filename,
      workerData,
      workerOpts
    });
    stream.on("ready", onReady);
    stream.on("close", function() {
      process.removeListener("exit", onExit2);
    });
    process.on("exit", onExit2);
    function onReady() {
      process.removeListener("exit", onExit2);
      stream.unref();
      if (workerOpts.autoEnd !== false) {
        setupOnExit(stream);
      }
    }
    function onExit2() {
      if (stream.closed) {
        return;
      }
      stream.flushSync();
      sleep(100);
      stream.end();
    }
    return stream;
  };
  var autoEnd = function(stream) {
    stream.ref();
    stream.flushSync();
    stream.end();
    stream.once("close", function() {
      stream.unref();
    });
  };
  var flush = function(stream) {
    stream.flushSync();
  };
  var transport = function(fullOptions) {
    const { pipeline, targets, levels, dedupe, options = {}, worker = {}, caller = getCallers() } = fullOptions;
    const callers = typeof caller === "string" ? [caller] : caller;
    const bundlerOverrides = "__bundlerPathsOverrides" in globalThis ? globalThis.__bundlerPathsOverrides : {};
    let target = fullOptions.target;
    if (target && targets) {
      throw new Error("only one of target or targets can be specified");
    }
    if (targets) {
      target = bundlerOverrides["pino-worker"] || join(__dirname, "worker.js");
      options.targets = targets.map((dest) => {
        return {
          ...dest,
          target: fixTarget(dest.target)
        };
      });
    } else if (pipeline) {
      target = bundlerOverrides["pino-pipeline-worker"] || join(__dirname, "worker-pipeline.js");
      options.targets = pipeline.map((dest) => {
        return {
          ...dest,
          target: fixTarget(dest.target)
        };
      });
    }
    if (levels) {
      options.levels = levels;
    }
    if (dedupe) {
      options.dedupe = dedupe;
    }
    return buildStream(fixTarget(target), options, worker);
    function fixTarget(origin) {
      origin = bundlerOverrides[origin] || origin;
      if (isAbsolute(origin) || origin.indexOf("file://") === 0) {
        return origin;
      }
      if (origin === "pino/file") {
        return join(__dirname, "..", "file.js");
      }
      let fixTarget2;
      for (const filePath of callers) {
        try {
          const context = filePath === "node:repl" ? process.cwd() + sep : filePath;
          fixTarget2 = createRequire2(context).resolve(origin);
          break;
        } catch (err) {
          continue;
        }
      }
      if (!fixTarget2) {
        throw new Error(`unable to determine transport target for "${origin}"`);
      }
      return fixTarget2;
    }
  };
  var __dirname = "/app/node_modules/pino/lib";
  var { createRequire: createRequire2 } = __require("module");
  var getCallers = require_caller();
  var { join, isAbsolute, sep } = __require("path");
  var sleep = require_atomic_sleep();
  var onExit = require_on_exit_leak_free();
  var ThreadStream = require_thread_stream();
  module.exports = transport;
});

// node_modules/@aws-sdk/client-s
var require_tools = __commonJS((exports, module) => {
  var noop = function() {
  };
  var genLog = function(level, hook) {
    if (!hook)
      return LOG;
    return function hookWrappedLog(...args) {
      hook.call(this, args, LOG, level);
    };
    function LOG(o, ...n) {
      if (typeof o === "object") {
        let msg = o;
        if (o !== null) {
          if (o.method && o.headers && o.socket) {
            o = mapHttpRequest(o);
          } else if (typeof o.setHeader === "function") {
            o = mapHttpResponse(o);
          }
        }
        let formatParams;
        if (msg === null && n.length === 0) {
          formatParams = [null];
        } else {
          msg = n.shift();
          formatParams = n;
        }
        if (typeof this[msgPrefixSym] === "string" && msg !== undefined && msg !== null) {
          msg = this[msgPrefixSym] + msg;
        }
        this[writeSym](o, format(msg, formatParams, this[formatOptsSym]), level);
      } else {
        let msg = o === undefined ? n.shift() : o;
        if (typeof this[msgPrefixSym] === "string" && msg !== undefined && msg !== null) {
          msg = this[msgPrefixSym] + msg;
        }
        this[writeSym](null, format(msg, n, this[formatOptsSym]), level);
      }
    }
  };
  var asString = function(str) {
    let result = "";
    let last = 0;
    let found = false;
    let point = 255;
    const l = str.length;
    if (l > 100) {
      return JSON.stringify(str);
    }
    for (var i = 0;i < l && point >= 32; i++) {
      point = str.charCodeAt(i);
      if (point === 34 || point === 92) {
        result += str.slice(last, i) + "\\";
        last = i;
        found = true;
      }
    }
    if (!found) {
      result = str;
    } else {
      result += str.slice(last);
    }
    return point < 32 ? JSON.stringify(str) : '"' + result + '"';
  };
  var asJson = function(obj, msg, num, time) {
    const stringify2 = this[stringifySym];
    const stringifySafe = this[stringifySafeSym];
    const stringifiers = this[stringifiersSym];
    const end = this[endSym];
    const chindings = this[chindingsSym];
    const serializers = this[serializersSym];
    const formatters = this[formattersSym];
    const messageKey = this[messageKeySym];
    const errorKey = this[errorKeySym];
    let data = this[lsCacheSym][num] + time;
    data = data + chindings;
    let value;
    if (formatters.log) {
      obj = formatters.log(obj);
    }
    const wildcardStringifier = stringifiers[wildcardFirstSym];
    let propStr = "";
    for (const key in obj) {
      value = obj[key];
      if (Object.prototype.hasOwnProperty.call(obj, key) && value !== undefined) {
        if (serializers[key]) {
          value = serializers[key](value);
        } else if (key === errorKey && serializers.err) {
          value = serializers.err(value);
        }
        const stringifier = stringifiers[key] || wildcardStringifier;
        switch (typeof value) {
          case "undefined":
          case "function":
            continue;
          case "number":
            if (Number.isFinite(value) === false) {
              value = null;
            }
          case "boolean":
            if (stringifier)
              value = stringifier(value);
            break;
          case "string":
            value = (stringifier || asString)(value);
            break;
          default:
            value = (stringifier || stringify2)(value, stringifySafe);
        }
        if (value === undefined)
          continue;
        const strKey = asString(key);
        propStr += "," + strKey + ":" + value;
      }
    }
    let msgStr = "";
    if (msg !== undefined) {
      value = serializers[messageKey] ? serializers[messageKey](msg) : msg;
      const stringifier = stringifiers[messageKey] || wildcardStringifier;
      switch (typeof value) {
        case "function":
          break;
        case "number":
          if (Number.isFinite(value) === false) {
            value = null;
          }
        case "boolean":
          if (stringifier)
            value = stringifier(value);
          msgStr = ',"' + messageKey + '":' + value;
          break;
        case "string":
          value = (stringifier || asString)(value);
          msgStr = ',"' + messageKey + '":' + value;
          break;
        default:
          value = (stringifier || stringify2)(value, stringifySafe);
          msgStr = ',"' + messageKey + '":' + value;
      }
    }
    if (this[nestedKeySym] && propStr) {
      return data + this[nestedKeyStrSym] + propStr.slice(1) + "}" + msgStr + end;
    } else {
      return data + propStr + msgStr + end;
    }
  };
  var asChindings = function(instance, bindings) {
    let value;
    let data = instance[chindingsSym];
    const stringify2 = instance[stringifySym];
    const stringifySafe = instance[stringifySafeSym];
    const stringifiers = instance[stringifiersSym];
    const wildcardStringifier = stringifiers[wildcardFirstSym];
    const serializers = instance[serializersSym];
    const formatter = instance[formattersSym].bindings;
    bindings = formatter(bindings);
    for (const key in bindings) {
      value = bindings[key];
      const valid = key !== "level" && key !== "serializers" && key !== "formatters" && key !== "customLevels" && bindings.hasOwnProperty(key) && value !== undefined;
      if (valid === true) {
        value = serializers[key] ? serializers[key](value) : value;
        value = (stringifiers[key] || wildcardStringifier || stringify2)(value, stringifySafe);
        if (value === undefined)
          continue;
        data += ',"' + key + '":' + value;
      }
    }
    return data;
  };
  var hasBeenTampered = function(stream) {
    return stream.write !== stream.constructor.prototype.write;
  };
  var buildSafeSonicBoom = function(opts) {
    const stream = new SonicBoom(opts);
    stream.on("error", filterBrokenPipe);
    if (!hasNodeCodeCoverage && !opts.sync && isMainThread) {
      onExit.register(stream, autoEnd);
      stream.on("close", function() {
        onExit.unregister(stream);
      });
    }
    return stream;
    function filterBrokenPipe(err) {
      if (err.code === "EPIPE") {
        stream.write = noop;
        stream.end = noop;
        stream.flushSync = noop;
        stream.destroy = noop;
        return;
      }
      stream.removeListener("error", filterBrokenPipe);
      stream.emit("error", err);
    }
  };
  var autoEnd = function(stream, eventName) {
    if (stream.destroyed) {
      return;
    }
    if (eventName === "beforeExit") {
      stream.flush();
      stream.on("drain", function() {
        stream.end();
      });
    } else {
      stream.flushSync();
    }
  };
  var createArgsNormalizer = function(defaultOptions) {
    return function normalizeArgs(instance, caller, opts = {}, stream) {
      if (typeof opts === "string") {
        stream = buildSafeSonicBoom({ dest: opts });
        opts = {};
      } else if (typeof stream === "string") {
        if (opts && opts.transport) {
          throw Error("only one of option.transport or stream can be specified");
        }
        stream = buildSafeSonicBoom({ dest: stream });
      } else if (opts instanceof SonicBoom || opts.writable || opts._writableState) {
        stream = opts;
        opts = {};
      } else if (opts.transport) {
        if (opts.transport instanceof SonicBoom || opts.transport.writable || opts.transport._writableState) {
          throw Error("option.transport do not allow stream, please pass to option directly. e.g. pino(transport)");
        }
        if (opts.transport.targets && opts.transport.targets.length && opts.formatters && typeof opts.formatters.level === "function") {
          throw Error("option.transport.targets do not allow custom level formatters");
        }
        let customLevels;
        if (opts.customLevels) {
          customLevels = opts.useOnlyCustomLevels ? opts.customLevels : Object.assign({}, opts.levels, opts.customLevels);
        }
        stream = transport({ caller, ...opts.transport, levels: customLevels });
      }
      opts = Object.assign({}, defaultOptions, opts);
      opts.serializers = Object.assign({}, defaultOptions.serializers, opts.serializers);
      opts.formatters = Object.assign({}, defaultOptions.formatters, opts.formatters);
      if (opts.prettyPrint) {
        throw new Error("prettyPrint option is no longer supported, see the pino-pretty package (https://github.com/pinojs/pino-pretty)");
      }
      const { enabled, onChild } = opts;
      if (enabled === false)
        opts.level = "silent";
      if (!onChild)
        opts.onChild = noop;
      if (!stream) {
        if (!hasBeenTampered(process.stdout)) {
          stream = buildSafeSonicBoom({ fd: process.stdout.fd || 1 });
        } else {
          stream = process.stdout;
        }
      }
      return { opts, stream };
    };
  };
  var stringify = function(obj, stringifySafeFn) {
    try {
      return JSON.stringify(obj);
    } catch (_) {
      try {
        const stringify2 = stringifySafeFn || this[stringifySafeSym];
        return stringify2(obj);
      } catch (_2) {
        return '"[unable to serialize, circular reference is too complex to analyze]"';
      }
    }
  };
  var buildFormatters = function(level, bindings, log) {
    return {
      level,
      bindings,
      log
    };
  };
  var normalizeDestFileDescriptor = function(destination) {
    const fd = Number(destination);
    if (typeof destination === "string" && Number.isFinite(fd)) {
      return fd;
    }
    if (destination === undefined) {
      return 1;
    }
    return destination;
  };
  var format = require_quick_format_unescaped();
  var { mapHttpRequest, mapHttpResponse } = require_pino_std_serializers();
  var SonicBoom = require_sonic_boom();
  var onExit = require_on_exit_leak_free();
  var {
    lsCacheSym,
    chindingsSym,
    writeSym,
    serializersSym,
    formatOptsSym,
    endSym,
    stringifiersSym,
    stringifySym,
    stringifySafeSym,
    wildcardFirstSym,
    nestedKeySym,
    formattersSym,
    messageKeySym,
    errorKeySym,
    nestedKeyStrSym,
    msgPrefixSym
  } = require_symbols();
  var { isMainThread } = __require("worker_threads");
  var transport = require_transport();
  var hasNodeCodeCoverage = process.env.NODE_V8_COVERAGE || process.env.V8_COVERAGE;
  module.exports = {
    noop,
    buildSafeSonicBoom,
    asChindings,
    asJson,
    genLog,
    createArgsNormalizer,
    stringify,
    buildFormatters,
    normalizeDestFileDescriptor
  };
});

// node_modules/@aws-sdk/client-ss
var require_levels = __commonJS((exports, module) => {
  var genLsCache = function(instance) {
    const formatter = instance[formattersSym].level;
    const { labels } = instance.levels;
    const cache = {};
    for (const label in labels) {
      const level = formatter(labels[label], Number(label));
      cache[label] = JSON.stringify(level).slice(0, -1);
    }
    instance[lsCacheSym] = cache;
    return instance;
  };
  var isStandardLevel = function(level, useOnlyCustomLevels) {
    if (useOnlyCustomLevels) {
      return false;
    }
    switch (level) {
      case "fatal":
      case "error":
      case "warn":
      case "info":
      case "debug":
      case "trace":
        return true;
      default:
        return false;
    }
  };
  var setLevel = function(level) {
    const { labels, values } = this.levels;
    if (typeof level === "number") {
      if (labels[level] === undefined)
        throw Error("unknown level value" + level);
      level = labels[level];
    }
    if (values[level] === undefined)
      throw Error("unknown level " + level);
    const preLevelVal = this[levelValSym];
    const levelVal = this[levelValSym] = values[level];
    const useOnlyCustomLevelsVal = this[useOnlyCustomLevelsSym];
    const hook = this[hooksSym].logMethod;
    for (const key in values) {
      if (levelVal > values[key]) {
        this[key] = noop;
        continue;
      }
      this[key] = isStandardLevel(key, useOnlyCustomLevelsVal) ? levelMethods[key](hook) : genLog(values[key], hook);
    }
    this.emit("level-change", level, levelVal, labels[preLevelVal], preLevelVal, this);
  };
  var getLevel = function(level) {
    const { levels: levels2, levelVal } = this;
    return levels2 && levels2.labels ? levels2.labels[levelVal] : "";
  };
  var isLevelEnabled = function(logLevel) {
    const { values } = this.levels;
    const logLevelVal = values[logLevel];
    return logLevelVal !== undefined && logLevelVal >= this[levelValSym];
  };
  var mappings = function(customLevels = null, useOnlyCustomLevels = false) {
    const customNums = customLevels ? Object.keys(customLevels).reduce((o, k) => {
      o[customLevels[k]] = k;
      return o;
    }, {}) : null;
    const labels = Object.assign(Object.create(Object.prototype, { Infinity: { value: "silent" } }), useOnlyCustomLevels ? null : nums, customNums);
    const values = Object.assign(Object.create(Object.prototype, { silent: { value: Infinity } }), useOnlyCustomLevels ? null : levels, customLevels);
    return { labels, values };
  };
  var assertDefaultLevelFound = function(defaultLevel, customLevels, useOnlyCustomLevels) {
    if (typeof defaultLevel === "number") {
      const values = [].concat(Object.keys(customLevels || {}).map((key) => customLevels[key]), useOnlyCustomLevels ? [] : Object.keys(nums).map((level) => +level), Infinity);
      if (!values.includes(defaultLevel)) {
        throw Error(`default level:${defaultLevel} must be included in custom levels`);
      }
      return;
    }
    const labels = Object.assign(Object.create(Object.prototype, { silent: { value: Infinity } }), useOnlyCustomLevels ? null : levels, customLevels);
    if (!(defaultLevel in labels)) {
      throw Error(`default level:${defaultLevel} must be included in custom levels`);
    }
  };
  var assertNoLevelCollisions = function(levels2, customLevels) {
    const { labels, values } = levels2;
    for (const k in customLevels) {
      if (k in values) {
        throw Error("levels cannot be overridden");
      }
      if (customLevels[k] in labels) {
        throw Error("pre-existing level values cannot be used for new levels");
      }
    }
  };
  var {
    lsCacheSym,
    levelValSym,
    useOnlyCustomLevelsSym,
    streamSym,
    formattersSym,
    hooksSym
  } = require_symbols();
  var { noop, genLog } = require_tools();
  var levels = {
    trace: 10,
    debug: 20,
    info: 30,
    warn: 40,
    error: 50,
    fatal: 60
  };
  var levelMethods = {
    fatal: (hook) => {
      const logFatal = genLog(levels.fatal, hook);
      return function(...args) {
        const stream = this[streamSym];
        logFatal.call(this, ...args);
        if (typeof stream.flushSync === "function") {
          try {
            stream.flushSync();
          } catch (e) {
          }
        }
      };
    },
    error: (hook) => genLog(levels.error, hook),
    warn: (hook) => genLog(levels.warn, hook),
    info: (hook) => genLog(levels.info, hook),
    debug: (hook) => genLog(levels.debug, hook),
    trace: (hook) => genLog(levels.trace, hook)
  };
  var nums = Object.keys(levels).reduce((o, k) => {
    o[levels[k]] = k;
    return o;
  }, {});
  var initialLsCache = Object.keys(nums).reduce((o, k) => {
    o[k] = '{"level":' + Number(k);
    return o;
  }, {});
  module.exports = {
    initialLsCache,
    genLsCache,
    levelMethods,
    getLevel,
    setLevel,
    isLevelEnabled,
    mappings,
    levels,
    assertNoLevelCollisions,
    assertDefaultLevelFound
  };
});

// node_modules/@aws-sdk/client-
var require_meta = __commonJS((exports, module) => {
  module.exports = { version: "8.17.2" };
});

// node_modules/@aws-sdk/client-s
var require_proto = __commonJS((exports, module) => {
  var child = function(bindings2, options) {
    if (!bindings2) {
      throw Error("missing bindings for child Pino");
    }
    options = options || {};
    const serializers = this[serializersSym];
    const formatters = this[formattersSym];
    const instance = Object.create(this);
    if (options.hasOwnProperty("serializers") === true) {
      instance[serializersSym] = Object.create(null);
      for (const k in serializers) {
        instance[serializersSym][k] = serializers[k];
      }
      const parentSymbols = Object.getOwnPropertySymbols(serializers);
      for (var i = 0;i < parentSymbols.length; i++) {
        const ks = parentSymbols[i];
        instance[serializersSym][ks] = serializers[ks];
      }
      for (const bk in options.serializers) {
        instance[serializersSym][bk] = options.serializers[bk];
      }
      const bindingsSymbols = Object.getOwnPropertySymbols(options.serializers);
      for (var bi = 0;bi < bindingsSymbols.length; bi++) {
        const bks = bindingsSymbols[bi];
        instance[serializersSym][bks] = options.serializers[bks];
      }
    } else
      instance[serializersSym] = serializers;
    if (options.hasOwnProperty("formatters")) {
      const { level, bindings: chindings, log } = options.formatters;
      instance[formattersSym] = buildFormatters(level || formatters.level, chindings || resetChildingsFormatter, log || formatters.log);
    } else {
      instance[formattersSym] = buildFormatters(formatters.level, resetChildingsFormatter, formatters.log);
    }
    if (options.hasOwnProperty("customLevels") === true) {
      assertNoLevelCollisions(this.levels, options.customLevels);
      instance.levels = mappings(options.customLevels, instance[useOnlyCustomLevelsSym]);
      genLsCache(instance);
    }
    if (typeof options.redact === "object" && options.redact !== null || Array.isArray(options.redact)) {
      instance.redact = options.redact;
      const stringifiers = redaction(instance.redact, stringify);
      const formatOpts = { stringify: stringifiers[redactFmtSym] };
      instance[stringifySym] = stringify;
      instance[stringifiersSym] = stringifiers;
      instance[formatOptsSym] = formatOpts;
    }
    if (typeof options.msgPrefix === "string") {
      instance[msgPrefixSym] = (this[msgPrefixSym] || "") + options.msgPrefix;
    }
    instance[chindingsSym] = asChindings(instance, bindings2);
    const childLevel = options.level || this.level;
    instance[setLevelSym](childLevel);
    this.onChild(instance);
    return instance;
  };
  var bindings = function() {
    const chindings = this[chindingsSym];
    const chindingsJson = `{${chindings.substr(1)}}`;
    const bindingsFromJson = JSON.parse(chindingsJson);
    delete bindingsFromJson.pid;
    delete bindingsFromJson.hostname;
    return bindingsFromJson;
  };
  var setBindings = function(newBindings) {
    const chindings = asChindings(this, newBindings);
    this[chindingsSym] = chindings;
    delete this[parsedChindingsSym];
  };
  var defaultMixinMergeStrategy = function(mergeObject, mixinObject) {
    return Object.assign(mixinObject, mergeObject);
  };
  var write = function(_obj, msg, num) {
    const t = this[timeSym]();
    const mixin = this[mixinSym];
    const errorKey = this[errorKeySym];
    const messageKey = this[messageKeySym];
    const mixinMergeStrategy = this[mixinMergeStrategySym] || defaultMixinMergeStrategy;
    let obj;
    if (_obj === undefined || _obj === null) {
      obj = {};
    } else if (_obj instanceof Error) {
      obj = { [errorKey]: _obj };
      if (msg === undefined) {
        msg = _obj.message;
      }
    } else {
      obj = _obj;
      if (msg === undefined && _obj[messageKey] === undefined && _obj[errorKey]) {
        msg = _obj[errorKey].message;
      }
    }
    if (mixin) {
      obj = mixinMergeStrategy(obj, mixin(obj, num, this));
    }
    const s = this[asJsonSym](obj, msg, num, t);
    const stream = this[streamSym];
    if (stream[needsMetadataGsym] === true) {
      stream.lastLevel = num;
      stream.lastObj = obj;
      stream.lastMsg = msg;
      stream.lastTime = t.slice(this[timeSliceIndexSym]);
      stream.lastLogger = this;
    }
    stream.write(s);
  };
  var noop = function() {
  };
  var flush = function(cb) {
    if (cb != null && typeof cb !== "function") {
      throw Error("callback must be a function");
    }
    const stream = this[streamSym];
    if (typeof stream.flush === "function") {
      stream.flush(cb || noop);
    } else if (cb)
      cb();
  };
  var { EventEmitter } = __require("events");
  var {
    lsCacheSym,
    levelValSym,
    setLevelSym,
    getLevelSym,
    chindingsSym,
    parsedChindingsSym,
    mixinSym,
    asJsonSym,
    writeSym,
    mixinMergeStrategySym,
    timeSym,
    timeSliceIndexSym,
    streamSym,
    serializersSym,
    formattersSym,
    errorKeySym,
    messageKeySym,
    useOnlyCustomLevelsSym,
    needsMetadataGsym,
    redactFmtSym,
    stringifySym,
    formatOptsSym,
    stringifiersSym,
    msgPrefixSym
  } = require_symbols();
  var {
    getLevel,
    setLevel,
    isLevelEnabled,
    mappings,
    initialLsCache,
    genLsCache,
    assertNoLevelCollisions
  } = require_levels();
  var {
    asChindings,
    asJson,
    buildFormatters,
    stringify
  } = require_tools();
  var {
    version
  } = require_meta();
  var redaction = require_redaction();
  var constructor = class Pino {
  };
  var prototype = {
    constructor,
    child,
    bindings,
    setBindings,
    flush,
    isLevelEnabled,
    version,
    get level() {
      return this[getLevelSym]();
    },
    set level(lvl) {
      this[setLevelSym](lvl);
    },
    get levelVal() {
      return this[levelValSym];
    },
    set levelVal(n) {
      throw Error("levelVal is read-only");
    },
    [lsCacheSym]: initialLsCache,
    [writeSym]: write,
    [asJsonSym]: asJson,
    [getLevelSym]: getLevel,
    [setLevelSym]: setLevel
  };
  Object.setPrototypeOf(prototype, EventEmitter.prototype);
  module.exports = function() {
    return Object.create(prototype);
  };
  var resetChildingsFormatter = (bindings2) => bindings2;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/e
var require_safe_stable_stringify = __commonJS((exports, module) => {
  var strEscape = function(str) {
    if (str.length < 5000 && !strEscapeSequencesRegExp.test(str)) {
      return `"${str}"`;
    }
    return JSON.stringify(str);
  };
  var insertSort = function(array) {
    if (array.length > 200) {
      return array.sort();
    }
    for (let i = 1;i < array.length; i++) {
      const currentValue = array[i];
      let position = i;
      while (position !== 0 && array[position - 1] > currentValue) {
        array[position] = array[position - 1];
        position--;
      }
      array[position] = currentValue;
    }
    return array;
  };
  var isTypedArrayWithEntries = function(value) {
    return typedArrayPrototypeGetSymbolToStringTag.call(value) !== undefined && value.length !== 0;
  };
  var stringifyTypedArray = function(array, separator, maximumBreadth) {
    if (array.length < maximumBreadth) {
      maximumBreadth = array.length;
    }
    const whitespace = separator === "," ? "" : " ";
    let res = `"0":${whitespace}${array[0]}`;
    for (let i = 1;i < maximumBreadth; i++) {
      res += `${separator}"${i}":${whitespace}${array[i]}`;
    }
    return res;
  };
  var getCircularValueOption = function(options) {
    if (hasOwnProperty.call(options, "circularValue")) {
      const circularValue = options.circularValue;
      if (typeof circularValue === "string") {
        return `"${circularValue}"`;
      }
      if (circularValue == null) {
        return circularValue;
      }
      if (circularValue === Error || circularValue === TypeError) {
        return {
          toString() {
            throw new TypeError("Converting circular structure to JSON");
          }
        };
      }
      throw new TypeError('The "circularValue" argument must be of type string or the value null or undefined');
    }
    return '"[Circular]"';
  };
  var getBooleanOption = function(options, key) {
    let value;
    if (hasOwnProperty.call(options, key)) {
      value = options[key];
      if (typeof value !== "boolean") {
        throw new TypeError(`The "${key}" argument must be of type boolean`);
      }
    }
    return value === undefined ? true : value;
  };
  var getPositiveIntegerOption = function(options, key) {
    let value;
    if (hasOwnProperty.call(options, key)) {
      value = options[key];
      if (typeof value !== "number") {
        throw new TypeError(`The "${key}" argument must be of type number`);
      }
      if (!Number.isInteger(value)) {
        throw new TypeError(`The "${key}" argument must be an integer`);
      }
      if (value < 1) {
        throw new RangeError(`The "${key}" argument must be >= 1`);
      }
    }
    return value === undefined ? Infinity : value;
  };
  var getItemCount = function(number) {
    if (number === 1) {
      return "1 item";
    }
    return `${number} items`;
  };
  var getUniqueReplacerSet = function(replacerArray) {
    const replacerSet = new Set;
    for (const value of replacerArray) {
      if (typeof value === "string" || typeof value === "number") {
        replacerSet.add(String(value));
      }
    }
    return replacerSet;
  };
  var getStrictOption = function(options) {
    if (hasOwnProperty.call(options, "strict")) {
      const value = options.strict;
      if (typeof value !== "boolean") {
        throw new TypeError('The "strict" argument must be of type boolean');
      }
      if (value) {
        return (value2) => {
          let message = `Object can not safely be stringified. Received type ${typeof value2}`;
          if (typeof value2 !== "function")
            message += ` (${value2.toString()})`;
          throw new Error(message);
        };
      }
    }
  };
  var configure = function(options) {
    options = { ...options };
    const fail = getStrictOption(options);
    if (fail) {
      if (options.bigint === undefined) {
        options.bigint = false;
      }
      if (!("circularValue" in options)) {
        options.circularValue = Error;
      }
    }
    const circularValue = getCircularValueOption(options);
    const bigint = getBooleanOption(options, "bigint");
    const deterministic = getBooleanOption(options, "deterministic");
    const maximumDepth = getPositiveIntegerOption(options, "maximumDepth");
    const maximumBreadth = getPositiveIntegerOption(options, "maximumBreadth");
    function stringifyFnReplacer(key, parent, stack, replacer, spacer, indentation) {
      let value = parent[key];
      if (typeof value === "object" && value !== null && typeof value.toJSON === "function") {
        value = value.toJSON(key);
      }
      value = replacer.call(parent, key, value);
      switch (typeof value) {
        case "string":
          return strEscape(value);
        case "object": {
          if (value === null) {
            return "null";
          }
          if (stack.indexOf(value) !== -1) {
            return circularValue;
          }
          let res = "";
          let join = ",";
          const originalIndentation = indentation;
          if (Array.isArray(value)) {
            if (value.length === 0) {
              return "[]";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Array]"';
            }
            stack.push(value);
            if (spacer !== "") {
              indentation += spacer;
              res += `\n${indentation}`;
              join = `,\n${indentation}`;
            }
            const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
            let i = 0;
            for (;i < maximumValuesToStringify - 1; i++) {
              const tmp2 = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation);
              res += tmp2 !== undefined ? tmp2 : "null";
              res += join;
            }
            const tmp = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation);
            res += tmp !== undefined ? tmp : "null";
            if (value.length - 1 > maximumBreadth) {
              const removedKeys = value.length - maximumBreadth - 1;
              res += `${join}"... ${getItemCount(removedKeys)} not stringified"`;
            }
            if (spacer !== "") {
              res += `\n${originalIndentation}`;
            }
            stack.pop();
            return `[${res}]`;
          }
          let keys = Object.keys(value);
          const keyLength = keys.length;
          if (keyLength === 0) {
            return "{}";
          }
          if (maximumDepth < stack.length + 1) {
            return '"[Object]"';
          }
          let whitespace = "";
          let separator = "";
          if (spacer !== "") {
            indentation += spacer;
            join = `,\n${indentation}`;
            whitespace = " ";
          }
          const maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
          if (deterministic && !isTypedArrayWithEntries(value)) {
            keys = insertSort(keys);
          }
          stack.push(value);
          for (let i = 0;i < maximumPropertiesToStringify; i++) {
            const key2 = keys[i];
            const tmp = stringifyFnReplacer(key2, value, stack, replacer, spacer, indentation);
            if (tmp !== undefined) {
              res += `${separator}${strEscape(key2)}:${whitespace}${tmp}`;
              separator = join;
            }
          }
          if (keyLength > maximumBreadth) {
            const removedKeys = keyLength - maximumBreadth;
            res += `${separator}"...":${whitespace}"${getItemCount(removedKeys)} not stringified"`;
            separator = join;
          }
          if (spacer !== "" && separator.length > 1) {
            res = `\n${indentation}${res}\n${originalIndentation}`;
          }
          stack.pop();
          return `{${res}}`;
        }
        case "number":
          return isFinite(value) ? String(value) : fail ? fail(value) : "null";
        case "boolean":
          return value === true ? "true" : "false";
        case "undefined":
          return;
        case "bigint":
          if (bigint) {
            return String(value);
          }
        default:
          return fail ? fail(value) : undefined;
      }
    }
    function stringifyArrayReplacer(key, value, stack, replacer, spacer, indentation) {
      if (typeof value === "object" && value !== null && typeof value.toJSON === "function") {
        value = value.toJSON(key);
      }
      switch (typeof value) {
        case "string":
          return strEscape(value);
        case "object": {
          if (value === null) {
            return "null";
          }
          if (stack.indexOf(value) !== -1) {
            return circularValue;
          }
          const originalIndentation = indentation;
          let res = "";
          let join = ",";
          if (Array.isArray(value)) {
            if (value.length === 0) {
              return "[]";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Array]"';
            }
            stack.push(value);
            if (spacer !== "") {
              indentation += spacer;
              res += `\n${indentation}`;
              join = `,\n${indentation}`;
            }
            const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
            let i = 0;
            for (;i < maximumValuesToStringify - 1; i++) {
              const tmp2 = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation);
              res += tmp2 !== undefined ? tmp2 : "null";
              res += join;
            }
            const tmp = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation);
            res += tmp !== undefined ? tmp : "null";
            if (value.length - 1 > maximumBreadth) {
              const removedKeys = value.length - maximumBreadth - 1;
              res += `${join}"... ${getItemCount(removedKeys)} not stringified"`;
            }
            if (spacer !== "") {
              res += `\n${originalIndentation}`;
            }
            stack.pop();
            return `[${res}]`;
          }
          stack.push(value);
          let whitespace = "";
          if (spacer !== "") {
            indentation += spacer;
            join = `,\n${indentation}`;
            whitespace = " ";
          }
          let separator = "";
          for (const key2 of replacer) {
            const tmp = stringifyArrayReplacer(key2, value[key2], stack, replacer, spacer, indentation);
            if (tmp !== undefined) {
              res += `${separator}${strEscape(key2)}:${whitespace}${tmp}`;
              separator = join;
            }
          }
          if (spacer !== "" && separator.length > 1) {
            res = `\n${indentation}${res}\n${originalIndentation}`;
          }
          stack.pop();
          return `{${res}}`;
        }
        case "number":
          return isFinite(value) ? String(value) : fail ? fail(value) : "null";
        case "boolean":
          return value === true ? "true" : "false";
        case "undefined":
          return;
        case "bigint":
          if (bigint) {
            return String(value);
          }
        default:
          return fail ? fail(value) : undefined;
      }
    }
    function stringifyIndent(key, value, stack, spacer, indentation) {
      switch (typeof value) {
        case "string":
          return strEscape(value);
        case "object": {
          if (value === null) {
            return "null";
          }
          if (typeof value.toJSON === "function") {
            value = value.toJSON(key);
            if (typeof value !== "object") {
              return stringifyIndent(key, value, stack, spacer, indentation);
            }
            if (value === null) {
              return "null";
            }
          }
          if (stack.indexOf(value) !== -1) {
            return circularValue;
          }
          const originalIndentation = indentation;
          if (Array.isArray(value)) {
            if (value.length === 0) {
              return "[]";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Array]"';
            }
            stack.push(value);
            indentation += spacer;
            let res2 = `\n${indentation}`;
            const join2 = `,\n${indentation}`;
            const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
            let i = 0;
            for (;i < maximumValuesToStringify - 1; i++) {
              const tmp2 = stringifyIndent(String(i), value[i], stack, spacer, indentation);
              res2 += tmp2 !== undefined ? tmp2 : "null";
              res2 += join2;
            }
            const tmp = stringifyIndent(String(i), value[i], stack, spacer, indentation);
            res2 += tmp !== undefined ? tmp : "null";
            if (value.length - 1 > maximumBreadth) {
              const removedKeys = value.length - maximumBreadth - 1;
              res2 += `${join2}"... ${getItemCount(removedKeys)} not stringified"`;
            }
            res2 += `\n${originalIndentation}`;
            stack.pop();
            return `[${res2}]`;
          }
          let keys = Object.keys(value);
          const keyLength = keys.length;
          if (keyLength === 0) {
            return "{}";
          }
          if (maximumDepth < stack.length + 1) {
            return '"[Object]"';
          }
          indentation += spacer;
          const join = `,\n${indentation}`;
          let res = "";
          let separator = "";
          let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
          if (isTypedArrayWithEntries(value)) {
            res += stringifyTypedArray(value, join, maximumBreadth);
            keys = keys.slice(value.length);
            maximumPropertiesToStringify -= value.length;
            separator = join;
          }
          if (deterministic) {
            keys = insertSort(keys);
          }
          stack.push(value);
          for (let i = 0;i < maximumPropertiesToStringify; i++) {
            const key2 = keys[i];
            const tmp = stringifyIndent(key2, value[key2], stack, spacer, indentation);
            if (tmp !== undefined) {
              res += `${separator}${strEscape(key2)}: ${tmp}`;
              separator = join;
            }
          }
          if (keyLength > maximumBreadth) {
            const removedKeys = keyLength - maximumBreadth;
            res += `${separator}"...": "${getItemCount(removedKeys)} not stringified"`;
            separator = join;
          }
          if (separator !== "") {
            res = `\n${indentation}${res}\n${originalIndentation}`;
          }
          stack.pop();
          return `{${res}}`;
        }
        case "number":
          return isFinite(value) ? String(value) : fail ? fail(value) : "null";
        case "boolean":
          return value === true ? "true" : "false";
        case "undefined":
          return;
        case "bigint":
          if (bigint) {
            return String(value);
          }
        default:
          return fail ? fail(value) : undefined;
      }
    }
    function stringifySimple(key, value, stack) {
      switch (typeof value) {
        case "string":
          return strEscape(value);
        case "object": {
          if (value === null) {
            return "null";
          }
          if (typeof value.toJSON === "function") {
            value = value.toJSON(key);
            if (typeof value !== "object") {
              return stringifySimple(key, value, stack);
            }
            if (value === null) {
              return "null";
            }
          }
          if (stack.indexOf(value) !== -1) {
            return circularValue;
          }
          let res = "";
          if (Array.isArray(value)) {
            if (value.length === 0) {
              return "[]";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Array]"';
            }
            stack.push(value);
            const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
            let i = 0;
            for (;i < maximumValuesToStringify - 1; i++) {
              const tmp2 = stringifySimple(String(i), value[i], stack);
              res += tmp2 !== undefined ? tmp2 : "null";
              res += ",";
            }
            const tmp = stringifySimple(String(i), value[i], stack);
            res += tmp !== undefined ? tmp : "null";
            if (value.length - 1 > maximumBreadth) {
              const removedKeys = value.length - maximumBreadth - 1;
              res += `,"... ${getItemCount(removedKeys)} not stringified"`;
            }
            stack.pop();
            return `[${res}]`;
          }
          let keys = Object.keys(value);
          const keyLength = keys.length;
          if (keyLength === 0) {
            return "{}";
          }
          if (maximumDepth < stack.length + 1) {
            return '"[Object]"';
          }
          let separator = "";
          let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
          if (isTypedArrayWithEntries(value)) {
            res += stringifyTypedArray(value, ",", maximumBreadth);
            keys = keys.slice(value.length);
            maximumPropertiesToStringify -= value.length;
            separator = ",";
          }
          if (deterministic) {
            keys = insertSort(keys);
          }
          stack.push(value);
          for (let i = 0;i < maximumPropertiesToStringify; i++) {
            const key2 = keys[i];
            const tmp = stringifySimple(key2, value[key2], stack);
            if (tmp !== undefined) {
              res += `${separator}${strEscape(key2)}:${tmp}`;
              separator = ",";
            }
          }
          if (keyLength > maximumBreadth) {
            const removedKeys = keyLength - maximumBreadth;
            res += `${separator}"...":"${getItemCount(removedKeys)} not stringified"`;
          }
          stack.pop();
          return `{${res}}`;
        }
        case "number":
          return isFinite(value) ? String(value) : fail ? fail(value) : "null";
        case "boolean":
          return value === true ? "true" : "false";
        case "undefined":
          return;
        case "bigint":
          if (bigint) {
            return String(value);
          }
        default:
          return fail ? fail(value) : undefined;
      }
    }
    function stringify2(value, replacer, space) {
      if (arguments.length > 1) {
        let spacer = "";
        if (typeof space === "number") {
          spacer = " ".repeat(Math.min(space, 10));
        } else if (typeof space === "string") {
          spacer = space.slice(0, 10);
        }
        if (replacer != null) {
          if (typeof replacer === "function") {
            return stringifyFnReplacer("", { "": value }, [], replacer, spacer, "");
          }
          if (Array.isArray(replacer)) {
            return stringifyArrayReplacer("", value, [], getUniqueReplacerSet(replacer), spacer, "");
          }
        }
        if (spacer.length !== 0) {
          return stringifyIndent("", value, [], spacer, "");
        }
      }
      return stringifySimple("", value, []);
    }
    return stringify2;
  };
  var { hasOwnProperty } = Object.prototype;
  var stringify = configure();
  stringify.configure = configure;
  stringify.stringify = stringify;
  stringify.default = stringify;
  exports.stringify = stringify;
  exports.configure = configure;
  module.exports = stringify;
  var strEscapeSequencesRegExp = /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
  var typedArrayPrototypeGetSymbolToStringTag = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(Object.getPrototypeOf(new Int8Array)), Symbol.toStringTag).get;
});

// node_modules/@aws-sdk/client-sso/dis
var require_multistream = __commonJS((exports, module) => {
  var multistream = function(streamsArray, opts) {
    let counter = 0;
    streamsArray = streamsArray || [];
    opts = opts || { dedupe: false };
    const streamLevels = Object.create(levels);
    streamLevels.silent = Infinity;
    if (opts.levels && typeof opts.levels === "object") {
      Object.keys(opts.levels).forEach((i) => {
        streamLevels[i] = opts.levels[i];
      });
    }
    const res = {
      write,
      add,
      flushSync,
      end,
      minLevel: 0,
      streams: [],
      clone,
      [metadata]: true,
      streamLevels
    };
    if (Array.isArray(streamsArray)) {
      streamsArray.forEach(add, res);
    } else {
      add.call(res, streamsArray);
    }
    streamsArray = null;
    return res;
    function write(data) {
      let dest;
      const level = this.lastLevel;
      const { streams } = this;
      let recordedLevel = 0;
      let stream;
      for (let i = initLoopVar(streams.length, opts.dedupe);checkLoopVar(i, streams.length, opts.dedupe); i = adjustLoopVar(i, opts.dedupe)) {
        dest = streams[i];
        if (dest.level <= level) {
          if (recordedLevel !== 0 && recordedLevel !== dest.level) {
            break;
          }
          stream = dest.stream;
          if (stream[metadata]) {
            const { lastTime, lastMsg, lastObj, lastLogger } = this;
            stream.lastLevel = level;
            stream.lastTime = lastTime;
            stream.lastMsg = lastMsg;
            stream.lastObj = lastObj;
            stream.lastLogger = lastLogger;
          }
          stream.write(data);
          if (opts.dedupe) {
            recordedLevel = dest.level;
          }
        } else if (!opts.dedupe) {
          break;
        }
      }
    }
    function flushSync() {
      for (const { stream } of this.streams) {
        if (typeof stream.flushSync === "function") {
          stream.flushSync();
        }
      }
    }
    function add(dest) {
      if (!dest) {
        return res;
      }
      const isStream = typeof dest.write === "function" || dest.stream;
      const stream_ = dest.write ? dest : dest.stream;
      if (!isStream) {
        throw Error("stream object needs to implement either StreamEntry or DestinationStream interface");
      }
      const { streams, streamLevels: streamLevels2 } = this;
      let level;
      if (typeof dest.levelVal === "number") {
        level = dest.levelVal;
      } else if (typeof dest.level === "string") {
        level = streamLevels2[dest.level];
      } else if (typeof dest.level === "number") {
        level = dest.level;
      } else {
        level = DEFAULT_INFO_LEVEL;
      }
      const dest_ = {
        stream: stream_,
        level,
        levelVal: undefined,
        id: counter++
      };
      streams.unshift(dest_);
      streams.sort(compareByLevel);
      this.minLevel = streams[0].level;
      return res;
    }
    function end() {
      for (const { stream } of this.streams) {
        if (typeof stream.flushSync === "function") {
          stream.flushSync();
        }
        stream.end();
      }
    }
    function clone(level) {
      const streams = new Array(this.streams.length);
      for (let i = 0;i < streams.length; i++) {
        streams[i] = {
          level,
          stream: this.streams[i].stream
        };
      }
      return {
        write,
        add,
        minLevel: level,
        streams,
        clone,
        flushSync,
        [metadata]: true
      };
    }
  };
  var compareByLevel = function(a, b) {
    return a.level - b.level;
  };
  var initLoopVar = function(length, dedupe) {
    return dedupe ? length - 1 : 0;
  };
  var adjustLoopVar = function(i, dedupe) {
    return dedupe ? i - 1 : i + 1;
  };
  var checkLoopVar = function(i, length, dedupe) {
    return dedupe ? i >= 0 : i < length;
  };
  var metadata = Symbol.for("pino.metadata");
  var { levels } = require_levels();
  var DEFAULT_INFO_LEVEL = levels.info;
  module.exports = multistream;
});

// node_modules/@aws-sdk/cli
var require_pino = __commonJS((exports, module) => {
  var pino = function(...args) {
    const instance = {};
    const { opts, stream } = normalize(instance, caller(), ...args);
    const {
      redact,
      crlf,
      serializers: serializers2,
      timestamp,
      messageKey,
      errorKey,
      nestedKey,
      base,
      name,
      level,
      customLevels,
      mixin,
      mixinMergeStrategy,
      useOnlyCustomLevels,
      formatters,
      hooks,
      depthLimit,
      edgeLimit,
      onChild,
      msgPrefix
    } = opts;
    const stringifySafe = configure({
      maximumDepth: depthLimit,
      maximumBreadth: edgeLimit
    });
    const allFormatters = buildFormatters(formatters.level, formatters.bindings, formatters.log);
    const stringifyFn = stringify.bind({
      [stringifySafeSym]: stringifySafe
    });
    const stringifiers = redact ? redaction(redact, stringifyFn) : {};
    const formatOpts = redact ? { stringify: stringifiers[redactFmtSym] } : { stringify: stringifyFn };
    const end = "}" + (crlf ? "\r\n" : "\n");
    const coreChindings = asChindings.bind(null, {
      [chindingsSym]: "",
      [serializersSym]: serializers2,
      [stringifiersSym]: stringifiers,
      [stringifySym]: stringify,
      [stringifySafeSym]: stringifySafe,
      [formattersSym]: allFormatters
    });
    let chindings = "";
    if (base !== null) {
      if (name === undefined) {
        chindings = coreChindings(base);
      } else {
        chindings = coreChindings(Object.assign({}, base, { name }));
      }
    }
    const time2 = timestamp instanceof Function ? timestamp : timestamp ? epochTime : nullTime;
    const timeSliceIndex = time2().indexOf(":") + 1;
    if (useOnlyCustomLevels && !customLevels)
      throw Error("customLevels is required if useOnlyCustomLevels is set true");
    if (mixin && typeof mixin !== "function")
      throw Error(`Unknown mixin type "${typeof mixin}" - expected "function"`);
    if (msgPrefix && typeof msgPrefix !== "string")
      throw Error(`Unknown msgPrefix type "${typeof msgPrefix}" - expected "string"`);
    assertDefaultLevelFound(level, customLevels, useOnlyCustomLevels);
    const levels2 = mappings(customLevels, useOnlyCustomLevels);
    Object.assign(instance, {
      levels: levels2,
      [useOnlyCustomLevelsSym]: useOnlyCustomLevels,
      [streamSym]: stream,
      [timeSym]: time2,
      [timeSliceIndexSym]: timeSliceIndex,
      [stringifySym]: stringify,
      [stringifySafeSym]: stringifySafe,
      [stringifiersSym]: stringifiers,
      [endSym]: end,
      [formatOptsSym]: formatOpts,
      [messageKeySym]: messageKey,
      [errorKeySym]: errorKey,
      [nestedKeySym]: nestedKey,
      [nestedKeyStrSym]: nestedKey ? `,${JSON.stringify(nestedKey)}:{` : "",
      [serializersSym]: serializers2,
      [mixinSym]: mixin,
      [mixinMergeStrategySym]: mixinMergeStrategy,
      [chindingsSym]: chindings,
      [formattersSym]: allFormatters,
      [hooksSym]: hooks,
      silent: noop,
      onChild,
      [msgPrefixSym]: msgPrefix
    });
    Object.setPrototypeOf(instance, proto());
    genLsCache(instance);
    instance[setLevelSym](level);
    return instance;
  };
  var os = __require("os");
  var stdSerializers = require_pino_std_serializers();
  var caller = require_caller();
  var redaction = require_redaction();
  var time = require_time();
  var proto = require_proto();
  var symbols = require_symbols();
  var { configure } = require_safe_stable_stringify();
  var { assertDefaultLevelFound, mappings, genLsCache, levels } = require_levels();
  var {
    createArgsNormalizer,
    asChindings,
    buildSafeSonicBoom,
    buildFormatters,
    stringify,
    normalizeDestFileDescriptor,
    noop
  } = require_tools();
  var { version } = require_meta();
  var {
    chindingsSym,
    redactFmtSym,
    serializersSym,
    timeSym,
    timeSliceIndexSym,
    streamSym,
    stringifySym,
    stringifySafeSym,
    stringifiersSym,
    setLevelSym,
    endSym,
    formatOptsSym,
    messageKeySym,
    errorKeySym,
    nestedKeySym,
    mixinSym,
    useOnlyCustomLevelsSym,
    formattersSym,
    hooksSym,
    nestedKeyStrSym,
    mixinMergeStrategySym,
    msgPrefixSym
  } = symbols;
  var { epochTime, nullTime } = time;
  var { pid } = process;
  var hostname = os.hostname();
  var defaultErrorSerializer = stdSerializers.err;
  var defaultOptions = {
    level: "info",
    levels,
    messageKey: "msg",
    errorKey: "err",
    nestedKey: null,
    enabled: true,
    base: { pid, hostname },
    serializers: Object.assign(Object.create(null), {
      err: defaultErrorSerializer
    }),
    formatters: Object.assign(Object.create(null), {
      bindings(bindings) {
        return bindings;
      },
      level(label, number) {
        return { level: number };
      }
    }),
    hooks: {
      logMethod: undefined
    },
    timestamp: epochTime,
    name: undefined,
    redact: null,
    customLevels: null,
    useOnlyCustomLevels: false,
    depthLimit: 5,
    edgeLimit: 100
  };
  var normalize = createArgsNormalizer(defaultOptions);
  var serializers = Object.assign(Object.create(null), stdSerializers);
  module.exports = pino;
  module.exports.destination = (dest = process.stdout.fd) => {
    if (typeof dest === "object") {
      dest.dest = normalizeDestFileDescriptor(dest.dest || process.stdout.fd);
      return buildSafeSonicBoom(dest);
    } else {
      return buildSafeSonicBoom({ dest: normalizeDestFileDescriptor(dest), minLength: 0 });
    }
  };
  module.exports.transport = require_transport();
  module.exports.multistream = require_multistream();
  module.exports.levels = mappings();
  module.exports.stdSerializers = serializers;
  module.exports.stdTimeFunctions = Object.assign({}, time);
  module.exports.symbols = symbols;
  module.exports.version = version;
  module.exports.default = pino;
  module.exports.pino = pino;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/en
var require_dist_cjs = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    AlgorithmId: () => AlgorithmId,
    EndpointURLScheme: () => EndpointURLScheme,
    FieldPosition: () => FieldPosition,
    HttpApiKeyAuthLocation: () => HttpApiKeyAuthLocation,
    HttpAuthLocation: () => HttpAuthLocation,
    IniSectionType: () => IniSectionType,
    RequestHandlerProtocol: () => RequestHandlerProtocol,
    SMITHY_CONTEXT_KEY: () => SMITHY_CONTEXT_KEY,
    getDefaultClientConfiguration: () => getDefaultClientConfiguration,
    resolveDefaultRuntimeConfig: () => resolveDefaultRuntimeConfig
  });
  module.exports = __toCommonJS(src_exports);
  var HttpAuthLocation = ((HttpAuthLocation2) => {
    HttpAuthLocation2["HEADER"] = "header";
    HttpAuthLocation2["QUERY"] = "query";
    return HttpAuthLocation2;
  })(HttpAuthLocation || {});
  var HttpApiKeyAuthLocation = ((HttpApiKeyAuthLocation2) => {
    HttpApiKeyAuthLocation2["HEADER"] = "header";
    HttpApiKeyAuthLocation2["QUERY"] = "query";
    return HttpApiKeyAuthLocation2;
  })(HttpApiKeyAuthLocation || {});
  var EndpointURLScheme = ((EndpointURLScheme2) => {
    EndpointURLScheme2["HTTP"] = "http";
    EndpointURLScheme2["HTTPS"] = "https";
    return EndpointURLScheme2;
  })(EndpointURLScheme || {});
  var AlgorithmId = ((AlgorithmId2) => {
    AlgorithmId2["MD5"] = "md5";
    AlgorithmId2["CRC32"] = "crc32";
    AlgorithmId2["CRC32C"] = "crc32c";
    AlgorithmId2["SHA1"] = "sha1";
    AlgorithmId2["SHA256"] = "sha256";
    return AlgorithmId2;
  })(AlgorithmId || {});
  var getChecksumConfiguration = __name((runtimeConfig) => {
    const checksumAlgorithms = [];
    if (runtimeConfig.sha256 !== undefined) {
      checksumAlgorithms.push({
        algorithmId: () => "sha256",
        checksumConstructor: () => runtimeConfig.sha256
      });
    }
    if (runtimeConfig.md5 != null) {
      checksumAlgorithms.push({
        algorithmId: () => "md5",
        checksumConstructor: () => runtimeConfig.md5
      });
    }
    return {
      _checksumAlgorithms: checksumAlgorithms,
      addChecksumAlgorithm(algo) {
        this._checksumAlgorithms.push(algo);
      },
      checksumAlgorithms() {
        return this._checksumAlgorithms;
      }
    };
  }, "getChecksumConfiguration");
  var resolveChecksumRuntimeConfig = __name((clientConfig) => {
    const runtimeConfig = {};
    clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
      runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
    });
    return runtimeConfig;
  }, "resolveChecksumRuntimeConfig");
  var getDefaultClientConfiguration = __name((runtimeConfig) => {
    return {
      ...getChecksumConfiguration(runtimeConfig)
    };
  }, "getDefaultClientConfiguration");
  var resolveDefaultRuntimeConfig = __name((config) => {
    return {
      ...resolveChecksumRuntimeConfig(config)
    };
  }, "resolveDefaultRuntimeConfig");
  var FieldPosition = ((FieldPosition2) => {
    FieldPosition2[FieldPosition2["HEADER"] = 0] = "HEADER";
    FieldPosition2[FieldPosition2["TRAILER"] = 1] = "TRAILER";
    return FieldPosition2;
  })(FieldPosition || {});
  var SMITHY_CONTEXT_KEY = "__smithy_context";
  var IniSectionType = ((IniSectionType2) => {
    IniSectionType2["PROFILE"] = "profile";
    IniSectionType2["SSO_SESSION"] = "sso-session";
    IniSectionType2["SERVICES"] = "services";
    return IniSectionType2;
  })(IniSectionType || {});
  var RequestHandlerProtocol = ((RequestHandlerProtocol2) => {
    RequestHandlerProtocol2["HTTP_0_9"] = "http/0.9";
    RequestHandlerProtocol2["HTTP_1_0"] = "http/1.0";
    RequestHandlerProtocol2["TDS_8_0"] = "tds/8.0";
    return RequestHandlerProtocol2;
  })(RequestHandlerProtocol || {});
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/r
var require_dist_cjs2 = __commonJS((exports, module) => {
  var cloneQuery = function(query) {
    return Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param
      };
    }, {});
  };
  var isValidHostname = function(hostname) {
    const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
    return hostPattern.test(hostname);
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    Field: () => Field,
    Fields: () => Fields,
    HttpRequest: () => HttpRequest,
    HttpResponse: () => HttpResponse,
    getHttpHandlerExtensionConfiguration: () => getHttpHandlerExtensionConfiguration,
    isValidHostname: () => isValidHostname,
    resolveHttpHandlerRuntimeConfig: () => resolveHttpHandlerRuntimeConfig
  });
  module.exports = __toCommonJS(src_exports);
  var getHttpHandlerExtensionConfiguration = __name((runtimeConfig) => {
    let httpHandler = runtimeConfig.httpHandler;
    return {
      setHttpHandler(handler) {
        httpHandler = handler;
      },
      httpHandler() {
        return httpHandler;
      },
      updateHttpClientConfig(key, value) {
        httpHandler.updateHttpClientConfig(key, value);
      },
      httpHandlerConfigs() {
        return httpHandler.httpHandlerConfigs();
      }
    };
  }, "getHttpHandlerExtensionConfiguration");
  var resolveHttpHandlerRuntimeConfig = __name((httpHandlerExtensionConfiguration) => {
    return {
      httpHandler: httpHandlerExtensionConfiguration.httpHandler()
    };
  }, "resolveHttpHandlerRuntimeConfig");
  var import_types = require_dist_cjs();
  var _Field = class _Field2 {
    constructor({ name, kind = import_types.FieldPosition.HEADER, values = [] }) {
      this.name = name;
      this.kind = kind;
      this.values = values;
    }
    add(value) {
      this.values.push(value);
    }
    set(values) {
      this.values = values;
    }
    remove(value) {
      this.values = this.values.filter((v) => v !== value);
    }
    toString() {
      return this.values.map((v) => v.includes(",") || v.includes(" ") ? `"${v}"` : v).join(", ");
    }
    get() {
      return this.values;
    }
  };
  __name(_Field, "Field");
  var Field = _Field;
  var _Fields = class _Fields2 {
    constructor({ fields = [], encoding = "utf-8" }) {
      this.entries = {};
      fields.forEach(this.setField.bind(this));
      this.encoding = encoding;
    }
    setField(field) {
      this.entries[field.name.toLowerCase()] = field;
    }
    getField(name) {
      return this.entries[name.toLowerCase()];
    }
    removeField(name) {
      delete this.entries[name.toLowerCase()];
    }
    getByType(kind) {
      return Object.values(this.entries).filter((field) => field.kind === kind);
    }
  };
  __name(_Fields, "Fields");
  var Fields = _Fields;
  var _HttpRequest = class _HttpRequest2 {
    constructor(options) {
      this.method = options.method || "GET";
      this.hostname = options.hostname || "localhost";
      this.port = options.port;
      this.query = options.query || {};
      this.headers = options.headers || {};
      this.body = options.body;
      this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
      this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
      this.username = options.username;
      this.password = options.password;
      this.fragment = options.fragment;
    }
    static isInstance(request) {
      if (!request)
        return false;
      const req = request;
      return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
    }
    clone() {
      const cloned = new _HttpRequest2({
        ...this,
        headers: { ...this.headers }
      });
      if (cloned.query)
        cloned.query = cloneQuery(cloned.query);
      return cloned;
    }
  };
  __name(_HttpRequest, "HttpRequest");
  var HttpRequest = _HttpRequest;
  __name(cloneQuery, "cloneQuery");
  var _HttpResponse = class _HttpResponse2 {
    constructor(options) {
      this.statusCode = options.statusCode;
      this.reason = options.reason;
      this.headers = options.headers || {};
      this.body = options.body;
    }
    static isInstance(response) {
      if (!response)
        return false;
      const resp = response;
      return typeof resp.statusCode === "number" && typeof resp.headers === "object";
    }
  };
  __name(_HttpResponse, "HttpResponse");
  var HttpResponse = _HttpResponse;
  __name(isValidHostname, "isValidHostname");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolve
var require_dist_cjs3 = __commonJS((exports, module) => {
  var addExpectContinueMiddleware = function(options) {
    return (next) => async (args) => {
      const { request } = args;
      if (import_protocol_http.HttpRequest.isInstance(request) && request.body && options.runtime === "node") {
        request.headers = {
          ...request.headers,
          Expect: "100-continue"
        };
      }
      return next({
        ...args,
        request
      });
    };
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    addExpectContinueMiddleware: () => addExpectContinueMiddleware,
    addExpectContinueMiddlewareOptions: () => addExpectContinueMiddlewareOptions,
    getAddExpectContinuePlugin: () => getAddExpectContinuePlugin
  });
  module.exports = __toCommonJS(src_exports);
  var import_protocol_http = require_dist_cjs2();
  __name(addExpectContinueMiddleware, "addExpectContinueMiddleware");
  var addExpectContinueMiddlewareOptions = {
    step: "build",
    tags: ["SET_EXPECT_HEADER", "EXPECT_HEADER"],
    name: "addExpectContinueMiddleware",
    override: true
  };
  var getAddExpectContinuePlugin = __name((options) => ({
    applyToStack: (clientStack) => {
      clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);
    }
  }), "getAddExpectContinuePlugin");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jss
var require_dist_cjs4 = __commonJS((exports, module) => {
  var resolveHostHeaderConfig = function(input) {
    return input;
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    getHostHeaderPlugin: () => getHostHeaderPlugin,
    hostHeaderMiddleware: () => hostHeaderMiddleware,
    hostHeaderMiddlewareOptions: () => hostHeaderMiddlewareOptions,
    resolveHostHeaderConfig: () => resolveHostHeaderConfig
  });
  module.exports = __toCommonJS(src_exports);
  var import_protocol_http = require_dist_cjs2();
  __name(resolveHostHeaderConfig, "resolveHostHeaderConfig");
  var hostHeaderMiddleware = __name((options) => (next) => async (args) => {
    if (!import_protocol_http.HttpRequest.isInstance(args.request))
      return next(args);
    const { request } = args;
    const { handlerProtocol = "" } = options.requestHandler.metadata || {};
    if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
      delete request.headers["host"];
      request.headers[":authority"] = request.hostname + (request.port ? ":" + request.port : "");
    } else if (!request.headers["host"]) {
      let host = request.hostname;
      if (request.port != null)
        host += `:${request.port}`;
      request.headers["host"] = host;
    }
    return next(args);
  }, "hostHeaderMiddleware");
  var hostHeaderMiddlewareOptions = {
    name: "hostHeaderMiddleware",
    step: "build",
    priority: "low",
    tags: ["HOST"],
    override: true
  };
  var getHostHeaderPlugin = __name((options) => ({
    applyToStack: (clientStack) => {
      clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
    }
  }), "getHostHeaderPlugin");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rulese
var require_dist_cjs5 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    getLoggerPlugin: () => getLoggerPlugin,
    loggerMiddleware: () => loggerMiddleware,
    loggerMiddlewareOptions: () => loggerMiddlewareOptions
  });
  module.exports = __toCommonJS(src_exports);
  var loggerMiddleware = __name(() => (next, context) => async (args) => {
    var _a, _b;
    try {
      const response = await next(args);
      const { clientName, commandName, logger: logger4, dynamoDbDocumentClientOptions = {} } = context;
      const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
      const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
      const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
      const { $metadata, ...outputWithoutMetadata } = response.output;
      (_a = logger4 == null ? undefined : logger4.info) == null || _a.call(logger4, {
        clientName,
        commandName,
        input: inputFilterSensitiveLog(args.input),
        output: outputFilterSensitiveLog(outputWithoutMetadata),
        metadata: $metadata
      });
      return response;
    } catch (error) {
      const { clientName, commandName, logger: logger4, dynamoDbDocumentClientOptions = {} } = context;
      const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
      const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
      (_b = logger4 == null ? undefined : logger4.error) == null || _b.call(logger4, {
        clientName,
        commandName,
        input: inputFilterSensitiveLog(args.input),
        error,
        metadata: error.$metadata
      });
      throw error;
    }
  }, "loggerMiddleware");
  var loggerMiddlewareOptions = {
    name: "loggerMiddleware",
    tags: ["LOGGER"],
    step: "initialize",
    override: true
  };
  var getLoggerPlugin = __name((options) => ({
    applyToStack: (clientStack) => {
      clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
    }
  }), "getLoggerPlugin");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.js
var require_dist_cjs6 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    addRecursionDetectionMiddlewareOptions: () => addRecursionDetectionMiddlewareOptions,
    getRecursionDetectionPlugin: () => getRecursionDetectionPlugin,
    recursionDetectionMiddleware: () => recursionDetectionMiddleware
  });
  module.exports = __toCommonJS(src_exports);
  var import_protocol_http = require_dist_cjs2();
  var TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
  var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
  var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
  var recursionDetectionMiddleware = __name((options) => (next) => async (args) => {
    const { request } = args;
    if (!import_protocol_http.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
      return next(args);
    }
    const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
    const traceId = process.env[ENV_TRACE_ID];
    const nonEmptyString = __name((str) => typeof str === "string" && str.length > 0, "nonEmptyString");
    if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
      request.headers[TRACE_ID_HEADER_NAME] = traceId;
    }
    return next({
      ...args,
      request
    });
  }, "recursionDetectionMiddleware");
  var addRecursionDetectionMiddlewareOptions = {
    step: "build",
    tags: ["RECURSION_DETECTION"],
    name: "recursionDetectionMiddleware",
    override: true,
    priority: "low"
  };
  var getRecursionDetectionPlugin = __name((options) => ({
    applyToStack: (clientStack) => {
      clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);
    }
  }), "getRecursionDetectionPlugin");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rule
var require_dist_cjs7 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    constructStack: () => constructStack
  });
  module.exports = __toCommonJS(src_exports);
  var getAllAliases = __name((name, aliases) => {
    const _aliases = [];
    if (name) {
      _aliases.push(name);
    }
    if (aliases) {
      for (const alias of aliases) {
        _aliases.push(alias);
      }
    }
    return _aliases;
  }, "getAllAliases");
  var getMiddlewareNameWithAliases = __name((name, aliases) => {
    return `${name || "anonymous"}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(",")})` : ""}`;
  }, "getMiddlewareNameWithAliases");
  var constructStack = __name(() => {
    let absoluteEntries = [];
    let relativeEntries = [];
    let identifyOnResolve = false;
    const entriesNameSet = new Set;
    const sort = __name((entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]), "sort");
    const removeByName = __name((toRemove) => {
      let isRemoved = false;
      const filterCb = __name((entry) => {
        const aliases = getAllAliases(entry.name, entry.aliases);
        if (aliases.includes(toRemove)) {
          isRemoved = true;
          for (const alias of aliases) {
            entriesNameSet.delete(alias);
          }
          return false;
        }
        return true;
      }, "filterCb");
      absoluteEntries = absoluteEntries.filter(filterCb);
      relativeEntries = relativeEntries.filter(filterCb);
      return isRemoved;
    }, "removeByName");
    const removeByReference = __name((toRemove) => {
      let isRemoved = false;
      const filterCb = __name((entry) => {
        if (entry.middleware === toRemove) {
          isRemoved = true;
          for (const alias of getAllAliases(entry.name, entry.aliases)) {
            entriesNameSet.delete(alias);
          }
          return false;
        }
        return true;
      }, "filterCb");
      absoluteEntries = absoluteEntries.filter(filterCb);
      relativeEntries = relativeEntries.filter(filterCb);
      return isRemoved;
    }, "removeByReference");
    const cloneTo = __name((toStack) => {
      var _a;
      absoluteEntries.forEach((entry) => {
        toStack.add(entry.middleware, { ...entry });
      });
      relativeEntries.forEach((entry) => {
        toStack.addRelativeTo(entry.middleware, { ...entry });
      });
      (_a = toStack.identifyOnResolve) == null || _a.call(toStack, stack.identifyOnResolve());
      return toStack;
    }, "cloneTo");
    const expandRelativeMiddlewareList = __name((from) => {
      const expandedMiddlewareList = [];
      from.before.forEach((entry) => {
        if (entry.before.length === 0 && entry.after.length === 0) {
          expandedMiddlewareList.push(entry);
        } else {
          expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
        }
      });
      expandedMiddlewareList.push(from);
      from.after.reverse().forEach((entry) => {
        if (entry.before.length === 0 && entry.after.length === 0) {
          expandedMiddlewareList.push(entry);
        } else {
          expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
        }
      });
      return expandedMiddlewareList;
    }, "expandRelativeMiddlewareList");
    const getMiddlewareList = __name((debug = false) => {
      const normalizedAbsoluteEntries = [];
      const normalizedRelativeEntries = [];
      const normalizedEntriesNameMap = {};
      absoluteEntries.forEach((entry) => {
        const normalizedEntry = {
          ...entry,
          before: [],
          after: []
        };
        for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
          normalizedEntriesNameMap[alias] = normalizedEntry;
        }
        normalizedAbsoluteEntries.push(normalizedEntry);
      });
      relativeEntries.forEach((entry) => {
        const normalizedEntry = {
          ...entry,
          before: [],
          after: []
        };
        for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
          normalizedEntriesNameMap[alias] = normalizedEntry;
        }
        normalizedRelativeEntries.push(normalizedEntry);
      });
      normalizedRelativeEntries.forEach((entry) => {
        if (entry.toMiddleware) {
          const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
          if (toMiddleware === undefined) {
            if (debug) {
              return;
            }
            throw new Error(`${entry.toMiddleware} is not found when adding ${getMiddlewareNameWithAliases(entry.name, entry.aliases)} middleware ${entry.relation} ${entry.toMiddleware}`);
          }
          if (entry.relation === "after") {
            toMiddleware.after.push(entry);
          }
          if (entry.relation === "before") {
            toMiddleware.before.push(entry);
          }
        }
      });
      const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expandedMiddlewareList) => {
        wholeList.push(...expandedMiddlewareList);
        return wholeList;
      }, []);
      return mainChain;
    }, "getMiddlewareList");
    const stack = {
      add: (middleware, options = {}) => {
        const { name, override, aliases: _aliases } = options;
        const entry = {
          step: "initialize",
          priority: "normal",
          middleware,
          ...options
        };
        const aliases = getAllAliases(name, _aliases);
        if (aliases.length > 0) {
          if (aliases.some((alias) => entriesNameSet.has(alias))) {
            if (!override)
              throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
            for (const alias of aliases) {
              const toOverrideIndex = absoluteEntries.findIndex((entry2) => {
                var _a;
                return entry2.name === alias || ((_a = entry2.aliases) == null ? undefined : _a.some((a) => a === alias));
              });
              if (toOverrideIndex === -1) {
                continue;
              }
              const toOverride = absoluteEntries[toOverrideIndex];
              if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {
                throw new Error(`"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware with ${entry.priority} priority in ${entry.step} step.`);
              }
              absoluteEntries.splice(toOverrideIndex, 1);
            }
          }
          for (const alias of aliases) {
            entriesNameSet.add(alias);
          }
        }
        absoluteEntries.push(entry);
      },
      addRelativeTo: (middleware, options) => {
        const { name, override, aliases: _aliases } = options;
        const entry = {
          middleware,
          ...options
        };
        const aliases = getAllAliases(name, _aliases);
        if (aliases.length > 0) {
          if (aliases.some((alias) => entriesNameSet.has(alias))) {
            if (!override)
              throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
            for (const alias of aliases) {
              const toOverrideIndex = relativeEntries.findIndex((entry2) => {
                var _a;
                return entry2.name === alias || ((_a = entry2.aliases) == null ? undefined : _a.some((a) => a === alias));
              });
              if (toOverrideIndex === -1) {
                continue;
              }
              const toOverride = relativeEntries[toOverrideIndex];
              if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                throw new Error(`"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
              }
              relativeEntries.splice(toOverrideIndex, 1);
            }
          }
          for (const alias of aliases) {
            entriesNameSet.add(alias);
          }
        }
        relativeEntries.push(entry);
      },
      clone: () => cloneTo(constructStack()),
      use: (plugin) => {
        plugin.applyToStack(stack);
      },
      remove: (toRemove) => {
        if (typeof toRemove === "string")
          return removeByName(toRemove);
        else
          return removeByReference(toRemove);
      },
      removeByTag: (toRemove) => {
        let isRemoved = false;
        const filterCb = __name((entry) => {
          const { tags, name, aliases: _aliases } = entry;
          if (tags && tags.includes(toRemove)) {
            const aliases = getAllAliases(name, _aliases);
            for (const alias of aliases) {
              entriesNameSet.delete(alias);
            }
            isRemoved = true;
            return false;
          }
          return true;
        }, "filterCb");
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      },
      concat: (from) => {
        var _a;
        const cloned = cloneTo(constructStack());
        cloned.use(from);
        cloned.identifyOnResolve(identifyOnResolve || cloned.identifyOnResolve() || (((_a = from.identifyOnResolve) == null ? undefined : _a.call(from)) ?? false));
        return cloned;
      },
      applyToStack: cloneTo,
      identify: () => {
        return getMiddlewareList(true).map((mw) => {
          const step = mw.step ?? mw.relation + " " + mw.toMiddleware;
          return getMiddlewareNameWithAliases(mw.name, mw.aliases) + " - " + step;
        });
      },
      identifyOnResolve(toggle) {
        if (typeof toggle === "boolean")
          identifyOnResolve = toggle;
        return identifyOnResolve;
      },
      resolve: (handler, context) => {
        for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
          handler = middleware(handler, context);
        }
        if (identifyOnResolve) {
          console.log(stack.identify());
        }
        return handler;
      }
    };
    return stack;
  }, "constructStack");
  var stepWeights = {
    initialize: 5,
    serialize: 4,
    build: 3,
    finalizeRequest: 2,
    deserialize: 1
  };
  var priorityWeights = {
    high: 3,
    normal: 2,
    low: 1
  };
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rul
var require_dist_cjs8 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    isArrayBuffer: () => isArrayBuffer
  });
  module.exports = __toCommonJS(src_exports);
  var isArrayBuffer = __name((arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]", "isArrayBuffer");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rule
var require_dist_cjs9 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    fromArrayBuffer: () => fromArrayBuffer,
    fromString: () => fromString
  });
  module.exports = __toCommonJS(src_exports);
  var import_is_array_buffer = require_dist_cjs8();
  var import_buffer = __require("buffer");
  var fromArrayBuffer = __name((input, offset = 0, length = input.byteLength - offset) => {
    if (!(0, import_is_array_buffer.isArrayBuffer)(input)) {
      throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
    }
    return import_buffer.Buffer.from(input, offset, length);
  }, "fromArrayBuffer");
  var fromString = __name((input, encoding) => {
    if (typeof input !== "string") {
      throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
    }
    return encoding ? import_buffer.Buffer.from(input, encoding) : import_buffer.Buffer.from(input);
  }, "fromString");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rule
var require_fromBase64 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.fromBase64 = undefined;
  var util_buffer_from_1 = require_dist_cjs9();
  var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
  var fromBase642 = (input) => {
    if (input.length * 3 % 4 !== 0) {
      throw new TypeError(`Incorrect padding on base64 string.`);
    }
    if (!BASE64_REGEX.exec(input)) {
      throw new TypeError(`Invalid base64 string.`);
    }
    const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
  };
  exports.fromBase64 = fromBase642;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ru
var require_toBase64 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.toBase64 = undefined;
  var util_buffer_from_1 = require_dist_cjs9();
  var toBase642 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
  exports.toBase64 = toBase642;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint
var require_dist_cjs10 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  module.exports = __toCommonJS(src_exports);
  __reExport(src_exports, require_fromBase64(), module.exports);
  __reExport(src_exports, require_toBase64(), module.exports);
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoi
var require_dist_cjs11 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    fromUtf8: () => fromUtf8,
    toUint8Array: () => toUint8Array,
    toUtf8: () => toUtf8
  });
  module.exports = __toCommonJS(src_exports);
  var import_util_buffer_from = require_dist_cjs9();
  var fromUtf8 = __name((input) => {
    const buf = (0, import_util_buffer_from.fromString)(input, "utf8");
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
  }, "fromUtf8");
  var toUint8Array = __name((data) => {
    if (typeof data === "string") {
      return fromUtf8(data);
    }
    if (ArrayBuffer.isView(data)) {
      return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }
    return new Uint8Array(data);
  }, "toUint8Array");
  var toUtf8 = __name((input) => (0, import_util_buffer_from.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8"), "toUtf8");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.jsno
var require_getAwsChunkedEncodingStream = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getAwsChunkedEncodingStream = undefined;
  var stream_1 = __require("stream");
  var getAwsChunkedEncodingStream2 = (readableStream, options) => {
    const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;
    const checksumRequired = base64Encoder !== undefined && checksumAlgorithmFn !== undefined && checksumLocationName !== undefined && streamHasher !== undefined;
    const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : undefined;
    const awsChunkedEncodingStream = new stream_1.Readable({ read: () => {
    } });
    readableStream.on("data", (data) => {
      const length = bodyLengthChecker(data) || 0;
      awsChunkedEncodingStream.push(`${length.toString(16)}\r\n`);
      awsChunkedEncodingStream.push(data);
      awsChunkedEncodingStream.push("\r\n");
    });
    readableStream.on("end", async () => {
      awsChunkedEncodingStream.push(`0\r\n`);
      if (checksumRequired) {
        const checksum = base64Encoder(await digest);
        awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\r\n`);
        awsChunkedEncodingStream.push(`\r\n`);
      }
      awsChunkedEncodingStream.push(null);
    });
    return awsChunkedEncodingStream;
  };
  exports.getAwsChunkedEncodingStream = getAwsChunkedEncodingStream2;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rul
var require_dist_cjs12 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    escapeUri: () => escapeUri,
    escapeUriPath: () => escapeUriPath
  });
  module.exports = __toCommonJS(src_exports);
  var escapeUri = __name((uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode), "escapeUri");
  var hexEncode = __name((c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`, "hexEncode");
  var escapeUriPath = __name((uri) => uri.split("/").map(escapeUri).join("/"), "escapeUriPath");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset
var require_dist_cjs13 = __commonJS((exports, module) => {
  var buildQueryString = function(query) {
    const parts = [];
    for (let key of Object.keys(query).sort()) {
      const value = query[key];
      key = (0, import_util_uri_escape.escapeUri)(key);
      if (Array.isArray(value)) {
        for (let i = 0, iLen = value.length;i < iLen; i++) {
          parts.push(`${key}=${(0, import_util_uri_escape.escapeUri)(value[i])}`);
        }
      } else {
        let qsEntry = key;
        if (value || typeof value === "string") {
          qsEntry += `=${(0, import_util_uri_escape.escapeUri)(value)}`;
        }
        parts.push(qsEntry);
      }
    }
    return parts.join("&");
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    buildQueryString: () => buildQueryString
  });
  module.exports = __toCommonJS(src_exports);
  var import_util_uri_escape = require_dist_cjs12();
  __name(buildQueryString, "buildQueryString");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rules
var require_dist_cjs14 = __commonJS((exports, module) => {
  async function writeRequestBody(httpRequest, request, maxContinueTimeoutMs = MIN_WAIT_TIME) {
    const headers = request.headers ?? {};
    const expect = headers["Expect"] || headers["expect"];
    let timeoutId = -1;
    let hasError = false;
    if (expect === "100-continue") {
      await Promise.race([
        new Promise((resolve) => {
          timeoutId = Number(setTimeout(resolve, Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));
        }),
        new Promise((resolve) => {
          httpRequest.on("continue", () => {
            clearTimeout(timeoutId);
            resolve();
          });
          httpRequest.on("error", () => {
            hasError = true;
            clearTimeout(timeoutId);
            resolve();
          });
        })
      ]);
    }
    if (!hasError) {
      writeBody(httpRequest, request.body);
    }
  }
  var writeBody = function(httpRequest, body) {
    if (body instanceof import_stream.Readable) {
      body.pipe(httpRequest);
    } else if (body) {
      httpRequest.end(Buffer.from(body));
    } else {
      httpRequest.end();
    }
  };
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    DEFAULT_REQUEST_TIMEOUT: () => DEFAULT_REQUEST_TIMEOUT,
    NodeHttp2Handler: () => NodeHttp2Handler,
    NodeHttpHandler: () => NodeHttpHandler,
    streamCollector: () => streamCollector
  });
  module.exports = __toCommonJS(src_exports);
  var import_protocol_http = require_dist_cjs2();
  var import_querystring_builder = require_dist_cjs13();
  var import_http = __require("http");
  var import_https = __require("https");
  var NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  var getTransformedHeaders = __name((headers) => {
    const transformedHeaders = {};
    for (const name of Object.keys(headers)) {
      const headerValues = headers[name];
      transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
    }
    return transformedHeaders;
  }, "getTransformedHeaders");
  var setConnectionTimeout = __name((request, reject, timeoutInMs = 0) => {
    if (!timeoutInMs) {
      return;
    }
    const timeoutId = setTimeout(() => {
      request.destroy();
      reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
        name: "TimeoutError"
      }));
    }, timeoutInMs);
    request.on("socket", (socket) => {
      if (socket.connecting) {
        socket.on("connect", () => {
          clearTimeout(timeoutId);
        });
      } else {
        clearTimeout(timeoutId);
      }
    });
  }, "setConnectionTimeout");
  var setSocketKeepAlive = __name((request, { keepAlive, keepAliveMsecs }) => {
    if (keepAlive !== true) {
      return;
    }
    request.on("socket", (socket) => {
      socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
    });
  }, "setSocketKeepAlive");
  var setSocketTimeout = __name((request, reject, timeoutInMs = 0) => {
    request.setTimeout(timeoutInMs, () => {
      request.destroy();
      reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
    });
  }, "setSocketTimeout");
  var import_stream = __require("stream");
  var MIN_WAIT_TIME = 1000;
  __name(writeRequestBody, "writeRequestBody");
  __name(writeBody, "writeBody");
  var DEFAULT_REQUEST_TIMEOUT = 0;
  var _NodeHttpHandler = class _NodeHttpHandler2 {
    constructor(options) {
      this.metadata = { handlerProtocol: "http/1.1" };
      this.configProvider = new Promise((resolve, reject) => {
        if (typeof options === "function") {
          options().then((_options) => {
            resolve(this.resolveDefaultConfig(_options));
          }).catch(reject);
        } else {
          resolve(this.resolveDefaultConfig(options));
        }
      });
    }
    static create(instanceOrOptions) {
      if (typeof (instanceOrOptions == null ? undefined : instanceOrOptions.handle) === "function") {
        return instanceOrOptions;
      }
      return new _NodeHttpHandler2(instanceOrOptions);
    }
    resolveDefaultConfig(options) {
      const { requestTimeout, connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
      const keepAlive = true;
      const maxSockets = 50;
      return {
        connectionTimeout,
        requestTimeout: requestTimeout ?? socketTimeout,
        httpAgent: httpAgent || new import_http.Agent({ keepAlive, maxSockets }),
        httpsAgent: httpsAgent || new import_https.Agent({ keepAlive, maxSockets })
      };
    }
    destroy() {
      var _a, _b, _c, _d;
      (_b = (_a = this.config) == null ? undefined : _a.httpAgent) == null || _b.destroy();
      (_d = (_c = this.config) == null ? undefined : _c.httpsAgent) == null || _d.destroy();
    }
    async handle(request, { abortSignal } = {}) {
      if (!this.config) {
        this.config = await this.configProvider;
      }
      return new Promise((_resolve, _reject) => {
        let writeRequestBodyPromise = undefined;
        const resolve = __name(async (arg) => {
          await writeRequestBodyPromise;
          _resolve(arg);
        }, "resolve");
        const reject = __name(async (arg) => {
          await writeRequestBodyPromise;
          _reject(arg);
        }, "reject");
        if (!this.config) {
          throw new Error("Node HTTP request handler config is not resolved");
        }
        if (abortSignal == null ? undefined : abortSignal.aborted) {
          const abortError = new Error("Request aborted");
          abortError.name = "AbortError";
          reject(abortError);
          return;
        }
        const isSSL = request.protocol === "https:";
        const queryString = (0, import_querystring_builder.buildQueryString)(request.query || {});
        let auth = undefined;
        if (request.username != null || request.password != null) {
          const username = request.username ?? "";
          const password = request.password ?? "";
          auth = `${username}:${password}`;
        }
        let path = request.path;
        if (queryString) {
          path += `?${queryString}`;
        }
        if (request.fragment) {
          path += `#${request.fragment}`;
        }
        const nodeHttpsOptions = {
          headers: request.headers,
          host: request.hostname,
          method: request.method,
          path,
          port: request.port,
          agent: isSSL ? this.config.httpsAgent : this.config.httpAgent,
          auth
        };
        const requestFunc = isSSL ? import_https.request : import_http.request;
        const req = requestFunc(nodeHttpsOptions, (res) => {
          const httpResponse = new import_protocol_http.HttpResponse({
            statusCode: res.statusCode || -1,
            reason: res.statusMessage,
            headers: getTransformedHeaders(res.headers),
            body: res
          });
          resolve({ response: httpResponse });
        });
        req.on("error", (err) => {
          if (NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
            reject(Object.assign(err, { name: "TimeoutError" }));
          } else {
            reject(err);
          }
        });
        setConnectionTimeout(req, reject, this.config.connectionTimeout);
        setSocketTimeout(req, reject, this.config.requestTimeout);
        if (abortSignal) {
          abortSignal.onabort = () => {
            req.abort();
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
          };
        }
        const httpAgent = nodeHttpsOptions.agent;
        if (typeof httpAgent === "object" && "keepAlive" in httpAgent) {
          setSocketKeepAlive(req, {
            keepAlive: httpAgent.keepAlive,
            keepAliveMsecs: httpAgent.keepAliveMsecs
          });
        }
        writeRequestBodyPromise = writeRequestBody(req, request, this.config.requestTimeout).catch(_reject);
      });
    }
    updateHttpClientConfig(key, value) {
      this.config = undefined;
      this.configProvider = this.configProvider.then((config) => {
        return {
          ...config,
          [key]: value
        };
      });
    }
    httpHandlerConfigs() {
      return this.config ?? {};
    }
  };
  __name(_NodeHttpHandler, "NodeHttpHandler");
  var NodeHttpHandler = _NodeHttpHandler;
  var import_http22 = __require("http2");
  var import_http2 = __toESM2(__require("http2"));
  var _NodeHttp2ConnectionPool = class _NodeHttp2ConnectionPool2 {
    constructor(sessions) {
      this.sessions = [];
      this.sessions = sessions ?? [];
    }
    poll() {
      if (this.sessions.length > 0) {
        return this.sessions.shift();
      }
    }
    offerLast(session) {
      this.sessions.push(session);
    }
    contains(session) {
      return this.sessions.includes(session);
    }
    remove(session) {
      this.sessions = this.sessions.filter((s) => s !== session);
    }
    [Symbol.iterator]() {
      return this.sessions[Symbol.iterator]();
    }
    destroy(connection) {
      for (const session of this.sessions) {
        if (session === connection) {
          if (!session.destroyed) {
            session.destroy();
          }
        }
      }
    }
  };
  __name(_NodeHttp2ConnectionPool, "NodeHttp2ConnectionPool");
  var NodeHttp2ConnectionPool = _NodeHttp2ConnectionPool;
  var _NodeHttp2ConnectionManager = class _NodeHttp2ConnectionManager2 {
    constructor(config) {
      this.sessionCache = new Map;
      this.config = config;
      if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
        throw new RangeError("maxConcurrency must be greater than zero.");
      }
    }
    lease(requestContext, connectionConfiguration) {
      const url = this.getUrlString(requestContext);
      const existingPool = this.sessionCache.get(url);
      if (existingPool) {
        const existingSession = existingPool.poll();
        if (existingSession && !this.config.disableConcurrency) {
          return existingSession;
        }
      }
      const session = import_http2.default.connect(url);
      if (this.config.maxConcurrency) {
        session.settings({ maxConcurrentStreams: this.config.maxConcurrency }, (err) => {
          if (err) {
            throw new Error("Fail to set maxConcurrentStreams to " + this.config.maxConcurrency + "when creating new session for " + requestContext.destination.toString());
          }
        });
      }
      session.unref();
      const destroySessionCb = __name(() => {
        session.destroy();
        this.deleteSession(url, session);
      }, "destroySessionCb");
      session.on("goaway", destroySessionCb);
      session.on("error", destroySessionCb);
      session.on("frameError", destroySessionCb);
      session.on("close", () => this.deleteSession(url, session));
      if (connectionConfiguration.requestTimeout) {
        session.setTimeout(connectionConfiguration.requestTimeout, destroySessionCb);
      }
      const connectionPool = this.sessionCache.get(url) || new NodeHttp2ConnectionPool;
      connectionPool.offerLast(session);
      this.sessionCache.set(url, connectionPool);
      return session;
    }
    deleteSession(authority, session) {
      const existingConnectionPool = this.sessionCache.get(authority);
      if (!existingConnectionPool) {
        return;
      }
      if (!existingConnectionPool.contains(session)) {
        return;
      }
      existingConnectionPool.remove(session);
      this.sessionCache.set(authority, existingConnectionPool);
    }
    release(requestContext, session) {
      var _a;
      const cacheKey = this.getUrlString(requestContext);
      (_a = this.sessionCache.get(cacheKey)) == null || _a.offerLast(session);
    }
    destroy() {
      for (const [key, connectionPool] of this.sessionCache) {
        for (const session of connectionPool) {
          if (!session.destroyed) {
            session.destroy();
          }
          connectionPool.remove(session);
        }
        this.sessionCache.delete(key);
      }
    }
    setMaxConcurrentStreams(maxConcurrentStreams) {
      if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
        throw new RangeError("maxConcurrentStreams must be greater than zero.");
      }
      this.config.maxConcurrency = maxConcurrentStreams;
    }
    setDisableConcurrentStreams(disableConcurrentStreams) {
      this.config.disableConcurrency = disableConcurrentStreams;
    }
    getUrlString(request) {
      return request.destination.toString();
    }
  };
  __name(_NodeHttp2ConnectionManager, "NodeHttp2ConnectionManager");
  var NodeHttp2ConnectionManager = _NodeHttp2ConnectionManager;
  var _NodeHttp2Handler = class _NodeHttp2Handler2 {
    constructor(options) {
      this.metadata = { handlerProtocol: "h2" };
      this.connectionManager = new NodeHttp2ConnectionManager({});
      this.configProvider = new Promise((resolve, reject) => {
        if (typeof options === "function") {
          options().then((opts) => {
            resolve(opts || {});
          }).catch(reject);
        } else {
          resolve(options || {});
        }
      });
    }
    static create(instanceOrOptions) {
      if (typeof (instanceOrOptions == null ? undefined : instanceOrOptions.handle) === "function") {
        return instanceOrOptions;
      }
      return new _NodeHttp2Handler2(instanceOrOptions);
    }
    destroy() {
      this.connectionManager.destroy();
    }
    async handle(request, { abortSignal } = {}) {
      if (!this.config) {
        this.config = await this.configProvider;
        this.connectionManager.setDisableConcurrentStreams(this.config.disableConcurrentStreams || false);
        if (this.config.maxConcurrentStreams) {
          this.connectionManager.setMaxConcurrentStreams(this.config.maxConcurrentStreams);
        }
      }
      const { requestTimeout, disableConcurrentStreams } = this.config;
      return new Promise((_resolve, _reject) => {
        var _a;
        let fulfilled = false;
        let writeRequestBodyPromise = undefined;
        const resolve = __name(async (arg) => {
          await writeRequestBodyPromise;
          _resolve(arg);
        }, "resolve");
        const reject = __name(async (arg) => {
          await writeRequestBodyPromise;
          _reject(arg);
        }, "reject");
        if (abortSignal == null ? undefined : abortSignal.aborted) {
          fulfilled = true;
          const abortError = new Error("Request aborted");
          abortError.name = "AbortError";
          reject(abortError);
          return;
        }
        const { hostname, method, port, protocol, query } = request;
        let auth = "";
        if (request.username != null || request.password != null) {
          const username = request.username ?? "";
          const password = request.password ?? "";
          auth = `${username}:${password}@`;
        }
        const authority = `${protocol}//${auth}${hostname}${port ? `:${port}` : ""}`;
        const requestContext = { destination: new URL(authority) };
        const session = this.connectionManager.lease(requestContext, {
          requestTimeout: (_a = this.config) == null ? undefined : _a.sessionTimeout,
          disableConcurrentStreams: disableConcurrentStreams || false
        });
        const rejectWithDestroy = __name((err) => {
          if (disableConcurrentStreams) {
            this.destroySession(session);
          }
          fulfilled = true;
          reject(err);
        }, "rejectWithDestroy");
        const queryString = (0, import_querystring_builder.buildQueryString)(query || {});
        let path = request.path;
        if (queryString) {
          path += `?${queryString}`;
        }
        if (request.fragment) {
          path += `#${request.fragment}`;
        }
        const req = session.request({
          ...request.headers,
          [import_http22.constants.HTTP2_HEADER_PATH]: path,
          [import_http22.constants.HTTP2_HEADER_METHOD]: method
        });
        session.ref();
        req.on("response", (headers) => {
          const httpResponse = new import_protocol_http.HttpResponse({
            statusCode: headers[":status"] || -1,
            headers: getTransformedHeaders(headers),
            body: req
          });
          fulfilled = true;
          resolve({ response: httpResponse });
          if (disableConcurrentStreams) {
            session.close();
            this.connectionManager.deleteSession(authority, session);
          }
        });
        if (requestTimeout) {
          req.setTimeout(requestTimeout, () => {
            req.close();
            const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
            timeoutError.name = "TimeoutError";
            rejectWithDestroy(timeoutError);
          });
        }
        if (abortSignal) {
          abortSignal.onabort = () => {
            req.close();
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            rejectWithDestroy(abortError);
          };
        }
        req.on("frameError", (type, code, id) => {
          rejectWithDestroy(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
        });
        req.on("error", rejectWithDestroy);
        req.on("aborted", () => {
          rejectWithDestroy(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));
        });
        req.on("close", () => {
          session.unref();
          if (disableConcurrentStreams) {
            session.destroy();
          }
          if (!fulfilled) {
            rejectWithDestroy(new Error("Unexpected error: http2 request did not get a response"));
          }
        });
        writeRequestBodyPromise = writeRequestBody(req, request, requestTimeout);
      });
    }
    updateHttpClientConfig(key, value) {
      this.config = undefined;
      this.configProvider = this.configProvider.then((config) => {
        return {
          ...config,
          [key]: value
        };
      });
    }
    httpHandlerConfigs() {
      return this.config ?? {};
    }
    destroySession(session) {
      if (!session.destroyed) {
        session.destroy();
      }
    }
  };
  __name(_NodeHttp2Handler, "NodeHttp2Handler");
  var NodeHttp2Handler = _NodeHttp2Handler;
  var _Collector = class _Collector2 extends import_stream.Writable {
    constructor() {
      super(...arguments);
      this.bufferedBytes = [];
    }
    _write(chunk, encoding, callback) {
      this.bufferedBytes.push(chunk);
      callback();
    }
  };
  __name(_Collector, "Collector");
  var Collector = _Collector;
  var streamCollector = __name((stream) => new Promise((resolve, reject) => {
    const collector = new Collector;
    stream.pipe(collector);
    stream.on("error", (err) => {
      collector.end();
      reject(err);
    });
    collector.on("error", reject);
    collector.on("finish", function() {
      const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
      resolve(bytes);
    });
  }), "streamCollector");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_sdk_stream_mixin = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.sdkStreamMixin = undefined;
  var node_http_handler_1 = require_dist_cjs14();
  var util_buffer_from_1 = require_dist_cjs9();
  var stream_1 = __require("stream");
  var util_1 = __require("util");
  var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
  var sdkStreamMixin2 = (stream) => {
    var _a, _b;
    if (!(stream instanceof stream_1.Readable)) {
      const name = ((_b = (_a = stream === null || stream === undefined ? undefined : stream.__proto__) === null || _a === undefined ? undefined : _a.constructor) === null || _b === undefined ? undefined : _b.name) || stream;
      throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);
    }
    let transformed = false;
    const transformToByteArray = async () => {
      if (transformed) {
        throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
      }
      transformed = true;
      return await (0, node_http_handler_1.streamCollector)(stream);
    };
    return Object.assign(stream, {
      transformToByteArray,
      transformToString: async (encoding) => {
        const buf = await transformToByteArray();
        if (encoding === undefined || Buffer.isEncoding(encoding)) {
          return (0, util_buffer_from_1.fromArrayBuffer)(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);
        } else {
          const decoder = new util_1.TextDecoder(encoding);
          return decoder.decode(buf);
        }
      },
      transformToWebStream: () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        if (stream.readableFlowing !== null) {
          throw new Error("The stream has been consumed by other callbacks.");
        }
        if (typeof stream_1.Readable.toWeb !== "function") {
          throw new Error("Readable.toWeb() is not supported. Please make sure you are using Node.js >= 17.0.0, or polyfill is available.");
        }
        transformed = true;
        return stream_1.Readable.toWeb(stream);
      }
    });
  };
  exports.sdkStreamMixin = sdkStreamMixin2;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint
var require_dist_cjs15 = __commonJS((exports, module) => {
  var transformToString = function(payload, encoding = "utf-8") {
    if (encoding === "base64") {
      return (0, import_util_base64.toBase64)(payload);
    }
    return (0, import_util_utf8.toUtf8)(payload);
  };
  var transformFromString = function(str, encoding) {
    if (encoding === "base64") {
      return Uint8ArrayBlobAdapter.mutate((0, import_util_base64.fromBase64)(str));
    }
    return Uint8ArrayBlobAdapter.mutate((0, import_util_utf8.fromUtf8)(str));
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    Uint8ArrayBlobAdapter: () => Uint8ArrayBlobAdapter
  });
  module.exports = __toCommonJS(src_exports);
  var import_util_base64 = require_dist_cjs10();
  var import_util_utf8 = require_dist_cjs11();
  __name(transformToString, "transformToString");
  __name(transformFromString, "transformFromString");
  var _Uint8ArrayBlobAdapter = class _Uint8ArrayBlobAdapter2 extends Uint8Array {
    static fromString(source, encoding = "utf-8") {
      switch (typeof source) {
        case "string":
          return transformFromString(source, encoding);
        default:
          throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
      }
    }
    static mutate(source) {
      Object.setPrototypeOf(source, _Uint8ArrayBlobAdapter2.prototype);
      return source;
    }
    transformToString(encoding = "utf-8") {
      return transformToString(this, encoding);
    }
  };
  __name(_Uint8ArrayBlobAdapter, "Uint8ArrayBlobAdapter");
  var Uint8ArrayBlobAdapter = _Uint8ArrayBlobAdapter;
  __reExport(src_exports, require_getAwsChunkedEncodingStream(), module.exports);
  __reExport(src_exports, require_sdk_stream_mixin(), module.exports);
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/r
var require_dist_cjs16 = __commonJS((exports, module) => {
  var dateToUtcString = function(date) {
    const year = date.getUTCFullYear();
    const month = date.getUTCMonth();
    const dayOfWeek = date.getUTCDay();
    const dayOfMonthInt = date.getUTCDate();
    const hoursInt = date.getUTCHours();
    const minutesInt = date.getUTCMinutes();
    const secondsInt = date.getUTCSeconds();
    const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
    const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
    const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
    const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
    return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
  };
  var extendedEncodeURIComponent = function(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
      return "%" + c.charCodeAt(0).toString(16).toUpperCase();
    });
  };
  var map = function(arg0, arg1, arg2) {
    let target;
    let filter;
    let instructions;
    if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
      target = {};
      instructions = arg0;
    } else {
      target = arg0;
      if (typeof arg1 === "function") {
        filter = arg1;
        instructions = arg2;
        return mapWithFilter(target, filter, instructions);
      } else {
        instructions = arg1;
      }
    }
    for (const key of Object.keys(instructions)) {
      if (!Array.isArray(instructions[key])) {
        target[key] = instructions[key];
        continue;
      }
      applyInstruction(target, null, instructions, key);
    }
    return target;
  };
  var splitEvery = function(value, delimiter, numDelimiters) {
    if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
      throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
    }
    const segments = value.split(delimiter);
    if (numDelimiters === 1) {
      return segments;
    }
    const compoundSegments = [];
    let currentSegment = "";
    for (let i = 0;i < segments.length; i++) {
      if (currentSegment === "") {
        currentSegment = segments[i];
      } else {
        currentSegment += delimiter + segments[i];
      }
      if ((i + 1) % numDelimiters === 0) {
        compoundSegments.push(currentSegment);
        currentSegment = "";
      }
    }
    if (currentSegment !== "") {
      compoundSegments.push(currentSegment);
    }
    return compoundSegments;
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    Client: () => Client,
    Command: () => Command,
    LazyJsonString: () => LazyJsonString,
    NoOpLogger: () => NoOpLogger,
    SENSITIVE_STRING: () => SENSITIVE_STRING,
    ServiceException: () => ServiceException,
    StringWrapper: () => StringWrapper,
    _json: () => _json,
    collectBody: () => collectBody,
    convertMap: () => convertMap,
    createAggregatedClient: () => createAggregatedClient,
    dateToUtcString: () => dateToUtcString,
    decorateServiceException: () => decorateServiceException,
    emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion,
    expectBoolean: () => expectBoolean,
    expectByte: () => expectByte,
    expectFloat32: () => expectFloat32,
    expectInt: () => expectInt,
    expectInt32: () => expectInt32,
    expectLong: () => expectLong,
    expectNonNull: () => expectNonNull,
    expectNumber: () => expectNumber,
    expectObject: () => expectObject,
    expectShort: () => expectShort,
    expectString: () => expectString,
    expectUnion: () => expectUnion,
    extendedEncodeURIComponent: () => extendedEncodeURIComponent,
    getArrayIfSingleItem: () => getArrayIfSingleItem,
    getDefaultClientConfiguration: () => getDefaultClientConfiguration,
    getDefaultExtensionConfiguration: () => getDefaultExtensionConfiguration,
    getValueFromTextNode: () => getValueFromTextNode,
    handleFloat: () => handleFloat,
    limitedParseDouble: () => limitedParseDouble,
    limitedParseFloat: () => limitedParseFloat,
    limitedParseFloat32: () => limitedParseFloat32,
    loadConfigsForDefaultMode: () => loadConfigsForDefaultMode,
    logger: () => logger4,
    map: () => map,
    parseBoolean: () => parseBoolean,
    parseEpochTimestamp: () => parseEpochTimestamp,
    parseRfc3339DateTime: () => parseRfc3339DateTime,
    parseRfc3339DateTimeWithOffset: () => parseRfc3339DateTimeWithOffset,
    parseRfc7231DateTime: () => parseRfc7231DateTime,
    resolveDefaultRuntimeConfig: () => resolveDefaultRuntimeConfig,
    resolvedPath: () => resolvedPath,
    serializeFloat: () => serializeFloat,
    splitEvery: () => splitEvery,
    strictParseByte: () => strictParseByte,
    strictParseDouble: () => strictParseDouble,
    strictParseFloat: () => strictParseFloat,
    strictParseFloat32: () => strictParseFloat32,
    strictParseInt: () => strictParseInt,
    strictParseInt32: () => strictParseInt32,
    strictParseLong: () => strictParseLong,
    strictParseShort: () => strictParseShort,
    take: () => take,
    throwDefaultError: () => throwDefaultError,
    withBaseException: () => withBaseException
  });
  module.exports = __toCommonJS(src_exports);
  var _NoOpLogger = class _NoOpLogger2 {
    trace() {
    }
    debug() {
    }
    info() {
    }
    warn() {
    }
    error() {
    }
  };
  __name(_NoOpLogger, "NoOpLogger");
  var NoOpLogger = _NoOpLogger;
  var import_middleware_stack = require_dist_cjs7();
  var _Client = class _Client2 {
    constructor(config) {
      this.middlewareStack = (0, import_middleware_stack.constructStack)();
      this.config = config;
    }
    send(command, optionsOrCb, cb) {
      const options = typeof optionsOrCb !== "function" ? optionsOrCb : undefined;
      const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
      const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
      if (callback) {
        handler(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
        });
      } else {
        return handler(command).then((result) => result.output);
      }
    }
    destroy() {
      if (this.config.requestHandler.destroy)
        this.config.requestHandler.destroy();
    }
  };
  __name(_Client, "Client");
  var Client = _Client;
  var import_util_stream = require_dist_cjs15();
  var collectBody = __name(async (streamBody = new Uint8Array, context) => {
    if (streamBody instanceof Uint8Array) {
      return import_util_stream.Uint8ArrayBlobAdapter.mutate(streamBody);
    }
    if (!streamBody) {
      return import_util_stream.Uint8ArrayBlobAdapter.mutate(new Uint8Array);
    }
    const fromContext = context.streamCollector(streamBody);
    return import_util_stream.Uint8ArrayBlobAdapter.mutate(await fromContext);
  }, "collectBody");
  var import_types = require_dist_cjs();
  var _Command = class _Command2 {
    constructor() {
      this.middlewareStack = (0, import_middleware_stack.constructStack)();
    }
    static classBuilder() {
      return new ClassBuilder;
    }
    resolveMiddlewareWithContext(clientStack, configuration, options, {
      middlewareFn,
      clientName,
      commandName,
      inputFilterSensitiveLog,
      outputFilterSensitiveLog,
      smithyContext,
      additionalContext,
      CommandCtor
    }) {
      for (const mw of middlewareFn.bind(this)(CommandCtor, clientStack, configuration, options)) {
        this.middlewareStack.use(mw);
      }
      const stack = clientStack.concat(this.middlewareStack);
      const { logger: logger22 } = configuration;
      const handlerExecutionContext = {
        logger: logger22,
        clientName,
        commandName,
        inputFilterSensitiveLog,
        outputFilterSensitiveLog,
        [import_types.SMITHY_CONTEXT_KEY]: {
          ...smithyContext
        },
        ...additionalContext
      };
      const { requestHandler } = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
  };
  __name(_Command, "Command");
  var Command = _Command;
  var _ClassBuilder = class _ClassBuilder2 {
    constructor() {
      this._init = () => {
      };
      this._ep = {};
      this._middlewareFn = () => [];
      this._commandName = "";
      this._clientName = "";
      this._additionalContext = {};
      this._smithyContext = {};
      this._inputFilterSensitiveLog = (_) => _;
      this._outputFilterSensitiveLog = (_) => _;
      this._serializer = null;
      this._deserializer = null;
    }
    init(cb) {
      this._init = cb;
    }
    ep(endpointParameterInstructions) {
      this._ep = endpointParameterInstructions;
      return this;
    }
    m(middlewareSupplier) {
      this._middlewareFn = middlewareSupplier;
      return this;
    }
    s(service, operation, smithyContext = {}) {
      this._smithyContext = {
        service,
        operation,
        ...smithyContext
      };
      return this;
    }
    c(additionalContext = {}) {
      this._additionalContext = additionalContext;
      return this;
    }
    n(clientName, commandName) {
      this._clientName = clientName;
      this._commandName = commandName;
      return this;
    }
    f(inputFilter = (_) => _, outputFilter = (_) => _) {
      this._inputFilterSensitiveLog = inputFilter;
      this._outputFilterSensitiveLog = outputFilter;
      return this;
    }
    ser(serializer) {
      this._serializer = serializer;
      return this;
    }
    de(deserializer) {
      this._deserializer = deserializer;
      return this;
    }
    build() {
      var _a;
      const closure = this;
      let CommandRef;
      return CommandRef = (_a = class extends Command {
        constructor(input) {
          super();
          this.input = input;
          this.serialize = closure._serializer;
          this.deserialize = closure._deserializer;
          closure._init(this);
        }
        static getEndpointParameterInstructions() {
          return closure._ep;
        }
        resolveMiddleware(stack, configuration, options) {
          return this.resolveMiddlewareWithContext(stack, configuration, options, {
            CommandCtor: CommandRef,
            middlewareFn: closure._middlewareFn,
            clientName: closure._clientName,
            commandName: closure._commandName,
            inputFilterSensitiveLog: closure._inputFilterSensitiveLog,
            outputFilterSensitiveLog: closure._outputFilterSensitiveLog,
            smithyContext: closure._smithyContext,
            additionalContext: closure._additionalContext
          });
        }
      }, __name(_a, "CommandRef"), _a);
    }
  };
  __name(_ClassBuilder, "ClassBuilder");
  var ClassBuilder = _ClassBuilder;
  var SENSITIVE_STRING = "***SensitiveInformation***";
  var createAggregatedClient = __name((commands, Client2) => {
    for (const command of Object.keys(commands)) {
      const CommandCtor = commands[command];
      const methodImpl = __name(async function(args, optionsOrCb, cb) {
        const command2 = new CommandCtor(args);
        if (typeof optionsOrCb === "function") {
          this.send(command2, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
          this.send(command2, optionsOrCb || {}, cb);
        } else {
          return this.send(command2, optionsOrCb);
        }
      }, "methodImpl");
      const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
      Client2.prototype[methodName] = methodImpl;
    }
  }, "createAggregatedClient");
  var parseBoolean = __name((value) => {
    switch (value) {
      case "true":
        return true;
      case "false":
        return false;
      default:
        throw new Error(`Unable to parse boolean value "${value}"`);
    }
  }, "parseBoolean");
  var expectBoolean = __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    if (typeof value === "number") {
      if (value === 0 || value === 1) {
        logger4.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
      }
      if (value === 0) {
        return false;
      }
      if (value === 1) {
        return true;
      }
    }
    if (typeof value === "string") {
      const lower = value.toLowerCase();
      if (lower === "false" || lower === "true") {
        logger4.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
      }
      if (lower === "false") {
        return false;
      }
      if (lower === "true") {
        return true;
      }
    }
    if (typeof value === "boolean") {
      return value;
    }
    throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
  }, "expectBoolean");
  var expectNumber = __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    if (typeof value === "string") {
      const parsed = parseFloat(value);
      if (!Number.isNaN(parsed)) {
        if (String(parsed) !== String(value)) {
          logger4.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
        }
        return parsed;
      }
    }
    if (typeof value === "number") {
      return value;
    }
    throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
  }, "expectNumber");
  var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
  var expectFloat32 = __name((value) => {
    const expected = expectNumber(value);
    if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== (-Infinity)) {
      if (Math.abs(expected) > MAX_FLOAT) {
        throw new TypeError(`Expected 32-bit float, got ${value}`);
      }
    }
    return expected;
  }, "expectFloat32");
  var expectLong = __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    if (Number.isInteger(value) && !Number.isNaN(value)) {
      return value;
    }
    throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
  }, "expectLong");
  var expectInt = expectLong;
  var expectInt32 = __name((value) => expectSizedInt(value, 32), "expectInt32");
  var expectShort = __name((value) => expectSizedInt(value, 16), "expectShort");
  var expectByte = __name((value) => expectSizedInt(value, 8), "expectByte");
  var expectSizedInt = __name((value, size) => {
    const expected = expectLong(value);
    if (expected !== undefined && castInt(expected, size) !== expected) {
      throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
    }
    return expected;
  }, "expectSizedInt");
  var castInt = __name((value, size) => {
    switch (size) {
      case 32:
        return Int32Array.of(value)[0];
      case 16:
        return Int16Array.of(value)[0];
      case 8:
        return Int8Array.of(value)[0];
    }
  }, "castInt");
  var expectNonNull = __name((value, location) => {
    if (value === null || value === undefined) {
      if (location) {
        throw new TypeError(`Expected a non-null value for ${location}`);
      }
      throw new TypeError("Expected a non-null value");
    }
    return value;
  }, "expectNonNull");
  var expectObject = __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    if (typeof value === "object" && !Array.isArray(value)) {
      return value;
    }
    const receivedType = Array.isArray(value) ? "array" : typeof value;
    throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
  }, "expectObject");
  var expectString = __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    if (typeof value === "string") {
      return value;
    }
    if (["boolean", "number", "bigint"].includes(typeof value)) {
      logger4.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
      return String(value);
    }
    throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
  }, "expectString");
  var expectUnion = __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    const asObject = expectObject(value);
    const setKeys = Object.entries(asObject).filter(([, v]) => v != null).map(([k]) => k);
    if (setKeys.length === 0) {
      throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
    }
    if (setKeys.length > 1) {
      throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
    }
    return asObject;
  }, "expectUnion");
  var strictParseDouble = __name((value) => {
    if (typeof value == "string") {
      return expectNumber(parseNumber(value));
    }
    return expectNumber(value);
  }, "strictParseDouble");
  var strictParseFloat = strictParseDouble;
  var strictParseFloat32 = __name((value) => {
    if (typeof value == "string") {
      return expectFloat32(parseNumber(value));
    }
    return expectFloat32(value);
  }, "strictParseFloat32");
  var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
  var parseNumber = __name((value) => {
    const matches = value.match(NUMBER_REGEX);
    if (matches === null || matches[0].length !== value.length) {
      throw new TypeError(`Expected real number, got implicit NaN`);
    }
    return parseFloat(value);
  }, "parseNumber");
  var limitedParseDouble = __name((value) => {
    if (typeof value == "string") {
      return parseFloatString(value);
    }
    return expectNumber(value);
  }, "limitedParseDouble");
  var handleFloat = limitedParseDouble;
  var limitedParseFloat = limitedParseDouble;
  var limitedParseFloat32 = __name((value) => {
    if (typeof value == "string") {
      return parseFloatString(value);
    }
    return expectFloat32(value);
  }, "limitedParseFloat32");
  var parseFloatString = __name((value) => {
    switch (value) {
      case "NaN":
        return NaN;
      case "Infinity":
        return Infinity;
      case "-Infinity":
        return (-Infinity);
      default:
        throw new Error(`Unable to parse float value: ${value}`);
    }
  }, "parseFloatString");
  var strictParseLong = __name((value) => {
    if (typeof value === "string") {
      return expectLong(parseNumber(value));
    }
    return expectLong(value);
  }, "strictParseLong");
  var strictParseInt = strictParseLong;
  var strictParseInt32 = __name((value) => {
    if (typeof value === "string") {
      return expectInt32(parseNumber(value));
    }
    return expectInt32(value);
  }, "strictParseInt32");
  var strictParseShort = __name((value) => {
    if (typeof value === "string") {
      return expectShort(parseNumber(value));
    }
    return expectShort(value);
  }, "strictParseShort");
  var strictParseByte = __name((value) => {
    if (typeof value === "string") {
      return expectByte(parseNumber(value));
    }
    return expectByte(value);
  }, "strictParseByte");
  var stackTraceWarning = __name((message) => {
    return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s) => !s.includes("stackTraceWarning")).join("\n");
  }, "stackTraceWarning");
  var logger4 = {
    warn: console.warn
  };
  var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
  __name(dateToUtcString, "dateToUtcString");
  var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
  var parseRfc3339DateTime = __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    if (typeof value !== "string") {
      throw new TypeError("RFC-3339 date-times must be expressed as strings");
    }
    const match = RFC3339.exec(value);
    if (!match) {
      throw new TypeError("Invalid RFC-3339 date-time value");
    }
    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
    const year = strictParseShort(stripLeadingZeroes(yearStr));
    const month = parseDateValue(monthStr, "month", 1, 12);
    const day = parseDateValue(dayStr, "day", 1, 31);
    return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
  }, "parseRfc3339DateTime");
  var RFC3339_WITH_OFFSET = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/);
  var parseRfc3339DateTimeWithOffset = __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    if (typeof value !== "string") {
      throw new TypeError("RFC-3339 date-times must be expressed as strings");
    }
    const match = RFC3339_WITH_OFFSET.exec(value);
    if (!match) {
      throw new TypeError("Invalid RFC-3339 date-time value");
    }
    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
    const year = strictParseShort(stripLeadingZeroes(yearStr));
    const month = parseDateValue(monthStr, "month", 1, 12);
    const day = parseDateValue(dayStr, "day", 1, 31);
    const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    if (offsetStr.toUpperCase() != "Z") {
      date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
    }
    return date;
  }, "parseRfc3339DateTimeWithOffset");
  var IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
  var RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
  var ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
  var parseRfc7231DateTime = __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    if (typeof value !== "string") {
      throw new TypeError("RFC-7231 date-times must be expressed as strings");
    }
    let match = IMF_FIXDATE.exec(value);
    if (match) {
      const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
    }
    match = RFC_850_DATE.exec(value);
    if (match) {
      const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
        hours,
        minutes,
        seconds,
        fractionalMilliseconds
      }));
    }
    match = ASC_TIME.exec(value);
    if (match) {
      const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
      return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
    }
    throw new TypeError("Invalid RFC-7231 date-time value");
  }, "parseRfc7231DateTime");
  var parseEpochTimestamp = __name((value) => {
    if (value === null || value === undefined) {
      return;
    }
    let valueAsDouble;
    if (typeof value === "number") {
      valueAsDouble = value;
    } else if (typeof value === "string") {
      valueAsDouble = strictParseDouble(value);
    } else {
      throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
    }
    if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === (-Infinity)) {
      throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
    }
    return new Date(Math.round(valueAsDouble * 1000));
  }, "parseEpochTimestamp");
  var buildDate = __name((year, month, day, time) => {
    const adjustedMonth = month - 1;
    validateDayOfMonth(year, adjustedMonth, day);
    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
  }, "buildDate");
  var parseTwoDigitYear = __name((value) => {
    const thisYear = (new Date()).getUTCFullYear();
    const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));
    if (valueInThisCentury < thisYear) {
      return valueInThisCentury + 100;
    }
    return valueInThisCentury;
  }, "parseTwoDigitYear");
  var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1000;
  var adjustRfc850Year = __name((input) => {
    if (input.getTime() - (new Date()).getTime() > FIFTY_YEARS_IN_MILLIS) {
      return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
    }
    return input;
  }, "adjustRfc850Year");
  var parseMonthByShortName = __name((value) => {
    const monthIdx = MONTHS.indexOf(value);
    if (monthIdx < 0) {
      throw new TypeError(`Invalid month: ${value}`);
    }
    return monthIdx + 1;
  }, "parseMonthByShortName");
  var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  var validateDayOfMonth = __name((year, month, day) => {
    let maxDays = DAYS_IN_MONTH[month];
    if (month === 1 && isLeapYear(year)) {
      maxDays = 29;
    }
    if (day > maxDays) {
      throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
    }
  }, "validateDayOfMonth");
  var isLeapYear = __name((year) => {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
  }, "isLeapYear");
  var parseDateValue = __name((value, type, lower, upper) => {
    const dateVal = strictParseByte(stripLeadingZeroes(value));
    if (dateVal < lower || dateVal > upper) {
      throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
    }
    return dateVal;
  }, "parseDateValue");
  var parseMilliseconds = __name((value) => {
    if (value === null || value === undefined) {
      return 0;
    }
    return strictParseFloat32("0." + value) * 1000;
  }, "parseMilliseconds");
  var parseOffsetToMilliseconds = __name((value) => {
    const directionStr = value[0];
    let direction = 1;
    if (directionStr == "+") {
      direction = 1;
    } else if (directionStr == "-") {
      direction = -1;
    } else {
      throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
    }
    const hour = Number(value.substring(1, 3));
    const minute = Number(value.substring(4, 6));
    return direction * (hour * 60 + minute) * 60 * 1000;
  }, "parseOffsetToMilliseconds");
  var stripLeadingZeroes = __name((value) => {
    let idx = 0;
    while (idx < value.length - 1 && value.charAt(idx) === "0") {
      idx++;
    }
    if (idx === 0) {
      return value;
    }
    return value.slice(idx);
  }, "stripLeadingZeroes");
  var _ServiceException = class _ServiceException2 extends Error {
    constructor(options) {
      super(options.message);
      Object.setPrototypeOf(this, _ServiceException2.prototype);
      this.name = options.name;
      this.$fault = options.$fault;
      this.$metadata = options.$metadata;
    }
  };
  __name(_ServiceException, "ServiceException");
  var ServiceException = _ServiceException;
  var decorateServiceException = __name((exception, additions = {}) => {
    Object.entries(additions).filter(([, v]) => v !== undefined).forEach(([k, v]) => {
      if (exception[k] == undefined || exception[k] === "") {
        exception[k] = v;
      }
    });
    const message = exception.message || exception.Message || "UnknownError";
    exception.message = message;
    delete exception.Message;
    return exception;
  }, "decorateServiceException");
  var throwDefaultError = __name(({ output, parsedBody, exceptionCtor, errorCode }) => {
    const $metadata = deserializeMetadata(output);
    const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
    const response = new exceptionCtor({
      name: (parsedBody == null ? undefined : parsedBody.code) || (parsedBody == null ? undefined : parsedBody.Code) || errorCode || statusCode || "UnknownError",
      $fault: "client",
      $metadata
    });
    throw decorateServiceException(response, parsedBody);
  }, "throwDefaultError");
  var withBaseException = __name((ExceptionCtor) => {
    return ({ output, parsedBody, errorCode }) => {
      throwDefaultError({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });
    };
  }, "withBaseException");
  var deserializeMetadata = __name((output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  }), "deserializeMetadata");
  var loadConfigsForDefaultMode = __name((mode) => {
    switch (mode) {
      case "standard":
        return {
          retryMode: "standard",
          connectionTimeout: 3100
        };
      case "in-region":
        return {
          retryMode: "standard",
          connectionTimeout: 1100
        };
      case "cross-region":
        return {
          retryMode: "standard",
          connectionTimeout: 3100
        };
      case "mobile":
        return {
          retryMode: "standard",
          connectionTimeout: 30000
        };
      default:
        return {};
    }
  }, "loadConfigsForDefaultMode");
  var warningEmitted = false;
  var emitWarningIfUnsupportedVersion = __name((version) => {
    if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf("."))) < 14) {
      warningEmitted = true;
    }
  }, "emitWarningIfUnsupportedVersion");
  var getChecksumConfiguration = __name((runtimeConfig) => {
    const checksumAlgorithms = [];
    for (const id in import_types.AlgorithmId) {
      const algorithmId = import_types.AlgorithmId[id];
      if (runtimeConfig[algorithmId] === undefined) {
        continue;
      }
      checksumAlgorithms.push({
        algorithmId: () => algorithmId,
        checksumConstructor: () => runtimeConfig[algorithmId]
      });
    }
    return {
      _checksumAlgorithms: checksumAlgorithms,
      addChecksumAlgorithm(algo) {
        this._checksumAlgorithms.push(algo);
      },
      checksumAlgorithms() {
        return this._checksumAlgorithms;
      }
    };
  }, "getChecksumConfiguration");
  var resolveChecksumRuntimeConfig = __name((clientConfig) => {
    const runtimeConfig = {};
    clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
      runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
    });
    return runtimeConfig;
  }, "resolveChecksumRuntimeConfig");
  var getRetryConfiguration = __name((runtimeConfig) => {
    let _retryStrategy = runtimeConfig.retryStrategy;
    return {
      setRetryStrategy(retryStrategy) {
        _retryStrategy = retryStrategy;
      },
      retryStrategy() {
        return _retryStrategy;
      }
    };
  }, "getRetryConfiguration");
  var resolveRetryRuntimeConfig = __name((retryStrategyConfiguration) => {
    const runtimeConfig = {};
    runtimeConfig.retryStrategy = retryStrategyConfiguration.retryStrategy();
    return runtimeConfig;
  }, "resolveRetryRuntimeConfig");
  var getDefaultExtensionConfiguration = __name((runtimeConfig) => {
    return {
      ...getChecksumConfiguration(runtimeConfig),
      ...getRetryConfiguration(runtimeConfig)
    };
  }, "getDefaultExtensionConfiguration");
  var getDefaultClientConfiguration = getDefaultExtensionConfiguration;
  var resolveDefaultRuntimeConfig = __name((config) => {
    return {
      ...resolveChecksumRuntimeConfig(config),
      ...resolveRetryRuntimeConfig(config)
    };
  }, "resolveDefaultRuntimeConfig");
  __name(extendedEncodeURIComponent, "extendedEncodeURIComponent");
  var getArrayIfSingleItem = __name((mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray], "getArrayIfSingleItem");
  var getValueFromTextNode = __name((obj) => {
    const textNodeName = "#text";
    for (const key in obj) {
      if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== undefined) {
        obj[key] = obj[key][textNodeName];
      } else if (typeof obj[key] === "object" && obj[key] !== null) {
        obj[key] = getValueFromTextNode(obj[key]);
      }
    }
    return obj;
  }, "getValueFromTextNode");
  var StringWrapper = __name(function() {
    const Class = Object.getPrototypeOf(this).constructor;
    const Constructor = Function.bind.apply(String, [null, ...arguments]);
    const instance = new Constructor;
    Object.setPrototypeOf(instance, Class.prototype);
    return instance;
  }, "StringWrapper");
  StringWrapper.prototype = Object.create(String.prototype, {
    constructor: {
      value: StringWrapper,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  Object.setPrototypeOf(StringWrapper, String);
  var _LazyJsonString = class _LazyJsonString2 extends StringWrapper {
    deserializeJSON() {
      return JSON.parse(super.toString());
    }
    toJSON() {
      return super.toString();
    }
    static fromObject(object) {
      if (object instanceof _LazyJsonString2) {
        return object;
      } else if (object instanceof String || typeof object === "string") {
        return new _LazyJsonString2(object);
      }
      return new _LazyJsonString2(JSON.stringify(object));
    }
  };
  __name(_LazyJsonString, "LazyJsonString");
  var LazyJsonString = _LazyJsonString;
  __name(map, "map");
  var convertMap = __name((target) => {
    const output = {};
    for (const [k, v] of Object.entries(target || {})) {
      output[k] = [, v];
    }
    return output;
  }, "convertMap");
  var take = __name((source, instructions) => {
    const out = {};
    for (const key in instructions) {
      applyInstruction(out, source, instructions, key);
    }
    return out;
  }, "take");
  var mapWithFilter = __name((target, filter, instructions) => {
    return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
      if (Array.isArray(value)) {
        _instructions[key] = value;
      } else {
        if (typeof value === "function") {
          _instructions[key] = [filter, value()];
        } else {
          _instructions[key] = [filter, value];
        }
      }
      return _instructions;
    }, {}));
  }, "mapWithFilter");
  var applyInstruction = __name((target, source, instructions, targetKey) => {
    if (source !== null) {
      let instruction = instructions[targetKey];
      if (typeof instruction === "function") {
        instruction = [, instruction];
      }
      const [filter2 = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
      if (typeof filter2 === "function" && filter2(source[sourceKey]) || typeof filter2 !== "function" && !!filter2) {
        target[targetKey] = valueFn(source[sourceKey]);
      }
      return;
    }
    let [filter, value] = instructions[targetKey];
    if (typeof value === "function") {
      let _value;
      const defaultFilterPassed = filter === undefined && (_value = value()) != null;
      const customFilterPassed = typeof filter === "function" && !!filter(undefined) || typeof filter !== "function" && !!filter;
      if (defaultFilterPassed) {
        target[targetKey] = _value;
      } else if (customFilterPassed) {
        target[targetKey] = value();
      }
    } else {
      const defaultFilterPassed = filter === undefined && value != null;
      const customFilterPassed = typeof filter === "function" && !!filter(value) || typeof filter !== "function" && !!filter;
      if (defaultFilterPassed || customFilterPassed) {
        target[targetKey] = value;
      }
    }
  }, "applyInstruction");
  var nonNullish = __name((_) => _ != null, "nonNullish");
  var pass = __name((_) => _, "pass");
  var resolvedPath = __name((resolvedPath2, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
    if (input != null && input[memberName] !== undefined) {
      const labelValue = labelValueProvider();
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
      }
      resolvedPath2 = resolvedPath2.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment) => extendedEncodeURIComponent(segment)).join("/") : extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: " + memberName + ".");
    }
    return resolvedPath2;
  }, "resolvedPath");
  var serializeFloat = __name((value) => {
    if (value !== value) {
      return "NaN";
    }
    switch (value) {
      case Infinity:
        return "Infinity";
      case (-Infinity):
        return "-Infinity";
      default:
        return value;
    }
  }, "serializeFloat");
  var _json = __name((obj) => {
    if (obj == null) {
      return {};
    }
    if (Array.isArray(obj)) {
      return obj.filter((_) => _ != null).map(_json);
    }
    if (typeof obj === "object") {
      const target = {};
      for (const key of Object.keys(obj)) {
        if (obj[key] == null) {
          continue;
        }
        target[key] = _json(obj[key]);
      }
      return target;
    }
    return obj;
  }, "_json");
  __name(splitEvery, "splitEvery");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset
var require_tslib = __commonJS((exports, module) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports2) {
        factory(createExporter(root, createExporter(exports2)));
      });
    } else if (typeof module === "object" && typeof exports === "object") {
      factory(createExporter(root, createExporter(exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports2, previous) {
      if (exports2 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports2, "__esModule", { value: true });
        } else {
          exports2.__esModule = true;
        }
      }
      return function(id, v) {
        return exports2[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __);
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length;i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s);i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1;i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), throw: verb(1), return: verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : undefined, done: true };
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === undefined)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar = function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !exports2.hasOwnProperty(p))
          exports2[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = undefined;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === undefined || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0;i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length;i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0;i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length;j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({ value: v2, done: d });
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", { value: raw });
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : { default: mod };
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset
var require_pureJs = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.toUtf8 = exports.fromUtf8 = undefined;
  var fromUtf8 = (input) => {
    const bytes = [];
    for (let i = 0, len = input.length;i < len; i++) {
      const value = input.charCodeAt(i);
      if (value < 128) {
        bytes.push(value);
      } else if (value < 2048) {
        bytes.push(value >> 6 | 192, value & 63 | 128);
      } else if (i + 1 < input.length && (value & 64512) === 55296 && (input.charCodeAt(i + 1) & 64512) === 56320) {
        const surrogatePair = 65536 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
        bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
      } else {
        bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
      }
    }
    return Uint8Array.from(bytes);
  };
  exports.fromUtf8 = fromUtf8;
  var toUtf8 = (input) => {
    let decoded = "";
    for (let i = 0, len = input.length;i < len; i++) {
      const byte = input[i];
      if (byte < 128) {
        decoded += String.fromCharCode(byte);
      } else if (192 <= byte && byte < 224) {
        const nextByte = input[++i];
        decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
      } else if (240 <= byte && byte < 365) {
        const surrogatePair = [byte, input[++i], input[++i], input[++i]];
        const encoded = "%" + surrogatePair.map((byteValue) => byteValue.toString(16)).join("%");
        decoded += decodeURIComponent(encoded);
      } else {
        decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);
      }
    }
    return decoded;
  };
  exports.toUtf8 = toUtf8;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.j
var require_whatwgEncodingApi = __commonJS((exports) => {
  var fromUtf8 = function(input) {
    return new TextEncoder().encode(input);
  };
  var toUtf8 = function(input) {
    return new TextDecoder("utf-8").decode(input);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.toUtf8 = exports.fromUtf8 = undefined;
  exports.fromUtf8 = fromUtf8;
  exports.toUtf8 = toUtf8;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rulese
var require_dist_cjs17 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.toUtf8 = exports.fromUtf8 = undefined;
  var pureJs_1 = require_pureJs();
  var whatwgEncodingApi_1 = require_whatwgEncodingApi();
  var fromUtf8 = (input) => typeof TextEncoder === "function" ? (0, whatwgEncodingApi_1.fromUtf8)(input) : (0, pureJs_1.fromUtf8)(input);
  exports.fromUtf8 = fromUtf8;
  var toUtf8 = (input) => typeof TextDecoder === "function" ? (0, whatwgEncodingApi_1.toUtf8)(input) : (0, pureJs_1.toUtf8)(input);
  exports.toUtf8 = toUtf8;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rul
var require_convertToBuffer = __commonJS((exports) => {
  var convertToBuffer = function(data) {
    if (data instanceof Uint8Array)
      return data;
    if (typeof data === "string") {
      return fromUtf8(data);
    }
    if (ArrayBuffer.isView(data)) {
      return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }
    return new Uint8Array(data);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.convertToBuffer = undefined;
  var util_utf8_browser_1 = require_dist_cjs17();
  var fromUtf8 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
    return Buffer.from(input, "utf8");
  } : util_utf8_browser_1.fromUtf8;
  exports.convertToBuffer = convertToBuffer;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint
var require_isEmptyData = __commonJS((exports) => {
  var isEmptyData = function(data) {
    if (typeof data === "string") {
      return data.length === 0;
    }
    return data.byteLength === 0;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isEmptyData = undefined;
  exports.isEmptyData = isEmptyData;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoin
var require_numToUint8 = __commonJS((exports) => {
  var numToUint8 = function(num) {
    return new Uint8Array([
      (num & 4278190080) >> 24,
      (num & 16711680) >> 16,
      (num & 65280) >> 8,
      num & 255
    ]);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.numToUint8 = undefined;
  exports.numToUint8 = numToUint8;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rul
var require_uint32ArrayFrom = __commonJS((exports) => {
  var uint32ArrayFrom = function(a_lookUpTable) {
    if (!Uint32Array.from) {
      var return_array = new Uint32Array(a_lookUpTable.length);
      var a_index = 0;
      while (a_index < a_lookUpTable.length) {
        return_array[a_index] = a_lookUpTable[a_index];
        a_index += 1;
      }
      return return_array;
    }
    return Uint32Array.from(a_lookUpTable);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.uint32ArrayFrom = undefined;
  exports.uint32ArrayFrom = uint32ArrayFrom;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/en
var require_build = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = undefined;
  var convertToBuffer_1 = require_convertToBuffer();
  Object.defineProperty(exports, "convertToBuffer", { enumerable: true, get: function() {
    return convertToBuffer_1.convertToBuffer;
  } });
  var isEmptyData_1 = require_isEmptyData();
  Object.defineProperty(exports, "isEmptyData", { enumerable: true, get: function() {
    return isEmptyData_1.isEmptyData;
  } });
  var numToUint8_1 = require_numToUint8();
  Object.defineProperty(exports, "numToUint8", { enumerable: true, get: function() {
    return numToUint8_1.numToUint8;
  } });
  var uint32ArrayFrom_1 = require_uint32ArrayFrom();
  Object.defineProperty(exports, "uint32ArrayFrom", { enumerable: true, get: function() {
    return uint32ArrayFrom_1.uint32ArrayFrom;
  } });
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoin
var require_aws_crc32 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.AwsCrc32 = undefined;
  var tslib_1 = require_tslib();
  var util_1 = require_build();
  var index_1 = require_build2();
  var AwsCrc32 = function() {
    function AwsCrc322() {
      this.crc32 = new index_1.Crc32;
    }
    AwsCrc322.prototype.update = function(toHash) {
      if ((0, util_1.isEmptyData)(toHash))
        return;
      this.crc32.update((0, util_1.convertToBuffer)(toHash));
    };
    AwsCrc322.prototype.digest = function() {
      return tslib_1.__awaiter(this, undefined, undefined, function() {
        return tslib_1.__generator(this, function(_a) {
          return [2, (0, util_1.numToUint8)(this.crc32.digest())];
        });
      });
    };
    AwsCrc322.prototype.reset = function() {
      this.crc32 = new index_1.Crc32;
    };
    return AwsCrc322;
  }();
  exports.AwsCrc32 = AwsCrc32;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/end
var require_build2 = __commonJS((exports) => {
  var crc32 = function(data) {
    return new Crc32().update(data).digest();
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.AwsCrc32 = exports.Crc32 = exports.crc32 = undefined;
  var tslib_1 = require_tslib();
  var util_1 = require_build();
  exports.crc32 = crc32;
  var Crc32 = function() {
    function Crc322() {
      this.checksum = 4294967295;
    }
    Crc322.prototype.update = function(data) {
      var e_1, _a;
      try {
        for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next();!data_1_1.done; data_1_1 = data_1.next()) {
          var byte = data_1_1.value;
          this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (data_1_1 && !data_1_1.done && (_a = data_1.return))
            _a.call(data_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return this;
    };
    Crc322.prototype.digest = function() {
      return (this.checksum ^ 4294967295) >>> 0;
    };
    return Crc322;
  }();
  exports.Crc32 = Crc32;
  var a_lookUpTable = [
    0,
    1996959894,
    3993919788,
    2567524794,
    124634137,
    1886057615,
    3915621685,
    2657392035,
    249268274,
    2044508324,
    3772115230,
    2547177864,
    162941995,
    2125561021,
    3887607047,
    2428444049,
    498536548,
    1789927666,
    4089016648,
    2227061214,
    450548861,
    1843258603,
    4107580753,
    2211677639,
    325883990,
    1684777152,
    4251122042,
    2321926636,
    335633487,
    1661365465,
    4195302755,
    2366115317,
    997073096,
    1281953886,
    3579855332,
    2724688242,
    1006888145,
    1258607687,
    3524101629,
    2768942443,
    901097722,
    1119000684,
    3686517206,
    2898065728,
    853044451,
    1172266101,
    3705015759,
    2882616665,
    651767980,
    1373503546,
    3369554304,
    3218104598,
    565507253,
    1454621731,
    3485111705,
    3099436303,
    671266974,
    1594198024,
    3322730930,
    2970347812,
    795835527,
    1483230225,
    3244367275,
    3060149565,
    1994146192,
    31158534,
    2563907772,
    4023717930,
    1907459465,
    112637215,
    2680153253,
    3904427059,
    2013776290,
    251722036,
    2517215374,
    3775830040,
    2137656763,
    141376813,
    2439277719,
    3865271297,
    1802195444,
    476864866,
    2238001368,
    4066508878,
    1812370925,
    453092731,
    2181625025,
    4111451223,
    1706088902,
    314042704,
    2344532202,
    4240017532,
    1658658271,
    366619977,
    2362670323,
    4224994405,
    1303535960,
    984961486,
    2747007092,
    3569037538,
    1256170817,
    1037604311,
    2765210733,
    3554079995,
    1131014506,
    879679996,
    2909243462,
    3663771856,
    1141124467,
    855842277,
    2852801631,
    3708648649,
    1342533948,
    654459306,
    3188396048,
    3373015174,
    1466479909,
    544179635,
    3110523913,
    3462522015,
    1591671054,
    702138776,
    2966460450,
    3352799412,
    1504918807,
    783551873,
    3082640443,
    3233442989,
    3988292384,
    2596254646,
    62317068,
    1957810842,
    3939845945,
    2647816111,
    81470997,
    1943803523,
    3814918930,
    2489596804,
    225274430,
    2053790376,
    3826175755,
    2466906013,
    167816743,
    2097651377,
    4027552580,
    2265490386,
    503444072,
    1762050814,
    4150417245,
    2154129355,
    426522225,
    1852507879,
    4275313526,
    2312317920,
    282753626,
    1742555852,
    4189708143,
    2394877945,
    397917763,
    1622183637,
    3604390888,
    2714866558,
    953729732,
    1340076626,
    3518719985,
    2797360999,
    1068828381,
    1219638859,
    3624741850,
    2936675148,
    906185462,
    1090812512,
    3747672003,
    2825379669,
    829329135,
    1181335161,
    3412177804,
    3160834842,
    628085408,
    1382605366,
    3423369109,
    3138078467,
    570562233,
    1426400815,
    3317316542,
    2998733608,
    733239954,
    1555261956,
    3268935591,
    3050360625,
    752459403,
    1541320221,
    2607071920,
    3965973030,
    1969922972,
    40735498,
    2617837225,
    3943577151,
    1913087877,
    83908371,
    2512341634,
    3803740692,
    2075208622,
    213261112,
    2463272603,
    3855990285,
    2094854071,
    198958881,
    2262029012,
    4057260610,
    1759359992,
    534414190,
    2176718541,
    4139329115,
    1873836001,
    414664567,
    2282248934,
    4279200368,
    1711684554,
    285281116,
    2405801727,
    4167216745,
    1634467795,
    376229701,
    2685067896,
    3608007406,
    1308918612,
    956543938,
    2808555105,
    3495958263,
    1231636301,
    1047427035,
    2932959818,
    3654703836,
    1088359270,
    936918000,
    2847714899,
    3736837829,
    1202900863,
    817233897,
    3183342108,
    3401237130,
    1404277552,
    615818150,
    3134207493,
    3453421203,
    1423857449,
    601450431,
    3009837614,
    3294710456,
    1567103746,
    711928724,
    3020668471,
    3272380065,
    1510334235,
    755167117
  ];
  var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);
  var aws_crc32_1 = require_aws_crc32();
  Object.defineProperty(exports, "AwsCrc32", { enumerable: true, get: function() {
    return aws_crc32_1.AwsCrc32;
  } });
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rules
var require_dist_cjs18 = __commonJS((exports, module) => {
  var fromHex = function(encoded) {
    if (encoded.length % 2 !== 0) {
      throw new Error("Hex encoded strings must have an even number length");
    }
    const out = new Uint8Array(encoded.length / 2);
    for (let i = 0;i < encoded.length; i += 2) {
      const encodedByte = encoded.slice(i, i + 2).toLowerCase();
      if (encodedByte in HEX_TO_SHORT) {
        out[i / 2] = HEX_TO_SHORT[encodedByte];
      } else {
        throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
      }
    }
    return out;
  };
  var toHex = function(bytes) {
    let out = "";
    for (let i = 0;i < bytes.byteLength; i++) {
      out += SHORT_TO_HEX[bytes[i]];
    }
    return out;
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    fromHex: () => fromHex,
    toHex: () => toHex
  });
  module.exports = __toCommonJS(src_exports);
  var SHORT_TO_HEX = {};
  var HEX_TO_SHORT = {};
  for (let i = 0;i < 256; i++) {
    let encodedByte = i.toString(16).toLowerCase();
    if (encodedByte.length === 1) {
      encodedByte = `0${encodedByte}`;
    }
    SHORT_TO_HEX[i] = encodedByte;
    HEX_TO_SHORT[encodedByte] = i;
  }
  __name(fromHex, "fromHex");
  __name(toHex, "toHex");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rules
var require_dist_cjs19 = __commonJS((exports, module) => {
  var negate = function(bytes) {
    for (let i = 0;i < 8; i++) {
      bytes[i] ^= 255;
    }
    for (let i = 7;i > -1; i--) {
      bytes[i]++;
      if (bytes[i] !== 0)
        break;
    }
  };
  var splitMessage = function({ byteLength, byteOffset, buffer }) {
    if (byteLength < MINIMUM_MESSAGE_LENGTH) {
      throw new Error("Provided message too short to accommodate event stream message overhead");
    }
    const view = new DataView(buffer, byteOffset, byteLength);
    const messageLength = view.getUint32(0, false);
    if (byteLength !== messageLength) {
      throw new Error("Reported message length does not match received message length");
    }
    const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
    const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
    const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
    const checksummer = new import_crc32.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
    if (expectedPreludeChecksum !== checksummer.digest()) {
      throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);
    }
    checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
    if (expectedMessageChecksum !== checksummer.digest()) {
      throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);
    }
    return {
      headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
      body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))
    };
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    EventStreamCodec: () => EventStreamCodec,
    HeaderMarshaller: () => HeaderMarshaller,
    Int64: () => Int64,
    MessageDecoderStream: () => MessageDecoderStream,
    MessageEncoderStream: () => MessageEncoderStream,
    SmithyMessageDecoderStream: () => SmithyMessageDecoderStream,
    SmithyMessageEncoderStream: () => SmithyMessageEncoderStream
  });
  module.exports = __toCommonJS(src_exports);
  var import_crc322 = require_build2();
  var import_util_hex_encoding = require_dist_cjs18();
  var _Int64 = class _Int642 {
    constructor(bytes) {
      this.bytes = bytes;
      if (bytes.byteLength !== 8) {
        throw new Error("Int64 buffers must be exactly 8 bytes");
      }
    }
    static fromNumber(number) {
      if (number > 9223372036854776000 || number < -9223372036854776000) {
        throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
      }
      const bytes = new Uint8Array(8);
      for (let i = 7, remaining = Math.abs(Math.round(number));i > -1 && remaining > 0; i--, remaining /= 256) {
        bytes[i] = remaining;
      }
      if (number < 0) {
        negate(bytes);
      }
      return new _Int642(bytes);
    }
    valueOf() {
      const bytes = this.bytes.slice(0);
      const negative = bytes[0] & 128;
      if (negative) {
        negate(bytes);
      }
      return parseInt((0, import_util_hex_encoding.toHex)(bytes), 16) * (negative ? -1 : 1);
    }
    toString() {
      return String(this.valueOf());
    }
  };
  __name(_Int64, "Int64");
  var Int64 = _Int64;
  __name(negate, "negate");
  var _HeaderMarshaller = class _HeaderMarshaller2 {
    constructor(toUtf8, fromUtf8) {
      this.toUtf8 = toUtf8;
      this.fromUtf8 = fromUtf8;
    }
    format(headers) {
      const chunks = [];
      for (const headerName of Object.keys(headers)) {
        const bytes = this.fromUtf8(headerName);
        chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
      }
      const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
      let position = 0;
      for (const chunk of chunks) {
        out.set(chunk, position);
        position += chunk.byteLength;
      }
      return out;
    }
    formatHeaderValue(header) {
      switch (header.type) {
        case "boolean":
          return Uint8Array.from([header.value ? 0 : 1]);
        case "byte":
          return Uint8Array.from([2, header.value]);
        case "short":
          const shortView = new DataView(new ArrayBuffer(3));
          shortView.setUint8(0, 3);
          shortView.setInt16(1, header.value, false);
          return new Uint8Array(shortView.buffer);
        case "integer":
          const intView = new DataView(new ArrayBuffer(5));
          intView.setUint8(0, 4);
          intView.setInt32(1, header.value, false);
          return new Uint8Array(intView.buffer);
        case "long":
          const longBytes = new Uint8Array(9);
          longBytes[0] = 5;
          longBytes.set(header.value.bytes, 1);
          return longBytes;
        case "binary":
          const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
          binView.setUint8(0, 6);
          binView.setUint16(1, header.value.byteLength, false);
          const binBytes = new Uint8Array(binView.buffer);
          binBytes.set(header.value, 3);
          return binBytes;
        case "string":
          const utf8Bytes = this.fromUtf8(header.value);
          const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
          strView.setUint8(0, 7);
          strView.setUint16(1, utf8Bytes.byteLength, false);
          const strBytes = new Uint8Array(strView.buffer);
          strBytes.set(utf8Bytes, 3);
          return strBytes;
        case "timestamp":
          const tsBytes = new Uint8Array(9);
          tsBytes[0] = 8;
          tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
          return tsBytes;
        case "uuid":
          if (!UUID_PATTERN.test(header.value)) {
            throw new Error(`Invalid UUID received: ${header.value}`);
          }
          const uuidBytes = new Uint8Array(17);
          uuidBytes[0] = 9;
          uuidBytes.set((0, import_util_hex_encoding.fromHex)(header.value.replace(/\-/g, "")), 1);
          return uuidBytes;
      }
    }
    parse(headers) {
      const out = {};
      let position = 0;
      while (position < headers.byteLength) {
        const nameLength = headers.getUint8(position++);
        const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
        position += nameLength;
        switch (headers.getUint8(position++)) {
          case 0:
            out[name] = {
              type: BOOLEAN_TAG,
              value: true
            };
            break;
          case 1:
            out[name] = {
              type: BOOLEAN_TAG,
              value: false
            };
            break;
          case 2:
            out[name] = {
              type: BYTE_TAG,
              value: headers.getInt8(position++)
            };
            break;
          case 3:
            out[name] = {
              type: SHORT_TAG,
              value: headers.getInt16(position, false)
            };
            position += 2;
            break;
          case 4:
            out[name] = {
              type: INT_TAG,
              value: headers.getInt32(position, false)
            };
            position += 4;
            break;
          case 5:
            out[name] = {
              type: LONG_TAG,
              value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
            };
            position += 8;
            break;
          case 6:
            const binaryLength = headers.getUint16(position, false);
            position += 2;
            out[name] = {
              type: BINARY_TAG,
              value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
            };
            position += binaryLength;
            break;
          case 7:
            const stringLength = headers.getUint16(position, false);
            position += 2;
            out[name] = {
              type: STRING_TAG,
              value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
            };
            position += stringLength;
            break;
          case 8:
            out[name] = {
              type: TIMESTAMP_TAG,
              value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
            };
            position += 8;
            break;
          case 9:
            const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
            position += 16;
            out[name] = {
              type: UUID_TAG,
              value: `${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(0, 4))}-${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(4, 6))}-${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(6, 8))}-${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(8, 10))}-${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(10))}`
            };
            break;
          default:
            throw new Error(`Unrecognized header type tag`);
        }
      }
      return out;
    }
  };
  __name(_HeaderMarshaller, "HeaderMarshaller");
  var HeaderMarshaller = _HeaderMarshaller;
  var BOOLEAN_TAG = "boolean";
  var BYTE_TAG = "byte";
  var SHORT_TAG = "short";
  var INT_TAG = "integer";
  var LONG_TAG = "long";
  var BINARY_TAG = "binary";
  var STRING_TAG = "string";
  var TIMESTAMP_TAG = "timestamp";
  var UUID_TAG = "uuid";
  var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
  var import_crc32 = require_build2();
  var PRELUDE_MEMBER_LENGTH = 4;
  var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
  var CHECKSUM_LENGTH = 4;
  var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
  __name(splitMessage, "splitMessage");
  var _EventStreamCodec = class _EventStreamCodec2 {
    constructor(toUtf8, fromUtf8) {
      this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);
      this.messageBuffer = [];
      this.isEndOfStream = false;
    }
    feed(message) {
      this.messageBuffer.push(this.decode(message));
    }
    endOfStream() {
      this.isEndOfStream = true;
    }
    getMessage() {
      const message = this.messageBuffer.pop();
      const isEndOfStream = this.isEndOfStream;
      return {
        getMessage() {
          return message;
        },
        isEndOfStream() {
          return isEndOfStream;
        }
      };
    }
    getAvailableMessages() {
      const messages = this.messageBuffer;
      this.messageBuffer = [];
      const isEndOfStream = this.isEndOfStream;
      return {
        getMessages() {
          return messages;
        },
        isEndOfStream() {
          return isEndOfStream;
        }
      };
    }
    encode({ headers: rawHeaders, body }) {
      const headers = this.headerMarshaller.format(rawHeaders);
      const length = headers.byteLength + body.byteLength + 16;
      const out = new Uint8Array(length);
      const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
      const checksum = new import_crc322.Crc32;
      view.setUint32(0, length, false);
      view.setUint32(4, headers.byteLength, false);
      view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
      out.set(headers, 12);
      out.set(body, headers.byteLength + 12);
      view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
      return out;
    }
    decode(message) {
      const { headers, body } = splitMessage(message);
      return { headers: this.headerMarshaller.parse(headers), body };
    }
    formatHeaders(rawHeaders) {
      return this.headerMarshaller.format(rawHeaders);
    }
  };
  __name(_EventStreamCodec, "EventStreamCodec");
  var EventStreamCodec = _EventStreamCodec;
  var _MessageDecoderStream = class _MessageDecoderStream2 {
    constructor(options) {
      this.options = options;
    }
    [Symbol.asyncIterator]() {
      return this.asyncIterator();
    }
    async* asyncIterator() {
      for await (const bytes of this.options.inputStream) {
        const decoded = this.options.decoder.decode(bytes);
        yield decoded;
      }
    }
  };
  __name(_MessageDecoderStream, "MessageDecoderStream");
  var MessageDecoderStream = _MessageDecoderStream;
  var _MessageEncoderStream = class _MessageEncoderStream2 {
    constructor(options) {
      this.options = options;
    }
    [Symbol.asyncIterator]() {
      return this.asyncIterator();
    }
    async* asyncIterator() {
      for await (const msg of this.options.messageStream) {
        const encoded = this.options.encoder.encode(msg);
        yield encoded;
      }
      if (this.options.includeEndFrame) {
        yield new Uint8Array(0);
      }
    }
  };
  __name(_MessageEncoderStream, "MessageEncoderStream");
  var MessageEncoderStream = _MessageEncoderStream;
  var _SmithyMessageDecoderStream = class _SmithyMessageDecoderStream2 {
    constructor(options) {
      this.options = options;
    }
    [Symbol.asyncIterator]() {
      return this.asyncIterator();
    }
    async* asyncIterator() {
      for await (const message of this.options.messageStream) {
        const deserialized = await this.options.deserializer(message);
        if (deserialized === undefined)
          continue;
        yield deserialized;
      }
    }
  };
  __name(_SmithyMessageDecoderStream, "SmithyMessageDecoderStream");
  var SmithyMessageDecoderStream = _SmithyMessageDecoderStream;
  var _SmithyMessageEncoderStream = class _SmithyMessageEncoderStream2 {
    constructor(options) {
      this.options = options;
    }
    [Symbol.asyncIterator]() {
      return this.asyncIterator();
    }
    async* asyncIterator() {
      for await (const chunk of this.options.inputStream) {
        const payloadBuf = this.options.serializer(chunk);
        yield payloadBuf;
      }
    }
  };
  __name(_SmithyMessageEncoderStream, "SmithyMessageEncoderStream");
  var SmithyMessageEncoderStream = _SmithyMessageEncoderStream;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rul
var require_dist_cjs20 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    getSmithyContext: () => getSmithyContext2,
    normalizeProvider: () => normalizeProvider
  });
  module.exports = __toCommonJS(src_exports);
  var import_types = require_dist_cjs();
  var getSmithyContext2 = __name((context) => context[import_types.SMITHY_CONTEXT_KEY] || (context[import_types.SMITHY_CONTEXT_KEY] = {}), "getSmithyContext");
  var normalizeProvider = __name((input) => {
    if (typeof input === "function")
      return input;
    const promisified = Promise.resolve(input);
    return () => promisified;
  }, "normalizeProvider");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/
var require_dist_cjs21 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    SignatureV4: () => SignatureV4,
    clearCredentialCache: () => clearCredentialCache,
    createScope: () => createScope,
    getCanonicalHeaders: () => getCanonicalHeaders,
    getCanonicalQuery: () => getCanonicalQuery,
    getPayloadHash: () => getPayloadHash,
    getSigningKey: () => getSigningKey,
    moveHeadersToQuery: () => moveHeadersToQuery,
    prepareRequest: () => prepareRequest
  });
  module.exports = __toCommonJS(src_exports);
  var import_eventstream_codec = require_dist_cjs19();
  var import_util_middleware = require_dist_cjs20();
  var import_util_utf83 = require_dist_cjs11();
  var ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
  var CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
  var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
  var SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
  var EXPIRES_QUERY_PARAM = "X-Amz-Expires";
  var SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
  var TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
  var AUTH_HEADER = "authorization";
  var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
  var DATE_HEADER = "date";
  var GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
  var SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
  var SHA256_HEADER = "x-amz-content-sha256";
  var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
  var ALWAYS_UNSIGNABLE_HEADERS = {
    authorization: true,
    "cache-control": true,
    connection: true,
    expect: true,
    from: true,
    "keep-alive": true,
    "max-forwards": true,
    pragma: true,
    referer: true,
    te: true,
    trailer: true,
    "transfer-encoding": true,
    upgrade: true,
    "user-agent": true,
    "x-amzn-trace-id": true
  };
  var PROXY_HEADER_PATTERN = /^proxy-/;
  var SEC_HEADER_PATTERN = /^sec-/;
  var ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
  var EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
  var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
  var MAX_CACHE_SIZE = 50;
  var KEY_TYPE_IDENTIFIER = "aws4_request";
  var MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  var import_util_hex_encoding = require_dist_cjs18();
  var import_util_utf8 = require_dist_cjs11();
  var signingKeyCache = {};
  var cacheQueue = [];
  var createScope = __name((shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`, "createScope");
  var getSigningKey = __name(async (sha256Constructor, credentials, shortDate, region, service) => {
    const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
    const cacheKey = `${shortDate}:${region}:${service}:${(0, import_util_hex_encoding.toHex)(credsHash)}:${credentials.sessionToken}`;
    if (cacheKey in signingKeyCache) {
      return signingKeyCache[cacheKey];
    }
    cacheQueue.push(cacheKey);
    while (cacheQueue.length > MAX_CACHE_SIZE) {
      delete signingKeyCache[cacheQueue.shift()];
    }
    let key = `AWS4${credentials.secretAccessKey}`;
    for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {
      key = await hmac(sha256Constructor, key, signable);
    }
    return signingKeyCache[cacheKey] = key;
  }, "getSigningKey");
  var clearCredentialCache = __name(() => {
    cacheQueue.length = 0;
    Object.keys(signingKeyCache).forEach((cacheKey) => {
      delete signingKeyCache[cacheKey];
    });
  }, "clearCredentialCache");
  var hmac = __name((ctor, secret, data) => {
    const hash = new ctor(secret);
    hash.update((0, import_util_utf8.toUint8Array)(data));
    return hash.digest();
  }, "hmac");
  var getCanonicalHeaders = __name(({ headers }, unsignableHeaders, signableHeaders) => {
    const canonical = {};
    for (const headerName of Object.keys(headers).sort()) {
      if (headers[headerName] == undefined) {
        continue;
      }
      const canonicalHeaderName = headerName.toLowerCase();
      if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders == null ? undefined : unsignableHeaders.has(canonicalHeaderName)) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
        if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
          continue;
        }
      }
      canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
    }
    return canonical;
  }, "getCanonicalHeaders");
  var import_util_uri_escape = require_dist_cjs12();
  var getCanonicalQuery = __name(({ query = {} }) => {
    const keys = [];
    const serialized = {};
    for (const key of Object.keys(query).sort()) {
      if (key.toLowerCase() === SIGNATURE_HEADER) {
        continue;
      }
      keys.push(key);
      const value = query[key];
      if (typeof value === "string") {
        serialized[key] = `${(0, import_util_uri_escape.escapeUri)(key)}=${(0, import_util_uri_escape.escapeUri)(value)}`;
      } else if (Array.isArray(value)) {
        serialized[key] = value.slice(0).reduce((encoded, value2) => encoded.concat([`${(0, import_util_uri_escape.escapeUri)(key)}=${(0, import_util_uri_escape.escapeUri)(value2)}`]), []).sort().join("&");
      }
    }
    return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
  }, "getCanonicalQuery");
  var import_is_array_buffer = require_dist_cjs8();
  var import_util_utf82 = require_dist_cjs11();
  var getPayloadHash = __name(async ({ headers, body }, hashConstructor) => {
    for (const headerName of Object.keys(headers)) {
      if (headerName.toLowerCase() === SHA256_HEADER) {
        return headers[headerName];
      }
    }
    if (body == undefined) {
      return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
    } else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, import_is_array_buffer.isArrayBuffer)(body)) {
      const hashCtor = new hashConstructor;
      hashCtor.update((0, import_util_utf82.toUint8Array)(body));
      return (0, import_util_hex_encoding.toHex)(await hashCtor.digest());
    }
    return UNSIGNED_PAYLOAD;
  }, "getPayloadHash");
  var hasHeader = __name((soughtHeader, headers) => {
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)) {
      if (soughtHeader === headerName.toLowerCase()) {
        return true;
      }
    }
    return false;
  }, "hasHeader");
  var cloneRequest = __name(({ headers, query, ...rest }) => ({
    ...rest,
    headers: { ...headers },
    query: query ? cloneQuery(query) : undefined
  }), "cloneRequest");
  var cloneQuery = __name((query) => Object.keys(query).reduce((carry, paramName) => {
    const param = query[paramName];
    return {
      ...carry,
      [paramName]: Array.isArray(param) ? [...param] : param
    };
  }, {}), "cloneQuery");
  var moveHeadersToQuery = __name((request, options = {}) => {
    var _a;
    const { headers, query = {} } = typeof request.clone === "function" ? request.clone() : cloneRequest(request);
    for (const name of Object.keys(headers)) {
      const lname = name.toLowerCase();
      if (lname.slice(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) == null ? undefined : _a.has(lname))) {
        query[name] = headers[name];
        delete headers[name];
      }
    }
    return {
      ...request,
      headers,
      query
    };
  }, "moveHeadersToQuery");
  var prepareRequest = __name((request) => {
    request = typeof request.clone === "function" ? request.clone() : cloneRequest(request);
    for (const headerName of Object.keys(request.headers)) {
      if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
        delete request.headers[headerName];
      }
    }
    return request;
  }, "prepareRequest");
  var iso8601 = __name((time) => toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z"), "iso8601");
  var toDate = __name((time) => {
    if (typeof time === "number") {
      return new Date(time * 1000);
    }
    if (typeof time === "string") {
      if (Number(time)) {
        return new Date(Number(time) * 1000);
      }
      return new Date(time);
    }
    return time;
  }, "toDate");
  var _SignatureV4 = class _SignatureV42 {
    constructor({
      applyChecksum,
      credentials,
      region,
      service,
      sha256,
      uriEscapePath = true
    }) {
      this.headerMarshaller = new import_eventstream_codec.HeaderMarshaller(import_util_utf83.toUtf8, import_util_utf83.fromUtf8);
      this.service = service;
      this.sha256 = sha256;
      this.uriEscapePath = uriEscapePath;
      this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
      this.regionProvider = (0, import_util_middleware.normalizeProvider)(region);
      this.credentialProvider = (0, import_util_middleware.normalizeProvider)(credentials);
    }
    async presign(originalRequest, options = {}) {
      const {
        signingDate = new Date,
        expiresIn = 3600,
        unsignableHeaders,
        unhoistableHeaders,
        signableHeaders,
        signingRegion,
        signingService
      } = options;
      const credentials = await this.credentialProvider();
      this.validateResolvedCredentials(credentials);
      const region = signingRegion ?? await this.regionProvider();
      const { longDate, shortDate } = formatDate(signingDate);
      if (expiresIn > MAX_PRESIGNED_TTL) {
        return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
      }
      const scope = createScope(shortDate, region, signingService ?? this.service);
      const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders });
      if (credentials.sessionToken) {
        request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
      }
      request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
      request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
      request.query[AMZ_DATE_QUERY_PARAM] = longDate;
      request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
      const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
      request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
      request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));
      return request;
    }
    async sign(toSign, options) {
      if (typeof toSign === "string") {
        return this.signString(toSign, options);
      } else if (toSign.headers && toSign.payload) {
        return this.signEvent(toSign, options);
      } else if (toSign.message) {
        return this.signMessage(toSign, options);
      } else {
        return this.signRequest(toSign, options);
      }
    }
    async signEvent({ headers, payload }, { signingDate = new Date, priorSignature, signingRegion, signingService }) {
      const region = signingRegion ?? await this.regionProvider();
      const { shortDate, longDate } = formatDate(signingDate);
      const scope = createScope(shortDate, region, signingService ?? this.service);
      const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);
      const hash = new this.sha256;
      hash.update(headers);
      const hashedHeaders = (0, import_util_hex_encoding.toHex)(await hash.digest());
      const stringToSign = [
        EVENT_ALGORITHM_IDENTIFIER,
        longDate,
        scope,
        priorSignature,
        hashedHeaders,
        hashedPayload
      ].join("\n");
      return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
    }
    async signMessage(signableMessage, { signingDate = new Date, signingRegion, signingService }) {
      const promise = this.signEvent({
        headers: this.headerMarshaller.format(signableMessage.message.headers),
        payload: signableMessage.message.body
      }, {
        signingDate,
        signingRegion,
        signingService,
        priorSignature: signableMessage.priorSignature
      });
      return promise.then((signature) => {
        return { message: signableMessage.message, signature };
      });
    }
    async signString(stringToSign, { signingDate = new Date, signingRegion, signingService } = {}) {
      const credentials = await this.credentialProvider();
      this.validateResolvedCredentials(credentials);
      const region = signingRegion ?? await this.regionProvider();
      const { shortDate } = formatDate(signingDate);
      const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
      hash.update((0, import_util_utf83.toUint8Array)(stringToSign));
      return (0, import_util_hex_encoding.toHex)(await hash.digest());
    }
    async signRequest(requestToSign, {
      signingDate = new Date,
      signableHeaders,
      unsignableHeaders,
      signingRegion,
      signingService
    } = {}) {
      const credentials = await this.credentialProvider();
      this.validateResolvedCredentials(credentials);
      const region = signingRegion ?? await this.regionProvider();
      const request = prepareRequest(requestToSign);
      const { longDate, shortDate } = formatDate(signingDate);
      const scope = createScope(shortDate, region, signingService ?? this.service);
      request.headers[AMZ_DATE_HEADER] = longDate;
      if (credentials.sessionToken) {
        request.headers[TOKEN_HEADER] = credentials.sessionToken;
      }
      const payloadHash = await getPayloadHash(request, this.sha256);
      if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {
        request.headers[SHA256_HEADER] = payloadHash;
      }
      const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
      const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
      request.headers[AUTH_HEADER] = `${ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
      return request;
    }
    createCanonicalRequest(request, canonicalHeaders, payloadHash) {
      const sortedHeaders = Object.keys(canonicalHeaders).sort();
      return `${request.method}
${this.getCanonicalPath(request)}
${getCanonicalQuery(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
    }
    async createStringToSign(longDate, credentialScope, canonicalRequest) {
      const hash = new this.sha256;
      hash.update((0, import_util_utf83.toUint8Array)(canonicalRequest));
      const hashedRequest = await hash.digest();
      return `${ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, import_util_hex_encoding.toHex)(hashedRequest)}`;
    }
    getCanonicalPath({ path }) {
      if (this.uriEscapePath) {
        const normalizedPathSegments = [];
        for (const pathSegment of path.split("/")) {
          if ((pathSegment == null ? undefined : pathSegment.length) === 0)
            continue;
          if (pathSegment === ".")
            continue;
          if (pathSegment === "..") {
            normalizedPathSegments.pop();
          } else {
            normalizedPathSegments.push(pathSegment);
          }
        }
        const normalizedPath = `${(path == null ? undefined : path.startsWith("/")) ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && (path == null ? undefined : path.endsWith("/")) ? "/" : ""}`;
        const doubleEncoded = encodeURIComponent(normalizedPath);
        return doubleEncoded.replace(/%2F/g, "/");
      }
      return path;
    }
    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
      const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
      const hash = new this.sha256(await keyPromise);
      hash.update((0, import_util_utf83.toUint8Array)(stringToSign));
      return (0, import_util_hex_encoding.toHex)(await hash.digest());
    }
    getSigningKey(credentials, region, shortDate, service) {
      return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
    }
    validateResolvedCredentials(credentials) {
      if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") {
        throw new Error("Resolved credential object is not valid");
      }
    }
  };
  __name(_SignatureV4, "SignatureV4");
  var SignatureV4 = _SignatureV4;
  var formatDate = __name((now) => {
    const longDate = iso8601(now).replace(/[\-:]/g, "");
    return {
      longDate,
      shortDate: longDate.slice(0, 8)
    };
  }, "formatDate");
  var getCanonicalHeaderList = __name((headers) => Object.keys(headers).sort().join(";"), "getCanonicalHeaderList");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.
var require_dist_cjs22 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    SelectorType: () => SelectorType,
    booleanSelector: () => booleanSelector,
    numberSelector: () => numberSelector
  });
  module.exports = __toCommonJS(src_exports);
  var booleanSelector = __name((obj, key, type) => {
    if (!(key in obj))
      return;
    if (obj[key] === "true")
      return true;
    if (obj[key] === "false")
      return false;
    throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
  }, "booleanSelector");
  var numberSelector = __name((obj, key, type) => {
    if (!(key in obj))
      return;
    const numberValue = parseInt(obj[key], 10);
    if (Number.isNaN(numberValue)) {
      throw new TypeError(`Cannot load ${type} '${key}'. Expected number, got '${obj[key]}'.`);
    }
    return numberValue;
  }, "numberSelector");
  var SelectorType = ((SelectorType2) => {
    SelectorType2["ENV"] = "env";
    SelectorType2["CONFIG"] = "shared config entry";
    return SelectorType2;
  })(SelectorType || {});
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rule
var require_dist_cjs23 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    build: () => build,
    parse: () => parse,
    validate: () => validate
  });
  module.exports = __toCommonJS(src_exports);
  var validate = __name((str) => typeof str === "string" && str.indexOf("arn:") === 0 && str.split(":").length >= 6, "validate");
  var parse = __name((arn) => {
    const segments = arn.split(":");
    if (segments.length < 6 || segments[0] !== "arn")
      throw new Error("Malformed ARN");
    const [
      ,
      partition,
      service,
      region,
      accountId,
      ...resource
    ] = segments;
    return {
      partition,
      service,
      region,
      accountId,
      resource: resource.join(":")
    };
  }, "parse");
  var build = __name((arnObject) => {
    const { partition = "aws", service, region, accountId, resource } = arnObject;
    if ([service, region, accountId, resource].some((segment) => typeof segment !== "string")) {
      throw new Error("Input ARN object is invalid");
    }
    return `arn:${partition}:${service}:${region}:${accountId}:${resource}`;
  }, "build");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rulese
var require_dist_cjs24 = __commonJS((exports, module) => {
  var checkContentLengthHeader = function() {
    return (next, context) => async (args) => {
      var _a;
      const { request } = args;
      if (import_protocol_http.HttpRequest.isInstance(request)) {
        if (!request.headers[CONTENT_LENGTH_HEADER]) {
          const message = `Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.`;
          if (typeof ((_a = context == null ? undefined : context.logger) == null ? undefined : _a.warn) === "function" && !(context.logger instanceof import_smithy_client.NoOpLogger)) {
            context.logger.warn(message);
          } else {
            console.warn(message);
          }
        }
      }
      return next({ ...args });
    };
  };
  var regionRedirectMiddleware = function(clientConfig) {
    return (next, context) => async (args) => {
      var _a, _b;
      try {
        return await next(args);
      } catch (err) {
        if (clientConfig.followRegionRedirects && ((_a = err == null ? undefined : err.$metadata) == null ? undefined : _a.httpStatusCode) === 301) {
          try {
            const actualRegion = err.$response.headers["x-amz-bucket-region"];
            (_b = context.logger) == null || _b.debug(`Redirecting from ${await clientConfig.region()} to ${actualRegion}`);
            context.__s3RegionRedirect = actualRegion;
          } catch (e) {
            throw new Error("Region redirect failed: " + e);
          }
          return next(args);
        } else {
          throw err;
        }
      }
    };
  };
  var getCredentialsWithoutSessionToken = function(credentials) {
    const credentialsWithoutSessionToken = {
      accessKeyId: credentials.accessKeyId,
      secretAccessKey: credentials.secretAccessKey,
      expiration: credentials.expiration
    };
    return credentialsWithoutSessionToken;
  };
  var setSingleOverride = function(privateAccess, credentialsWithoutSessionToken) {
    const id = setTimeout(() => {
      throw new Error("SignatureV4S3Express credential override was created but not called.");
    }, 10);
    const currentCredentialProvider = privateAccess.credentialProvider;
    const overrideCredentialsProviderOnce = __name(() => {
      clearTimeout(id);
      privateAccess.credentialProvider = currentCredentialProvider;
      return Promise.resolve(credentialsWithoutSessionToken);
    }, "overrideCredentialsProviderOnce");
    privateAccess.credentialProvider = overrideCredentialsProviderOnce;
  };
  var validateBucketNameMiddleware = function() {
    return (next) => async (args) => {
      const {
        input: { Bucket }
      } = args;
      if (typeof Bucket === "string" && !(0, import_util_arn_parser.validate)(Bucket) && Bucket.indexOf("/") >= 0) {
        const err = new Error(`Bucket name shouldn't contain '/', received '${Bucket}'`);
        err.name = "InvalidBucketName";
        throw err;
      }
      return next({ ...args });
    };
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_OPTIONS: () => NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_OPTIONS,
    S3ExpressIdentityCache: () => S3ExpressIdentityCache,
    S3ExpressIdentityCacheEntry: () => S3ExpressIdentityCacheEntry,
    S3ExpressIdentityProviderImpl: () => S3ExpressIdentityProviderImpl,
    SignatureV4S3Express: () => SignatureV4S3Express,
    checkContentLengthHeader: () => checkContentLengthHeader,
    checkContentLengthHeaderMiddlewareOptions: () => checkContentLengthHeaderMiddlewareOptions,
    getCheckContentLengthHeaderPlugin: () => getCheckContentLengthHeaderPlugin,
    getRegionRedirectMiddlewarePlugin: () => getRegionRedirectMiddlewarePlugin,
    getS3ExpiresMiddlewarePlugin: () => getS3ExpiresMiddlewarePlugin,
    getS3ExpressPlugin: () => getS3ExpressPlugin,
    getThrow200ExceptionsPlugin: () => getThrow200ExceptionsPlugin,
    getValidateBucketNamePlugin: () => getValidateBucketNamePlugin,
    regionRedirectEndpointMiddleware: () => regionRedirectEndpointMiddleware,
    regionRedirectEndpointMiddlewareOptions: () => regionRedirectEndpointMiddlewareOptions,
    regionRedirectMiddleware: () => regionRedirectMiddleware,
    regionRedirectMiddlewareOptions: () => regionRedirectMiddlewareOptions,
    resolveS3Config: () => resolveS3Config,
    s3ExpiresMiddleware: () => s3ExpiresMiddleware,
    s3ExpiresMiddlewareOptions: () => s3ExpiresMiddlewareOptions,
    s3ExpressMiddleware: () => s3ExpressMiddleware,
    s3ExpressMiddlewareOptions: () => s3ExpressMiddlewareOptions,
    throw200ExceptionsMiddleware: () => throw200ExceptionsMiddleware,
    throw200ExceptionsMiddlewareOptions: () => throw200ExceptionsMiddlewareOptions,
    validateBucketNameMiddleware: () => validateBucketNameMiddleware,
    validateBucketNameMiddlewareOptions: () => validateBucketNameMiddlewareOptions
  });
  module.exports = __toCommonJS(src_exports);
  var import_protocol_http = require_dist_cjs2();
  var import_smithy_client = require_dist_cjs16();
  var CONTENT_LENGTH_HEADER = "content-length";
  __name(checkContentLengthHeader, "checkContentLengthHeader");
  var checkContentLengthHeaderMiddlewareOptions = {
    step: "finalizeRequest",
    tags: ["CHECK_CONTENT_LENGTH_HEADER"],
    name: "getCheckContentLengthHeaderPlugin",
    override: true
  };
  var getCheckContentLengthHeaderPlugin = __name((unused) => ({
    applyToStack: (clientStack) => {
      clientStack.add(checkContentLengthHeader(), checkContentLengthHeaderMiddlewareOptions);
    }
  }), "getCheckContentLengthHeaderPlugin");
  var regionRedirectEndpointMiddleware = __name((config) => {
    return (next, context) => async (args) => {
      const originalRegion = await config.region();
      const regionProviderRef = config.region;
      if (context.__s3RegionRedirect) {
        config.region = async () => {
          config.region = regionProviderRef;
          return context.__s3RegionRedirect;
        };
      }
      const result = await next(args);
      if (context.__s3RegionRedirect) {
        const region = await config.region();
        if (originalRegion !== region) {
          throw new Error("Region was not restored following S3 region redirect.");
        }
      }
      return result;
    };
  }, "regionRedirectEndpointMiddleware");
  var regionRedirectEndpointMiddlewareOptions = {
    tags: ["REGION_REDIRECT", "S3"],
    name: "regionRedirectEndpointMiddleware",
    override: true,
    relation: "before",
    toMiddleware: "endpointV2Middleware"
  };
  __name(regionRedirectMiddleware, "regionRedirectMiddleware");
  var regionRedirectMiddlewareOptions = {
    step: "initialize",
    tags: ["REGION_REDIRECT", "S3"],
    name: "regionRedirectMiddleware",
    override: true
  };
  var getRegionRedirectMiddlewarePlugin = __name((clientConfig) => ({
    applyToStack: (clientStack) => {
      clientStack.add(regionRedirectMiddleware(clientConfig), regionRedirectMiddlewareOptions);
      clientStack.addRelativeTo(regionRedirectEndpointMiddleware(clientConfig), regionRedirectEndpointMiddlewareOptions);
    }
  }), "getRegionRedirectMiddlewarePlugin");
  var s3ExpiresMiddleware = __name((config) => {
    return (next, context) => async (args) => {
      var _a;
      const result = await next(args);
      const { response } = result;
      if (import_protocol_http.HttpResponse.isInstance(response)) {
        if (response.headers.expires) {
          response.headers.expiresstring = response.headers.expires;
          try {
            (0, import_smithy_client.parseRfc7231DateTime)(response.headers.expires);
          } catch (e) {
            (_a = context.logger) == null || _a.warn(`AWS SDK Warning for ${context.clientName}::${context.commandName} response parsing (${response.headers.expires}): ${e}`);
            delete response.headers.expires;
          }
        }
      }
      return result;
    };
  }, "s3ExpiresMiddleware");
  var s3ExpiresMiddlewareOptions = {
    tags: ["S3"],
    name: "s3ExpiresMiddleware",
    override: true,
    relation: "after",
    toMiddleware: "deserializerMiddleware"
  };
  var getS3ExpiresMiddlewarePlugin = __name((clientConfig) => ({
    applyToStack: (clientStack) => {
      clientStack.addRelativeTo(s3ExpiresMiddleware(clientConfig), s3ExpiresMiddlewareOptions);
    }
  }), "getS3ExpiresMiddlewarePlugin");
  var _S3ExpressIdentityCache = class _S3ExpressIdentityCache2 {
    constructor(data = {}) {
      this.data = data;
      this.lastPurgeTime = Date.now();
    }
    get(key) {
      const entry = this.data[key];
      if (!entry) {
        return;
      }
      return entry;
    }
    set(key, entry) {
      this.data[key] = entry;
      return entry;
    }
    delete(key) {
      delete this.data[key];
    }
    async purgeExpired() {
      const now = Date.now();
      if (this.lastPurgeTime + _S3ExpressIdentityCache2.EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS > now) {
        return;
      }
      for (const key in this.data) {
        const entry = this.data[key];
        if (!entry.isRefreshing) {
          const credential = await entry.identity;
          if (credential.expiration) {
            if (credential.expiration.getTime() < now) {
              delete this.data[key];
            }
          }
        }
      }
    }
  };
  __name(_S3ExpressIdentityCache, "S3ExpressIdentityCache");
  _S3ExpressIdentityCache.EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS = 30000;
  var S3ExpressIdentityCache = _S3ExpressIdentityCache;
  var _S3ExpressIdentityCacheEntry = class _S3ExpressIdentityCacheEntry2 {
    constructor(_identity, isRefreshing = false, accessed = Date.now()) {
      this._identity = _identity;
      this.isRefreshing = isRefreshing;
      this.accessed = accessed;
    }
    get identity() {
      this.accessed = Date.now();
      return this._identity;
    }
  };
  __name(_S3ExpressIdentityCacheEntry, "S3ExpressIdentityCacheEntry");
  var S3ExpressIdentityCacheEntry = _S3ExpressIdentityCacheEntry;
  var _S3ExpressIdentityProviderImpl = class _S3ExpressIdentityProviderImpl2 {
    constructor(createSessionFn, cache = new S3ExpressIdentityCache) {
      this.createSessionFn = createSessionFn;
      this.cache = cache;
    }
    async getS3ExpressIdentity(awsIdentity, identityProperties) {
      const key = identityProperties.Bucket;
      const { cache } = this;
      const entry = cache.get(key);
      if (entry) {
        return entry.identity.then((identity) => {
          var _a, _b;
          const isExpired = (((_a = identity.expiration) == null ? undefined : _a.getTime()) ?? 0) < Date.now();
          if (isExpired) {
            return cache.set(key, new S3ExpressIdentityCacheEntry(this.getIdentity(key))).identity;
          }
          const isExpiringSoon = (((_b = identity.expiration) == null ? undefined : _b.getTime()) ?? 0) < Date.now() + _S3ExpressIdentityProviderImpl2.REFRESH_WINDOW_MS;
          if (isExpiringSoon && !entry.isRefreshing) {
            entry.isRefreshing = true;
            this.getIdentity(key).then((id) => {
              cache.set(key, new S3ExpressIdentityCacheEntry(Promise.resolve(id)));
            });
          }
          return identity;
        });
      }
      return cache.set(key, new S3ExpressIdentityCacheEntry(this.getIdentity(key))).identity;
    }
    async getIdentity(key) {
      var _a, _b;
      await this.cache.purgeExpired().catch((error) => {
        console.warn("Error while clearing expired entries in S3ExpressIdentityCache: \n" + error);
      });
      const session = await this.createSessionFn(key);
      if (!((_a = session.Credentials) == null ? undefined : _a.AccessKeyId) || !((_b = session.Credentials) == null ? undefined : _b.SecretAccessKey)) {
        throw new Error("s3#createSession response credential missing AccessKeyId or SecretAccessKey.");
      }
      const identity = {
        accessKeyId: session.Credentials.AccessKeyId,
        secretAccessKey: session.Credentials.SecretAccessKey,
        sessionToken: session.Credentials.SessionToken,
        expiration: session.Credentials.Expiration ? new Date(session.Credentials.Expiration) : undefined
      };
      return identity;
    }
  };
  __name(_S3ExpressIdentityProviderImpl, "S3ExpressIdentityProviderImpl");
  _S3ExpressIdentityProviderImpl.REFRESH_WINDOW_MS = 60000;
  var S3ExpressIdentityProviderImpl = _S3ExpressIdentityProviderImpl;
  var import_signature_v4 = require_dist_cjs21();
  var import_util_config_provider = require_dist_cjs22();
  var S3_EXPRESS_BUCKET_TYPE = "Directory";
  var S3_EXPRESS_BACKEND = "S3Express";
  var S3_EXPRESS_AUTH_SCHEME = "sigv4-s3express";
  var SESSION_TOKEN_QUERY_PARAM = "X-Amz-S3session-Token";
  var SESSION_TOKEN_HEADER = SESSION_TOKEN_QUERY_PARAM.toLowerCase();
  var NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_ENV_NAME = "AWS_S3_DISABLE_EXPRESS_SESSION_AUTH";
  var NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_INI_NAME = "s3_disable_express_session_auth";
  var NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_OPTIONS = {
    environmentVariableSelector: (env) => (0, import_util_config_provider.booleanSelector)(env, NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_ENV_NAME, import_util_config_provider.SelectorType.ENV),
    configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_INI_NAME, import_util_config_provider.SelectorType.CONFIG),
    default: false
  };
  var _SignatureV4S3Express = class _SignatureV4S3Express2 extends import_signature_v4.SignatureV4 {
    async signWithCredentials(requestToSign, credentials, options) {
      const credentialsWithoutSessionToken = getCredentialsWithoutSessionToken(credentials);
      requestToSign.headers[SESSION_TOKEN_HEADER] = credentials.sessionToken;
      const privateAccess = this;
      setSingleOverride(privateAccess, credentialsWithoutSessionToken);
      return privateAccess.signRequest(requestToSign, options ?? {});
    }
    async presignWithCredentials(requestToSign, credentials, options) {
      const credentialsWithoutSessionToken = getCredentialsWithoutSessionToken(credentials);
      delete requestToSign.headers[SESSION_TOKEN_HEADER];
      requestToSign.headers[SESSION_TOKEN_QUERY_PARAM] = credentials.sessionToken;
      requestToSign.query = requestToSign.query ?? {};
      requestToSign.query[SESSION_TOKEN_QUERY_PARAM] = credentials.sessionToken;
      const privateAccess = this;
      setSingleOverride(privateAccess, credentialsWithoutSessionToken);
      return this.presign(requestToSign, options);
    }
  };
  __name(_SignatureV4S3Express, "SignatureV4S3Express");
  var SignatureV4S3Express = _SignatureV4S3Express;
  __name(getCredentialsWithoutSessionToken, "getCredentialsWithoutSessionToken");
  __name(setSingleOverride, "setSingleOverride");
  var s3ExpressMiddleware = __name((options) => {
    return (next, context) => async (args) => {
      var _a, _b, _c, _d, _e;
      if (context.endpointV2) {
        const endpoint = context.endpointV2;
        const isS3ExpressAuth = ((_c = (_b = (_a = endpoint.properties) == null ? undefined : _a.authSchemes) == null ? undefined : _b[0]) == null ? undefined : _c.name) === S3_EXPRESS_AUTH_SCHEME;
        const isS3ExpressBucket = ((_d = endpoint.properties) == null ? undefined : _d.backend) === S3_EXPRESS_BACKEND || ((_e = endpoint.properties) == null ? undefined : _e.bucketType) === S3_EXPRESS_BUCKET_TYPE;
        if (isS3ExpressBucket) {
          context.isS3ExpressBucket = true;
        }
        if (isS3ExpressAuth) {
          const requestBucket = args.input.Bucket;
          if (requestBucket) {
            const s3ExpressIdentity = await options.s3ExpressIdentityProvider.getS3ExpressIdentity(await options.credentials(), {
              Bucket: requestBucket
            });
            context.s3ExpressIdentity = s3ExpressIdentity;
            if (import_protocol_http.HttpRequest.isInstance(args.request) && s3ExpressIdentity.sessionToken) {
              args.request.headers[SESSION_TOKEN_HEADER] = s3ExpressIdentity.sessionToken;
            }
          }
        }
      }
      return next(args);
    };
  }, "s3ExpressMiddleware");
  var s3ExpressMiddlewareOptions = {
    name: "s3ExpressMiddleware",
    step: "build",
    tags: ["S3", "S3_EXPRESS"],
    override: true
  };
  var getS3ExpressPlugin = __name((options) => ({
    applyToStack: (clientStack) => {
      clientStack.add(s3ExpressMiddleware(options), s3ExpressMiddlewareOptions);
    }
  }), "getS3ExpressPlugin");
  var resolveS3Config = __name((input, {
    session
  }) => {
    const [s3ClientProvider, CreateSessionCommandCtor] = session;
    return {
      ...input,
      forcePathStyle: input.forcePathStyle ?? false,
      useAccelerateEndpoint: input.useAccelerateEndpoint ?? false,
      disableMultiregionAccessPoints: input.disableMultiregionAccessPoints ?? false,
      followRegionRedirects: input.followRegionRedirects ?? false,
      s3ExpressIdentityProvider: input.s3ExpressIdentityProvider ?? new S3ExpressIdentityProviderImpl(async (key) => s3ClientProvider().send(new CreateSessionCommandCtor({
        Bucket: key,
        SessionMode: "ReadWrite"
      })))
    };
  }, "resolveS3Config");
  var throw200ExceptionsMiddleware = __name((config) => (next) => async (args) => {
    const result = await next(args);
    const { response } = result;
    if (!import_protocol_http.HttpResponse.isInstance(response))
      return result;
    const { statusCode, body } = response;
    if (statusCode < 200 || statusCode >= 300)
      return result;
    const bodyBytes = await collectBody(body, config);
    const bodyString = await collectBodyString(bodyBytes, config);
    if (bodyBytes.length === 0) {
      const err = new Error("S3 aborted request");
      err.name = "InternalError";
      throw err;
    }
    if (bodyString && bodyString.match("<Error>")) {
      response.statusCode = 400;
    }
    response.body = bodyBytes;
    return result;
  }, "throw200ExceptionsMiddleware");
  var collectBody = __name((streamBody = new Uint8Array, context) => {
    if (streamBody instanceof Uint8Array) {
      return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array);
  }, "collectBody");
  var collectBodyString = __name((streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body)), "collectBodyString");
  var throw200ExceptionsMiddlewareOptions = {
    relation: "after",
    toMiddleware: "deserializerMiddleware",
    tags: ["THROW_200_EXCEPTIONS", "S3"],
    name: "throw200ExceptionsMiddleware",
    override: true
  };
  var getThrow200ExceptionsPlugin = __name((config) => ({
    applyToStack: (clientStack) => {
      clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);
    }
  }), "getThrow200ExceptionsPlugin");
  var import_util_arn_parser = require_dist_cjs23();
  __name(validateBucketNameMiddleware, "validateBucketNameMiddleware");
  var validateBucketNameMiddlewareOptions = {
    step: "initialize",
    tags: ["VALIDATE_BUCKET_NAME"],
    name: "validateBucketNameMiddleware",
    override: true
  };
  var getValidateBucketNamePlugin = __name((unused) => ({
    applyToStack: (clientStack) => {
      clientStack.add(validateBucketNameMiddleware(), validateBucketNameMiddlewareOptions);
    }
  }), "getValidateBucketNamePlugin");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rules
var require_dist_cjs25 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    CredentialsProviderError: () => CredentialsProviderError,
    ProviderError: () => ProviderError,
    TokenProviderError: () => TokenProviderError,
    chain: () => chain,
    fromStatic: () => fromStatic,
    memoize: () => memoize
  });
  module.exports = __toCommonJS(src_exports);
  var _ProviderError = class _ProviderError2 extends Error {
    constructor(message, tryNextLink = true) {
      super(message);
      this.tryNextLink = tryNextLink;
      this.name = "ProviderError";
      Object.setPrototypeOf(this, _ProviderError2.prototype);
    }
    static from(error, tryNextLink = true) {
      return Object.assign(new this(error.message, tryNextLink), error);
    }
  };
  __name(_ProviderError, "ProviderError");
  var ProviderError = _ProviderError;
  var _CredentialsProviderError = class _CredentialsProviderError2 extends ProviderError {
    constructor(message, tryNextLink = true) {
      super(message, tryNextLink);
      this.tryNextLink = tryNextLink;
      this.name = "CredentialsProviderError";
      Object.setPrototypeOf(this, _CredentialsProviderError2.prototype);
    }
  };
  __name(_CredentialsProviderError, "CredentialsProviderError");
  var CredentialsProviderError = _CredentialsProviderError;
  var _TokenProviderError = class _TokenProviderError2 extends ProviderError {
    constructor(message, tryNextLink = true) {
      super(message, tryNextLink);
      this.tryNextLink = tryNextLink;
      this.name = "TokenProviderError";
      Object.setPrototypeOf(this, _TokenProviderError2.prototype);
    }
  };
  __name(_TokenProviderError, "TokenProviderError");
  var TokenProviderError = _TokenProviderError;
  var chain = __name((...providers) => async () => {
    if (providers.length === 0) {
      throw new ProviderError("No providers in chain");
    }
    let lastProviderError;
    for (const provider of providers) {
      try {
        const credentials = await provider();
        return credentials;
      } catch (err) {
        lastProviderError = err;
        if (err == null ? undefined : err.tryNextLink) {
          continue;
        }
        throw err;
      }
    }
    throw lastProviderError;
  }, "chain");
  var fromStatic = __name((staticValue) => () => Promise.resolve(staticValue), "fromStatic");
  var memoize = __name((provider, isExpired, requiresRefresh) => {
    let resolved;
    let pending;
    let hasResult;
    let isConstant = false;
    const coalesceProvider = __name(async () => {
      if (!pending) {
        pending = provider();
      }
      try {
        resolved = await pending;
        hasResult = true;
        isConstant = false;
      } finally {
        pending = undefined;
      }
      return resolved;
    }, "coalesceProvider");
    if (isExpired === undefined) {
      return async (options) => {
        if (!hasResult || (options == null ? undefined : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        return resolved;
      };
    }
    return async (options) => {
      if (!hasResult || (options == null ? undefined : options.forceRefresh)) {
        resolved = await coalesceProvider();
      }
      if (isConstant) {
        return resolved;
      }
      if (requiresRefresh && !requiresRefresh(resolved)) {
        isConstant = true;
        return resolved;
      }
      if (isExpired(resolved)) {
        await coalesceProvider();
        return resolved;
      }
      return resolved;
    };
  }, "memoize");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset
var require_dist_cjs26 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    awsAuthMiddleware: () => awsAuthMiddleware,
    awsAuthMiddlewareOptions: () => awsAuthMiddlewareOptions,
    getAwsAuthPlugin: () => getAwsAuthPlugin,
    getSigV4AuthPlugin: () => getSigV4AuthPlugin,
    resolveAwsAuthConfig: () => resolveAwsAuthConfig,
    resolveSigV4AuthConfig: () => resolveSigV4AuthConfig
  });
  module.exports = __toCommonJS(src_exports);
  var import_property_provider = require_dist_cjs25();
  var import_signature_v4 = require_dist_cjs21();
  var import_util_middleware = require_dist_cjs20();
  var CREDENTIAL_EXPIRE_WINDOW = 300000;
  var resolveAwsAuthConfig = __name((input) => {
    const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
    let signer;
    if (input.signer) {
      signer = (0, import_util_middleware.normalizeProvider)(input.signer);
    } else if (input.regionInfoProvider) {
      signer = __name(() => (0, import_util_middleware.normalizeProvider)(input.region)().then(async (region) => [
        await input.regionInfoProvider(region, {
          useFipsEndpoint: await input.useFipsEndpoint(),
          useDualstackEndpoint: await input.useDualstackEndpoint()
        }) || {},
        region
      ]).then(([regionInfo, region]) => {
        const { signingRegion, signingService } = regionInfo;
        input.signingRegion = input.signingRegion || signingRegion || region;
        input.signingName = input.signingName || signingService || input.serviceId;
        const params = {
          ...input,
          credentials: normalizedCreds,
          region: input.signingRegion,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        };
        const SignerCtor = input.signerConstructor || import_signature_v4.SignatureV4;
        return new SignerCtor(params);
      }), "signer");
    } else {
      signer = __name(async (authScheme) => {
        authScheme = Object.assign({}, {
          name: "sigv4",
          signingName: input.signingName || input.defaultSigningName,
          signingRegion: await (0, import_util_middleware.normalizeProvider)(input.region)(),
          properties: {}
        }, authScheme);
        const signingRegion = authScheme.signingRegion;
        const signingService = authScheme.signingName;
        input.signingRegion = input.signingRegion || signingRegion;
        input.signingName = input.signingName || signingService || input.serviceId;
        const params = {
          ...input,
          credentials: normalizedCreds,
          region: input.signingRegion,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        };
        const SignerCtor = input.signerConstructor || import_signature_v4.SignatureV4;
        return new SignerCtor(params);
      }, "signer");
    }
    return {
      ...input,
      systemClockOffset,
      signingEscapePath,
      credentials: normalizedCreds,
      signer
    };
  }, "resolveAwsAuthConfig");
  var resolveSigV4AuthConfig = __name((input) => {
    const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
    let signer;
    if (input.signer) {
      signer = (0, import_util_middleware.normalizeProvider)(input.signer);
    } else {
      signer = (0, import_util_middleware.normalizeProvider)(new import_signature_v4.SignatureV4({
        credentials: normalizedCreds,
        region: input.region,
        service: input.signingName,
        sha256,
        uriEscapePath: signingEscapePath
      }));
    }
    return {
      ...input,
      systemClockOffset,
      signingEscapePath,
      credentials: normalizedCreds,
      signer
    };
  }, "resolveSigV4AuthConfig");
  var normalizeCredentialProvider = __name((credentials) => {
    if (typeof credentials === "function") {
      return (0, import_property_provider.memoize)(credentials, (credentials2) => credentials2.expiration !== undefined && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials2) => credentials2.expiration !== undefined);
    }
    return (0, import_util_middleware.normalizeProvider)(credentials);
  }, "normalizeCredentialProvider");
  var import_protocol_http = require_dist_cjs2();
  var getSkewCorrectedDate = __name((systemClockOffset) => new Date(Date.now() + systemClockOffset), "getSkewCorrectedDate");
  var isClockSkewed = __name((clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 300000, "isClockSkewed");
  var getUpdatedSystemClockOffset = __name((clockTime, currentSystemClockOffset) => {
    const clockTimeInMs = Date.parse(clockTime);
    if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
      return clockTimeInMs - Date.now();
    }
    return currentSystemClockOffset;
  }, "getUpdatedSystemClockOffset");
  var awsAuthMiddleware = __name((options) => (next, context) => async function(args) {
    var _a, _b, _c, _d;
    if (!import_protocol_http.HttpRequest.isInstance(args.request))
      return next(args);
    const authScheme = (_c = (_b = (_a = context.endpointV2) == null ? undefined : _a.properties) == null ? undefined : _b.authSchemes) == null ? undefined : _c[0];
    const multiRegionOverride = (authScheme == null ? undefined : authScheme.name) === "sigv4a" ? (_d = authScheme == null ? undefined : authScheme.signingRegionSet) == null ? undefined : _d.join(",") : undefined;
    const signer = await options.signer(authScheme);
    let signedRequest;
    const signingOptions = {
      signingDate: getSkewCorrectedDate(options.systemClockOffset),
      signingRegion: multiRegionOverride || context["signing_region"],
      signingService: context["signing_service"]
    };
    if (context.s3ExpressIdentity) {
      const sigV4MultiRegion = signer;
      signedRequest = await sigV4MultiRegion.signWithCredentials(args.request, context.s3ExpressIdentity, signingOptions);
      if (signedRequest.headers["X-Amz-Security-Token"] || signedRequest.headers["x-amz-security-token"]) {
        throw new Error("X-Amz-Security-Token must not be set for s3-express requests.");
      }
    } else {
      signedRequest = await signer.sign(args.request, signingOptions);
    }
    const output = await next({
      ...args,
      request: signedRequest
    }).catch((error) => {
      const serverTime = error.ServerTime ?? getDateHeader(error.$response);
      if (serverTime) {
        options.systemClockOffset = getUpdatedSystemClockOffset(serverTime, options.systemClockOffset);
      }
      throw error;
    });
    const dateHeader = getDateHeader(output.response);
    if (dateHeader) {
      options.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, options.systemClockOffset);
    }
    return output;
  }, "awsAuthMiddleware");
  var getDateHeader = __name((response) => {
    var _a, _b;
    return import_protocol_http.HttpResponse.isInstance(response) ? ((_a = response.headers) == null ? undefined : _a.date) ?? ((_b = response.headers) == null ? undefined : _b.Date) : undefined;
  }, "getDateHeader");
  var awsAuthMiddlewareOptions = {
    name: "awsAuthMiddleware",
    tags: ["SIGNATURE", "AWSAUTH"],
    relation: "after",
    toMiddleware: "retryMiddleware",
    override: true
  };
  var getAwsAuthPlugin = __name((options) => ({
    applyToStack: (clientStack) => {
      clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);
    }
  }), "getAwsAuthPlugin");
  var getSigV4AuthPlugin = getAwsAuthPlugin;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ru
var require_dist_cjs27 = __commonJS((exports, module) => {
  var toDebugString = function(input) {
    if (typeof input !== "object" || input == null) {
      return input;
    }
    if ("ref" in input) {
      return `\$${toDebugString(input.ref)}`;
    }
    if ("fn" in input) {
      return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
    }
    return JSON.stringify(input, null, 2);
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    EndpointError: () => EndpointError2,
    customEndpointFunctions: () => customEndpointFunctions,
    isIpAddress: () => isIpAddress2,
    isValidHostLabel: () => isValidHostLabel,
    resolveEndpoint: () => resolveEndpoint2
  });
  module.exports = __toCommonJS(src_exports);
  var IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}\$`);
  var isIpAddress2 = __name((value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]"), "isIpAddress");
  var VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-\$)(?!-)[a-zA-Z0-9-]{1,63}\$`);
  var isValidHostLabel = __name((value, allowSubDomains = false) => {
    if (!allowSubDomains) {
      return VALID_HOST_LABEL_REGEX.test(value);
    }
    const labels = value.split(".");
    for (const label of labels) {
      if (!isValidHostLabel(label)) {
        return false;
      }
    }
    return true;
  }, "isValidHostLabel");
  var customEndpointFunctions = {};
  var debugId = "endpoints";
  __name(toDebugString, "toDebugString");
  var _EndpointError = class _EndpointError2 extends Error {
    constructor(message) {
      super(message);
      this.name = "EndpointError";
    }
  };
  __name(_EndpointError, "EndpointError");
  var EndpointError2 = _EndpointError;
  var booleanEquals = __name((value1, value2) => value1 === value2, "booleanEquals");
  var getAttrPathList = __name((path) => {
    const parts = path.split(".");
    const pathList = [];
    for (const part of parts) {
      const squareBracketIndex = part.indexOf("[");
      if (squareBracketIndex !== -1) {
        if (part.indexOf("]") !== part.length - 1) {
          throw new EndpointError2(`Path: '${path}' does not end with ']'`);
        }
        const arrayIndex = part.slice(squareBracketIndex + 1, -1);
        if (Number.isNaN(parseInt(arrayIndex))) {
          throw new EndpointError2(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
        }
        if (squareBracketIndex !== 0) {
          pathList.push(part.slice(0, squareBracketIndex));
        }
        pathList.push(arrayIndex);
      } else {
        pathList.push(part);
      }
    }
    return pathList;
  }, "getAttrPathList");
  var getAttr = __name((value, path) => getAttrPathList(path).reduce((acc, index) => {
    if (typeof acc !== "object") {
      throw new EndpointError2(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
    } else if (Array.isArray(acc)) {
      return acc[parseInt(index)];
    }
    return acc[index];
  }, value), "getAttr");
  var isSet = __name((value) => value != null, "isSet");
  var not = __name((value) => !value, "not");
  var import_types3 = require_dist_cjs();
  var DEFAULT_PORTS = {
    [import_types3.EndpointURLScheme.HTTP]: 80,
    [import_types3.EndpointURLScheme.HTTPS]: 443
  };
  var parseURL = __name((value) => {
    const whatwgURL = (() => {
      try {
        if (value instanceof URL) {
          return value;
        }
        if (typeof value === "object" && "hostname" in value) {
          const { hostname: hostname2, port, protocol: protocol2 = "", path = "", query = {} } = value;
          const url = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ""}${path}`);
          url.search = Object.entries(query).map(([k, v]) => `${k}=${v}`).join("&");
          return url;
        }
        return new URL(value);
      } catch (error) {
        return null;
      }
    })();
    if (!whatwgURL) {
      console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
      return null;
    }
    const urlString = whatwgURL.href;
    const { host, hostname, pathname, protocol, search } = whatwgURL;
    if (search) {
      return null;
    }
    const scheme = protocol.slice(0, -1);
    if (!Object.values(import_types3.EndpointURLScheme).includes(scheme)) {
      return null;
    }
    const isIp = isIpAddress2(hostname);
    const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
    const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
    return {
      scheme,
      authority,
      path: pathname,
      normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
      isIp
    };
  }, "parseURL");
  var stringEquals = __name((value1, value2) => value1 === value2, "stringEquals");
  var substring = __name((input, start, stop, reverse) => {
    if (start >= stop || input.length < stop) {
      return null;
    }
    if (!reverse) {
      return input.substring(start, stop);
    }
    return input.substring(input.length - stop, input.length - start);
  }, "substring");
  var uriEncode = __name((value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`), "uriEncode");
  var endpointFunctions = {
    booleanEquals,
    getAttr,
    isSet,
    isValidHostLabel,
    not,
    parseURL,
    stringEquals,
    substring,
    uriEncode
  };
  var evaluateTemplate = __name((template, options) => {
    const evaluatedTemplateArr = [];
    const templateContext = {
      ...options.endpointParams,
      ...options.referenceRecord
    };
    let currentIndex = 0;
    while (currentIndex < template.length) {
      const openingBraceIndex = template.indexOf("{", currentIndex);
      if (openingBraceIndex === -1) {
        evaluatedTemplateArr.push(template.slice(currentIndex));
        break;
      }
      evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
      const closingBraceIndex = template.indexOf("}", openingBraceIndex);
      if (closingBraceIndex === -1) {
        evaluatedTemplateArr.push(template.slice(openingBraceIndex));
        break;
      }
      if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
        evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
        currentIndex = closingBraceIndex + 2;
      }
      const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
      if (parameterName.includes("#")) {
        const [refName, attrName] = parameterName.split("#");
        evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));
      } else {
        evaluatedTemplateArr.push(templateContext[parameterName]);
      }
      currentIndex = closingBraceIndex + 1;
    }
    return evaluatedTemplateArr.join("");
  }, "evaluateTemplate");
  var getReferenceValue = __name(({ ref }, options) => {
    const referenceRecord = {
      ...options.endpointParams,
      ...options.referenceRecord
    };
    return referenceRecord[ref];
  }, "getReferenceValue");
  var evaluateExpression = __name((obj, keyName, options) => {
    if (typeof obj === "string") {
      return evaluateTemplate(obj, options);
    } else if (obj["fn"]) {
      return callFunction(obj, options);
    } else if (obj["ref"]) {
      return getReferenceValue(obj, options);
    }
    throw new EndpointError2(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
  }, "evaluateExpression");
  var callFunction = __name(({ fn, argv }, options) => {
    const evaluatedArgs = argv.map((arg) => ["boolean", "number"].includes(typeof arg) ? arg : evaluateExpression(arg, "arg", options));
    const fnSegments = fn.split(".");
    if (fnSegments[0] in customEndpointFunctions && fnSegments[1] != null) {
      return customEndpointFunctions[fnSegments[0]][fnSegments[1]](...evaluatedArgs);
    }
    return endpointFunctions[fn](...evaluatedArgs);
  }, "callFunction");
  var evaluateCondition = __name(({ assign, ...fnArgs }, options) => {
    var _a, _b;
    if (assign && assign in options.referenceRecord) {
      throw new EndpointError2(`'${assign}' is already defined in Reference Record.`);
    }
    const value = callFunction(fnArgs, options);
    (_b = (_a = options.logger) == null ? undefined : _a.debug) == null || _b.call(_a, debugId, `evaluateCondition: ${toDebugString(fnArgs)} = ${toDebugString(value)}`);
    return {
      result: value === "" ? true : !!value,
      ...assign != null && { toAssign: { name: assign, value } }
    };
  }, "evaluateCondition");
  var evaluateConditions = __name((conditions = [], options) => {
    var _a, _b;
    const conditionsReferenceRecord = {};
    for (const condition of conditions) {
      const { result, toAssign } = evaluateCondition(condition, {
        ...options,
        referenceRecord: {
          ...options.referenceRecord,
          ...conditionsReferenceRecord
        }
      });
      if (!result) {
        return { result };
      }
      if (toAssign) {
        conditionsReferenceRecord[toAssign.name] = toAssign.value;
        (_b = (_a = options.logger) == null ? undefined : _a.debug) == null || _b.call(_a, debugId, `assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);
      }
    }
    return { result: true, referenceRecord: conditionsReferenceRecord };
  }, "evaluateConditions");
  var getEndpointHeaders = __name((headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({
    ...acc,
    [headerKey]: headerVal.map((headerValEntry) => {
      const processedExpr = evaluateExpression(headerValEntry, "Header value entry", options);
      if (typeof processedExpr !== "string") {
        throw new EndpointError2(`Header '${headerKey}' value '${processedExpr}' is not a string`);
      }
      return processedExpr;
    })
  }), {}), "getEndpointHeaders");
  var getEndpointProperty = __name((property, options) => {
    if (Array.isArray(property)) {
      return property.map((propertyEntry) => getEndpointProperty(propertyEntry, options));
    }
    switch (typeof property) {
      case "string":
        return evaluateTemplate(property, options);
      case "object":
        if (property === null) {
          throw new EndpointError2(`Unexpected endpoint property: ${property}`);
        }
        return getEndpointProperties(property, options);
      case "boolean":
        return property;
      default:
        throw new EndpointError2(`Unexpected endpoint property type: ${typeof property}`);
    }
  }, "getEndpointProperty");
  var getEndpointProperties = __name((properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({
    ...acc,
    [propertyKey]: getEndpointProperty(propertyVal, options)
  }), {}), "getEndpointProperties");
  var getEndpointUrl = __name((endpointUrl, options) => {
    const expression = evaluateExpression(endpointUrl, "Endpoint URL", options);
    if (typeof expression === "string") {
      try {
        return new URL(expression);
      } catch (error) {
        console.error(`Failed to construct URL with ${expression}`, error);
        throw error;
      }
    }
    throw new EndpointError2(`Endpoint URL must be a string, got ${typeof expression}`);
  }, "getEndpointUrl");
  var evaluateEndpointRule = __name((endpointRule, options) => {
    var _a, _b;
    const { conditions, endpoint } = endpointRule;
    const { result, referenceRecord } = evaluateConditions(conditions, options);
    if (!result) {
      return;
    }
    const endpointRuleOptions = {
      ...options,
      referenceRecord: { ...options.referenceRecord, ...referenceRecord }
    };
    const { url, properties, headers } = endpoint;
    (_b = (_a = options.logger) == null ? undefined : _a.debug) == null || _b.call(_a, debugId, `Resolving endpoint from template: ${toDebugString(endpoint)}`);
    return {
      ...headers != null && {
        headers: getEndpointHeaders(headers, endpointRuleOptions)
      },
      ...properties != null && {
        properties: getEndpointProperties(properties, endpointRuleOptions)
      },
      url: getEndpointUrl(url, endpointRuleOptions)
    };
  }, "evaluateEndpointRule");
  var evaluateErrorRule = __name((errorRule, options) => {
    const { conditions, error } = errorRule;
    const { result, referenceRecord } = evaluateConditions(conditions, options);
    if (!result) {
      return;
    }
    throw new EndpointError2(evaluateExpression(error, "Error", {
      ...options,
      referenceRecord: { ...options.referenceRecord, ...referenceRecord }
    }));
  }, "evaluateErrorRule");
  var evaluateTreeRule = __name((treeRule, options) => {
    const { conditions, rules } = treeRule;
    const { result, referenceRecord } = evaluateConditions(conditions, options);
    if (!result) {
      return;
    }
    return evaluateRules(rules, {
      ...options,
      referenceRecord: { ...options.referenceRecord, ...referenceRecord }
    });
  }, "evaluateTreeRule");
  var evaluateRules = __name((rules, options) => {
    for (const rule of rules) {
      if (rule.type === "endpoint") {
        const endpointOrUndefined = evaluateEndpointRule(rule, options);
        if (endpointOrUndefined) {
          return endpointOrUndefined;
        }
      } else if (rule.type === "error") {
        evaluateErrorRule(rule, options);
      } else if (rule.type === "tree") {
        const endpointOrUndefined = evaluateTreeRule(rule, options);
        if (endpointOrUndefined) {
          return endpointOrUndefined;
        }
      } else {
        throw new EndpointError2(`Unknown endpoint rule: ${rule}`);
      }
    }
    throw new EndpointError2(`Rules evaluation failed`);
  }, "evaluateRules");
  var resolveEndpoint2 = __name((ruleSetObject, options) => {
    var _a, _b, _c, _d, _e;
    const { endpointParams, logger: logger4 } = options;
    const { parameters, rules } = ruleSetObject;
    (_b = (_a = options.logger) == null ? undefined : _a.debug) == null || _b.call(_a, `${debugId} Initial EndpointParams: ${toDebugString(endpointParams)}`);
    const paramsWithDefault = Object.entries(parameters).filter(([, v]) => v.default != null).map(([k, v]) => [k, v.default]);
    if (paramsWithDefault.length > 0) {
      for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
        endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;
      }
    }
    const requiredParams = Object.entries(parameters).filter(([, v]) => v.required).map(([k]) => k);
    for (const requiredParam of requiredParams) {
      if (endpointParams[requiredParam] == null) {
        throw new EndpointError2(`Missing required parameter: '${requiredParam}'`);
      }
    }
    const endpoint = evaluateRules(rules, { endpointParams, logger: logger4, referenceRecord: {} });
    if ((_c = options.endpointParams) == null ? undefined : _c.Endpoint) {
      try {
        const givenEndpoint = new URL(options.endpointParams.Endpoint);
        const { protocol, port } = givenEndpoint;
        endpoint.url.protocol = protocol;
        endpoint.url.port = port;
      } catch (e) {
      }
    }
    (_e = (_d = options.logger) == null ? undefined : _d.debug) == null || _e.call(_d, `${debugId} Resolved endpoint: ${toDebugString(endpoint)}`);
    return endpoint;
  }, "resolveEndpoint");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rul
var require_dist_cjs28 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    ConditionObject: () => import_util_endpoints.ConditionObject,
    DeprecatedObject: () => import_util_endpoints.DeprecatedObject,
    EndpointError: () => import_util_endpoints.EndpointError,
    EndpointObject: () => import_util_endpoints.EndpointObject,
    EndpointObjectHeaders: () => import_util_endpoints.EndpointObjectHeaders,
    EndpointObjectProperties: () => import_util_endpoints.EndpointObjectProperties,
    EndpointParams: () => import_util_endpoints.EndpointParams,
    EndpointResolverOptions: () => import_util_endpoints.EndpointResolverOptions,
    EndpointRuleObject: () => import_util_endpoints.EndpointRuleObject,
    ErrorRuleObject: () => import_util_endpoints.ErrorRuleObject,
    EvaluateOptions: () => import_util_endpoints.EvaluateOptions,
    Expression: () => import_util_endpoints.Expression,
    FunctionArgv: () => import_util_endpoints.FunctionArgv,
    FunctionObject: () => import_util_endpoints.FunctionObject,
    FunctionReturn: () => import_util_endpoints.FunctionReturn,
    ParameterObject: () => import_util_endpoints.ParameterObject,
    ReferenceObject: () => import_util_endpoints.ReferenceObject,
    ReferenceRecord: () => import_util_endpoints.ReferenceRecord,
    RuleSetObject: () => import_util_endpoints.RuleSetObject,
    RuleSetRules: () => import_util_endpoints.RuleSetRules,
    TreeRuleObject: () => import_util_endpoints.TreeRuleObject,
    getUserAgentPrefix: () => getUserAgentPrefix,
    isIpAddress: () => import_util_endpoints.isIpAddress,
    partition: () => partition,
    resolveEndpoint: () => import_util_endpoints.resolveEndpoint,
    setPartitionInfo: () => setPartitionInfo,
    useDefaultPartitionInfo: () => useDefaultPartitionInfo
  });
  module.exports = __toCommonJS(src_exports);
  var import_util_endpoints = require_dist_cjs27();
  var isVirtualHostableS3Bucket = __name((value, allowSubDomains = false) => {
    if (allowSubDomains) {
      for (const label of value.split(".")) {
        if (!isVirtualHostableS3Bucket(label)) {
          return false;
        }
      }
      return true;
    }
    if (!(0, import_util_endpoints.isValidHostLabel)(value)) {
      return false;
    }
    if (value.length < 3 || value.length > 63) {
      return false;
    }
    if (value !== value.toLowerCase()) {
      return false;
    }
    if ((0, import_util_endpoints.isIpAddress)(value)) {
      return false;
    }
    return true;
  }, "isVirtualHostableS3Bucket");
  var parseArn = __name((value) => {
    const segments = value.split(":");
    if (segments.length < 6)
      return null;
    const [arn, partition2, service, region, accountId, ...resourceId] = segments;
    if (arn !== "arn" || partition2 === "" || service === "" || resourceId[0] === "")
      return null;
    return {
      partition: partition2,
      service,
      region,
      accountId,
      resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId
    };
  }, "parseArn");
  var partitions_default = {
    partitions: [{
      id: "aws",
      outputs: {
        dnsSuffix: "amazonaws.com",
        dualStackDnsSuffix: "api.aws",
        implicitGlobalRegion: "us-east-1",
        name: "aws",
        supportsDualStack: true,
        supportsFIPS: true
      },
      regionRegex: "^(us|eu|ap|sa|ca|me|af|il)\\-\\w+\\-\\d+$",
      regions: {
        "af-south-1": {
          description: "Africa (Cape Town)"
        },
        "ap-east-1": {
          description: "Asia Pacific (Hong Kong)"
        },
        "ap-northeast-1": {
          description: "Asia Pacific (Tokyo)"
        },
        "ap-northeast-2": {
          description: "Asia Pacific (Seoul)"
        },
        "ap-northeast-3": {
          description: "Asia Pacific (Osaka)"
        },
        "ap-south-1": {
          description: "Asia Pacific (Mumbai)"
        },
        "ap-south-2": {
          description: "Asia Pacific (Hyderabad)"
        },
        "ap-southeast-1": {
          description: "Asia Pacific (Singapore)"
        },
        "ap-southeast-2": {
          description: "Asia Pacific (Sydney)"
        },
        "ap-southeast-3": {
          description: "Asia Pacific (Jakarta)"
        },
        "ap-southeast-4": {
          description: "Asia Pacific (Melbourne)"
        },
        "aws-global": {
          description: "AWS Standard global region"
        },
        "ca-central-1": {
          description: "Canada (Central)"
        },
        "ca-west-1": {
          description: "Canada West (Calgary)"
        },
        "eu-central-1": {
          description: "Europe (Frankfurt)"
        },
        "eu-central-2": {
          description: "Europe (Zurich)"
        },
        "eu-north-1": {
          description: "Europe (Stockholm)"
        },
        "eu-south-1": {
          description: "Europe (Milan)"
        },
        "eu-south-2": {
          description: "Europe (Spain)"
        },
        "eu-west-1": {
          description: "Europe (Ireland)"
        },
        "eu-west-2": {
          description: "Europe (London)"
        },
        "eu-west-3": {
          description: "Europe (Paris)"
        },
        "il-central-1": {
          description: "Israel (Tel Aviv)"
        },
        "me-central-1": {
          description: "Middle East (UAE)"
        },
        "me-south-1": {
          description: "Middle East (Bahrain)"
        },
        "sa-east-1": {
          description: "South America (Sao Paulo)"
        },
        "us-east-1": {
          description: "US East (N. Virginia)"
        },
        "us-east-2": {
          description: "US East (Ohio)"
        },
        "us-west-1": {
          description: "US West (N. California)"
        },
        "us-west-2": {
          description: "US West (Oregon)"
        }
      }
    }, {
      id: "aws-cn",
      outputs: {
        dnsSuffix: "amazonaws.com.cn",
        dualStackDnsSuffix: "api.amazonwebservices.com.cn",
        implicitGlobalRegion: "cn-northwest-1",
        name: "aws-cn",
        supportsDualStack: true,
        supportsFIPS: true
      },
      regionRegex: "^cn\\-\\w+\\-\\d+$",
      regions: {
        "aws-cn-global": {
          description: "AWS China global region"
        },
        "cn-north-1": {
          description: "China (Beijing)"
        },
        "cn-northwest-1": {
          description: "China (Ningxia)"
        }
      }
    }, {
      id: "aws-us-gov",
      outputs: {
        dnsSuffix: "amazonaws.com",
        dualStackDnsSuffix: "api.aws",
        implicitGlobalRegion: "us-gov-west-1",
        name: "aws-us-gov",
        supportsDualStack: true,
        supportsFIPS: true
      },
      regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
      regions: {
        "aws-us-gov-global": {
          description: "AWS GovCloud (US) global region"
        },
        "us-gov-east-1": {
          description: "AWS GovCloud (US-East)"
        },
        "us-gov-west-1": {
          description: "AWS GovCloud (US-West)"
        }
      }
    }, {
      id: "aws-iso",
      outputs: {
        dnsSuffix: "c2s.ic.gov",
        dualStackDnsSuffix: "c2s.ic.gov",
        implicitGlobalRegion: "us-iso-east-1",
        name: "aws-iso",
        supportsDualStack: false,
        supportsFIPS: true
      },
      regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
      regions: {
        "aws-iso-global": {
          description: "AWS ISO (US) global region"
        },
        "us-iso-east-1": {
          description: "US ISO East"
        },
        "us-iso-west-1": {
          description: "US ISO WEST"
        }
      }
    }, {
      id: "aws-iso-b",
      outputs: {
        dnsSuffix: "sc2s.sgov.gov",
        dualStackDnsSuffix: "sc2s.sgov.gov",
        implicitGlobalRegion: "us-isob-east-1",
        name: "aws-iso-b",
        supportsDualStack: false,
        supportsFIPS: true
      },
      regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
      regions: {
        "aws-iso-b-global": {
          description: "AWS ISOB (US) global region"
        },
        "us-isob-east-1": {
          description: "US ISOB East (Ohio)"
        }
      }
    }, {
      id: "aws-iso-e",
      outputs: {
        dnsSuffix: "cloud.adc-e.uk",
        dualStackDnsSuffix: "cloud.adc-e.uk",
        implicitGlobalRegion: "eu-isoe-west-1",
        name: "aws-iso-e",
        supportsDualStack: false,
        supportsFIPS: true
      },
      regionRegex: "^eu\\-isoe\\-\\w+\\-\\d+$",
      regions: {}
    }, {
      id: "aws-iso-f",
      outputs: {
        dnsSuffix: "csp.hci.ic.gov",
        dualStackDnsSuffix: "csp.hci.ic.gov",
        implicitGlobalRegion: "us-isof-south-1",
        name: "aws-iso-f",
        supportsDualStack: false,
        supportsFIPS: true
      },
      regionRegex: "^us\\-isof\\-\\w+\\-\\d+$",
      regions: {}
    }],
    version: "1.1"
  };
  var selectedPartitionsInfo = partitions_default;
  var selectedUserAgentPrefix = "";
  var partition = __name((value) => {
    const { partitions } = selectedPartitionsInfo;
    for (const partition2 of partitions) {
      const { regions, outputs } = partition2;
      for (const [region, regionData] of Object.entries(regions)) {
        if (region === value) {
          return {
            ...outputs,
            ...regionData
          };
        }
      }
    }
    for (const partition2 of partitions) {
      const { regionRegex, outputs } = partition2;
      if (new RegExp(regionRegex).test(value)) {
        return {
          ...outputs
        };
      }
    }
    const DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
    if (!DEFAULT_PARTITION) {
      throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
    }
    return {
      ...DEFAULT_PARTITION.outputs
    };
  }, "partition");
  var setPartitionInfo = __name((partitionsInfo, userAgentPrefix = "") => {
    selectedPartitionsInfo = partitionsInfo;
    selectedUserAgentPrefix = userAgentPrefix;
  }, "setPartitionInfo");
  var useDefaultPartitionInfo = __name(() => {
    setPartitionInfo(partitions_default, "");
  }, "useDefaultPartitionInfo");
  var getUserAgentPrefix = __name(() => selectedUserAgentPrefix, "getUserAgentPrefix");
  var awsEndpointFunctions = {
    isVirtualHostableS3Bucket,
    parseArn,
    partition
  };
  import_util_endpoints.customEndpointFunctions.aws = awsEndpointFunctions;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_dist_cjs29 = __commonJS((exports, module) => {
  var resolveUserAgentConfig = function(input) {
    return {
      ...input,
      customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
    };
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    getUserAgentMiddlewareOptions: () => getUserAgentMiddlewareOptions,
    getUserAgentPlugin: () => getUserAgentPlugin,
    resolveUserAgentConfig: () => resolveUserAgentConfig,
    userAgentMiddleware: () => userAgentMiddleware
  });
  module.exports = __toCommonJS(src_exports);
  __name(resolveUserAgentConfig, "resolveUserAgentConfig");
  var import_util_endpoints = require_dist_cjs28();
  var import_protocol_http = require_dist_cjs2();
  var USER_AGENT = "user-agent";
  var X_AMZ_USER_AGENT = "x-amz-user-agent";
  var SPACE = " ";
  var UA_NAME_SEPARATOR = "/";
  var UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
  var UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
  var UA_ESCAPE_CHAR = "-";
  var userAgentMiddleware = __name((options) => (next, context) => async (args) => {
    var _a, _b;
    const { request } = args;
    if (!import_protocol_http.HttpRequest.isInstance(request))
      return next(args);
    const { headers } = request;
    const userAgent = ((_a = context == null ? undefined : context.userAgent) == null ? undefined : _a.map(escapeUserAgent)) || [];
    const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
    const customUserAgent = ((_b = options == null ? undefined : options.customUserAgent) == null ? undefined : _b.map(escapeUserAgent)) || [];
    const prefix = (0, import_util_endpoints.getUserAgentPrefix)();
    const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent, ...userAgent, ...customUserAgent]).join(SPACE);
    const normalUAValue = [
      ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
      ...customUserAgent
    ].join(SPACE);
    if (options.runtime !== "browser") {
      if (normalUAValue) {
        headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT] ? `${headers[USER_AGENT]} ${normalUAValue}` : normalUAValue;
      }
      headers[USER_AGENT] = sdkUserAgentValue;
    } else {
      headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;
    }
    return next({
      ...args,
      request
    });
  }, "userAgentMiddleware");
  var escapeUserAgent = __name((userAgentPair) => {
    var _a;
    const name = userAgentPair[0].split(UA_NAME_SEPARATOR).map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR)).join(UA_NAME_SEPARATOR);
    const version = (_a = userAgentPair[1]) == null ? undefined : _a.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);
    const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);
    const prefix = name.substring(0, prefixSeparatorIndex);
    let uaName = name.substring(prefixSeparatorIndex + 1);
    if (prefix === "api") {
      uaName = uaName.toLowerCase();
    }
    return [prefix, uaName, version].filter((item) => item && item.length > 0).reduce((acc, item, index) => {
      switch (index) {
        case 0:
          return item;
        case 1:
          return `${acc}/${item}`;
        default:
          return `${acc}#${item}`;
      }
    }, "");
  }, "escapeUserAgent");
  var getUserAgentMiddlewareOptions = {
    name: "getUserAgentMiddleware",
    step: "build",
    priority: "low",
    tags: ["SET_USER_AGENT", "USER_AGENT"],
    override: true
  };
  var getUserAgentPlugin = __name((config) => ({
    applyToStack: (clientStack) => {
      clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
    }
  }), "getUserAgentPlugin");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rul
var require_dist_cjs30 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    CONFIG_USE_DUALSTACK_ENDPOINT: () => CONFIG_USE_DUALSTACK_ENDPOINT,
    CONFIG_USE_FIPS_ENDPOINT: () => CONFIG_USE_FIPS_ENDPOINT,
    DEFAULT_USE_DUALSTACK_ENDPOINT: () => DEFAULT_USE_DUALSTACK_ENDPOINT,
    DEFAULT_USE_FIPS_ENDPOINT: () => DEFAULT_USE_FIPS_ENDPOINT,
    ENV_USE_DUALSTACK_ENDPOINT: () => ENV_USE_DUALSTACK_ENDPOINT,
    ENV_USE_FIPS_ENDPOINT: () => ENV_USE_FIPS_ENDPOINT,
    NODE_REGION_CONFIG_FILE_OPTIONS: () => NODE_REGION_CONFIG_FILE_OPTIONS,
    NODE_REGION_CONFIG_OPTIONS: () => NODE_REGION_CONFIG_OPTIONS,
    NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS: () => NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS,
    NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS: () => NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS,
    REGION_ENV_NAME: () => REGION_ENV_NAME,
    REGION_INI_NAME: () => REGION_INI_NAME,
    getRegionInfo: () => getRegionInfo,
    resolveCustomEndpointsConfig: () => resolveCustomEndpointsConfig,
    resolveEndpointsConfig: () => resolveEndpointsConfig,
    resolveRegionConfig: () => resolveRegionConfig
  });
  module.exports = __toCommonJS(src_exports);
  var import_util_config_provider = require_dist_cjs22();
  var ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
  var CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
  var DEFAULT_USE_DUALSTACK_ENDPOINT = false;
  var NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => (0, import_util_config_provider.booleanSelector)(env, ENV_USE_DUALSTACK_ENDPOINT, import_util_config_provider.SelectorType.ENV),
    configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, CONFIG_USE_DUALSTACK_ENDPOINT, import_util_config_provider.SelectorType.CONFIG),
    default: false
  };
  var ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
  var CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
  var DEFAULT_USE_FIPS_ENDPOINT = false;
  var NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => (0, import_util_config_provider.booleanSelector)(env, ENV_USE_FIPS_ENDPOINT, import_util_config_provider.SelectorType.ENV),
    configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, CONFIG_USE_FIPS_ENDPOINT, import_util_config_provider.SelectorType.CONFIG),
    default: false
  };
  var import_util_middleware = require_dist_cjs20();
  var resolveCustomEndpointsConfig = __name((input) => {
    const { endpoint, urlParser } = input;
    return {
      ...input,
      tls: input.tls ?? true,
      endpoint: (0, import_util_middleware.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
      isCustomEndpoint: true,
      useDualstackEndpoint: (0, import_util_middleware.normalizeProvider)(input.useDualstackEndpoint ?? false)
    };
  }, "resolveCustomEndpointsConfig");
  var getEndpointFromRegion = __name(async (input) => {
    const { tls = true } = input;
    const region = await input.region();
    const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
    if (!dnsHostRegex.test(region)) {
      throw new Error("Invalid region in client config");
    }
    const useDualstackEndpoint = await input.useDualstackEndpoint();
    const useFipsEndpoint = await input.useFipsEndpoint();
    const { hostname } = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint }) ?? {};
    if (!hostname) {
      throw new Error("Cannot resolve hostname from client config");
    }
    return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
  }, "getEndpointFromRegion");
  var resolveEndpointsConfig = __name((input) => {
    const useDualstackEndpoint = (0, import_util_middleware.normalizeProvider)(input.useDualstackEndpoint ?? false);
    const { endpoint, useFipsEndpoint, urlParser } = input;
    return {
      ...input,
      tls: input.tls ?? true,
      endpoint: endpoint ? (0, import_util_middleware.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : () => getEndpointFromRegion({ ...input, useDualstackEndpoint, useFipsEndpoint }),
      isCustomEndpoint: !!endpoint,
      useDualstackEndpoint
    };
  }, "resolveEndpointsConfig");
  var REGION_ENV_NAME = "AWS_REGION";
  var REGION_INI_NAME = "region";
  var NODE_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[REGION_ENV_NAME],
    configFileSelector: (profile) => profile[REGION_INI_NAME],
    default: () => {
      throw new Error("Region is missing");
    }
  };
  var NODE_REGION_CONFIG_FILE_OPTIONS = {
    preferredFile: "credentials"
  };
  var isFipsRegion = __name((region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips")), "isFipsRegion");
  var getRealRegion = __name((region) => isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region, "getRealRegion");
  var resolveRegionConfig = __name((input) => {
    const { region, useFipsEndpoint } = input;
    if (!region) {
      throw new Error("Region is missing");
    }
    return {
      ...input,
      region: async () => {
        if (typeof region === "string") {
          return getRealRegion(region);
        }
        const providedRegion = await region();
        return getRealRegion(providedRegion);
      },
      useFipsEndpoint: async () => {
        const providedRegion = typeof region === "string" ? region : await region();
        if (isFipsRegion(providedRegion)) {
          return true;
        }
        return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
      }
    };
  }, "resolveRegionConfig");
  var getHostnameFromVariants = __name((variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
    var _a;
    return (_a = variants.find(({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))) == null ? undefined : _a.hostname;
  }, "getHostnameFromVariants");
  var getResolvedHostname = __name((resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : undefined, "getResolvedHostname");
  var getResolvedPartition = __name((region, { partitionHash }) => Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region)) ?? "aws", "getResolvedPartition");
  var getResolvedSigningRegion = __name((hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
    if (signingRegion) {
      return signingRegion;
    } else if (useFipsEndpoint) {
      const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
      const regionRegexmatchArray = hostname.match(regionRegexJs);
      if (regionRegexmatchArray) {
        return regionRegexmatchArray[0].slice(1, -1);
      }
    }
  }, "getResolvedSigningRegion");
  var getRegionInfo = __name((region, {
    useFipsEndpoint = false,
    useDualstackEndpoint = false,
    signingService,
    regionHash,
    partitionHash
  }) => {
    var _a, _b, _c, _d, _e;
    const partition = getResolvedPartition(region, { partitionHash });
    const resolvedRegion = region in regionHash ? region : ((_a = partitionHash[partition]) == null ? undefined : _a.endpoint) ?? region;
    const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
    const regionHostname = getHostnameFromVariants((_b = regionHash[resolvedRegion]) == null ? undefined : _b.variants, hostnameOptions);
    const partitionHostname = getHostnameFromVariants((_c = partitionHash[partition]) == null ? undefined : _c.variants, hostnameOptions);
    const hostname = getResolvedHostname(resolvedRegion, { regionHostname, partitionHostname });
    if (hostname === undefined) {
      throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
    }
    const signingRegion = getResolvedSigningRegion(hostname, {
      signingRegion: (_d = regionHash[resolvedRegion]) == null ? undefined : _d.signingRegion,
      regionRegex: partitionHash[partition].regionRegex,
      useFipsEndpoint
    });
    return {
      partition,
      signingService,
      hostname,
      ...signingRegion && { signingRegion },
      ...((_e = regionHash[resolvedRegion]) == null ? undefined : _e.signingService) && {
        signingService: regionHash[resolvedRegion].signingService
      }
    };
  }, "getRegionInfo");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.jsno
var require_dist_cjs31 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    resolveEventStreamSerdeConfig: () => resolveEventStreamSerdeConfig
  });
  module.exports = __toCommonJS(src_exports);
  var resolveEventStreamSerdeConfig = __name((input) => ({
    ...input,
    eventStreamMarshaller: input.eventStreamSerdeProvider(input)
  }), "resolveEventStreamSerdeConfig");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssol
var require_dist_cjs32 = __commonJS((exports, module) => {
  var contentLengthMiddleware = function(bodyLengthChecker) {
    return (next) => async (args) => {
      const request = args.request;
      if (import_protocol_http.HttpRequest.isInstance(request)) {
        const { body, headers } = request;
        if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
          try {
            const length = bodyLengthChecker(body);
            request.headers = {
              ...request.headers,
              [CONTENT_LENGTH_HEADER]: String(length)
            };
          } catch (error) {
          }
        }
      }
      return next({
        ...args,
        request
      });
    };
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    contentLengthMiddleware: () => contentLengthMiddleware,
    contentLengthMiddlewareOptions: () => contentLengthMiddlewareOptions,
    getContentLengthPlugin: () => getContentLengthPlugin
  });
  module.exports = __toCommonJS(src_exports);
  var import_protocol_http = require_dist_cjs2();
  var CONTENT_LENGTH_HEADER = "content-length";
  __name(contentLengthMiddleware, "contentLengthMiddleware");
  var contentLengthMiddlewareOptions = {
    step: "build",
    tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
    name: "contentLengthMiddleware",
    override: true
  };
  var getContentLengthPlugin = __name((options) => ({
    applyToStack: (clientStack) => {
      clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
    }
  }), "getContentLengthPlugin");
});

// node_modules/@aws-sdk/client-
var require_rng = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var rng = function() {
    if (poolPtr > rnds8Pool.length - 16) {
      _crypto.default.randomFillSync(rnds8Pool);
      poolPtr = 0;
    }
    return rnds8Pool.slice(poolPtr, poolPtr += 16);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = rng;
  var _crypto = _interopRequireDefault(__require("crypto"));
  var rnds8Pool = new Uint8Array(256);
  var poolPtr = rnds8Pool.length;
});

// node_modules/@aws-sdk/client-ss
var require_regex = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  exports.default = _default;
});

// node_modules/@aws-sdk/client-sso/d
var require_validate = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var validate = function(uuid) {
    return typeof uuid === "string" && _regex.default.test(uuid);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _regex = _interopRequireDefault(require_regex());
  var _default = validate;
  exports.default = _default;
});

// node_modules/@aws-sdk/client-sso/di
var require_stringify = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var stringify = function(arr, offset = 0) {
    const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
    if (!(0, _validate.default)(uuid)) {
      throw TypeError("Stringified UUID is invalid");
    }
    return uuid;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _validate = _interopRequireDefault(require_validate());
  var byteToHex = [];
  for (let i = 0;i < 256; ++i) {
    byteToHex.push((i + 256).toString(16).substr(1));
  }
  var _default = stringify;
  exports.default = _default;
});

// node_modules/@aws-sdk/client
var require_v1 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var v1 = function(options, buf, offset) {
    let i = buf && offset || 0;
    const b = buf || new Array(16);
    options = options || {};
    let node = options.node || _nodeId;
    let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;
    if (node == null || clockseq == null) {
      const seedBytes = options.random || (options.rng || _rng.default)();
      if (node == null) {
        node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
      }
      if (clockseq == null) {
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
      }
    }
    let msecs = options.msecs !== undefined ? options.msecs : Date.now();
    let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;
    const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
    if (dt < 0 && options.clockseq === undefined) {
      clockseq = clockseq + 1 & 16383;
    }
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
      nsecs = 0;
    }
    if (nsecs >= 1e4) {
      throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
    }
    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;
    msecs += 12219292800000;
    const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
    b[i++] = tl >>> 24 & 255;
    b[i++] = tl >>> 16 & 255;
    b[i++] = tl >>> 8 & 255;
    b[i++] = tl & 255;
    const tmh = msecs / 4294967296 * 1e4 & 268435455;
    b[i++] = tmh >>> 8 & 255;
    b[i++] = tmh & 255;
    b[i++] = tmh >>> 24 & 15 | 16;
    b[i++] = tmh >>> 16 & 255;
    b[i++] = clockseq >>> 8 | 128;
    b[i++] = clockseq & 255;
    for (let n = 0;n < 6; ++n) {
      b[i + n] = node[n];
    }
    return buf || (0, _stringify.default)(b);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _rng = _interopRequireDefault(require_rng());
  var _stringify = _interopRequireDefault(require_stringify());
  var _nodeId;
  var _clockseq;
  var _lastMSecs = 0;
  var _lastNSecs = 0;
  var _default = v1;
  exports.default = _default;
});

// node_modules/@aws-sdk/client-ss
var require_parse2 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var parse = function(uuid) {
    if (!(0, _validate.default)(uuid)) {
      throw TypeError("Invalid UUID");
    }
    let v;
    const arr = new Uint8Array(16);
    arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
    arr[1] = v >>> 16 & 255;
    arr[2] = v >>> 8 & 255;
    arr[3] = v & 255;
    arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
    arr[5] = v & 255;
    arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
    arr[7] = v & 255;
    arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
    arr[9] = v & 255;
    arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
    arr[11] = v / 4294967296 & 255;
    arr[12] = v >>> 24 & 255;
    arr[13] = v >>> 16 & 255;
    arr[14] = v >>> 8 & 255;
    arr[15] = v & 255;
    return arr;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _validate = _interopRequireDefault(require_validate());
  var _default = parse;
  exports.default = _default;
});

// node_modules/@aws-sdk/client-
var require_v35 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var stringToBytes = function(str) {
    str = unescape(encodeURIComponent(str));
    const bytes = [];
    for (let i = 0;i < str.length; ++i) {
      bytes.push(str.charCodeAt(i));
    }
    return bytes;
  };
  var _default = function(name, version, hashfunc) {
    function generateUUID(value, namespace, buf, offset) {
      if (typeof value === "string") {
        value = stringToBytes(value);
      }
      if (typeof namespace === "string") {
        namespace = (0, _parse.default)(namespace);
      }
      if (namespace.length !== 16) {
        throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
      }
      let bytes = new Uint8Array(16 + value.length);
      bytes.set(namespace);
      bytes.set(value, namespace.length);
      bytes = hashfunc(bytes);
      bytes[6] = bytes[6] & 15 | version;
      bytes[8] = bytes[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        for (let i = 0;i < 16; ++i) {
          buf[offset + i] = bytes[i];
        }
        return buf;
      }
      return (0, _stringify.default)(bytes);
    }
    try {
      generateUUID.name = name;
    } catch (err) {
    }
    generateUUID.DNS = DNS;
    generateUUID.URL = URL2;
    return generateUUID;
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  exports.URL = exports.DNS = undefined;
  var _stringify = _interopRequireDefault(require_stringify());
  var _parse = _interopRequireDefault(require_parse2());
  var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
  exports.DNS = DNS;
  var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  exports.URL = URL2;
});

// node_modules/@aws-sdk/client-
var require_md5 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var md5 = function(bytes) {
    if (Array.isArray(bytes)) {
      bytes = Buffer.from(bytes);
    } else if (typeof bytes === "string") {
      bytes = Buffer.from(bytes, "utf8");
    }
    return _crypto.default.createHash("md5").update(bytes).digest();
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _crypto = _interopRequireDefault(__require("crypto"));
  var _default = md5;
  exports.default = _default;
});

// node_modules/@aws-sdk/client
var require_v3 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _v = _interopRequireDefault(require_v35());
  var _md = _interopRequireDefault(require_md5());
  var v3 = (0, _v.default)("v3", 48, _md.default);
  var _default = v3;
  exports.default = _default;
});

// node_modules/@aws-sdk/client
var require_v4 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var v4 = function(options, buf, offset) {
    options = options || {};
    const rnds = options.random || (options.rng || _rng.default)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0;i < 16; ++i) {
        buf[offset + i] = rnds[i];
      }
      return buf;
    }
    return (0, _stringify.default)(rnds);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _rng = _interopRequireDefault(require_rng());
  var _stringify = _interopRequireDefault(require_stringify());
  var _default = v4;
  exports.default = _default;
});

// node_modules/@aws-sdk/client-s
var require_sha1 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var sha1 = function(bytes) {
    if (Array.isArray(bytes)) {
      bytes = Buffer.from(bytes);
    } else if (typeof bytes === "string") {
      bytes = Buffer.from(bytes, "utf8");
    }
    return _crypto.default.createHash("sha1").update(bytes).digest();
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _crypto = _interopRequireDefault(__require("crypto"));
  var _default = sha1;
  exports.default = _default;
});

// node_modules/@aws-sdk/client
var require_v5 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _v = _interopRequireDefault(require_v35());
  var _sha = _interopRequireDefault(require_sha1());
  var v5 = (0, _v.default)("v5", 80, _sha.default);
  var _default = v5;
  exports.default = _default;
});

// node_modules/@aws-sdk/client-
var require_nil = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = "00000000-0000-0000-0000-000000000000";
  exports.default = _default;
});

// node_modules/@aws-sdk/client-sso/
var require_version = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var version = function(uuid) {
    if (!(0, _validate.default)(uuid)) {
      throw TypeError("Invalid UUID");
    }
    return parseInt(uuid.substr(14, 1), 16);
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _validate = _interopRequireDefault(require_validate());
  var _default = version;
  exports.default = _default;
});

// node_modules/@aws-sdk/client-ss
var require_dist = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "v1", {
    enumerable: true,
    get: function() {
      return _v.default;
    }
  });
  Object.defineProperty(exports, "v3", {
    enumerable: true,
    get: function() {
      return _v2.default;
    }
  });
  Object.defineProperty(exports, "v4", {
    enumerable: true,
    get: function() {
      return _v3.default;
    }
  });
  Object.defineProperty(exports, "v5", {
    enumerable: true,
    get: function() {
      return _v4.default;
    }
  });
  Object.defineProperty(exports, "NIL", {
    enumerable: true,
    get: function() {
      return _nil.default;
    }
  });
  Object.defineProperty(exports, "version", {
    enumerable: true,
    get: function() {
      return _version.default;
    }
  });
  Object.defineProperty(exports, "validate", {
    enumerable: true,
    get: function() {
      return _validate.default;
    }
  });
  Object.defineProperty(exports, "stringify", {
    enumerable: true,
    get: function() {
      return _stringify.default;
    }
  });
  Object.defineProperty(exports, "parse", {
    enumerable: true,
    get: function() {
      return _parse.default;
    }
  });
  var _v = _interopRequireDefault(require_v1());
  var _v2 = _interopRequireDefault(require_v3());
  var _v3 = _interopRequireDefault(require_v4());
  var _v4 = _interopRequireDefault(require_v5());
  var _nil = _interopRequireDefault(require_nil());
  var _version = _interopRequireDefault(require_version());
  var _validate = _interopRequireDefault(require_validate());
  var _stringify = _interopRequireDefault(require_stringify());
  var _parse = _interopRequireDefault(require_parse2());
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver
var require_dist_cjs33 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    isClockSkewError: () => isClockSkewError,
    isRetryableByTrait: () => isRetryableByTrait,
    isServerError: () => isServerError,
    isThrottlingError: () => isThrottlingError,
    isTransientError: () => isTransientError
  });
  module.exports = __toCommonJS(src_exports);
  var CLOCK_SKEW_ERROR_CODES = [
    "AuthFailure",
    "InvalidSignatureException",
    "RequestExpired",
    "RequestInTheFuture",
    "RequestTimeTooSkewed",
    "SignatureDoesNotMatch"
  ];
  var THROTTLING_ERROR_CODES = [
    "BandwidthLimitExceeded",
    "EC2ThrottledException",
    "LimitExceededException",
    "PriorRequestNotComplete",
    "ProvisionedThroughputExceededException",
    "RequestLimitExceeded",
    "RequestThrottled",
    "RequestThrottledException",
    "SlowDown",
    "ThrottledException",
    "Throttling",
    "ThrottlingException",
    "TooManyRequestsException",
    "TransactionInProgressException"
  ];
  var TRANSIENT_ERROR_CODES = ["TimeoutError", "RequestTimeout", "RequestTimeoutException"];
  var TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
  var NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "ECONNREFUSED", "EPIPE", "ETIMEDOUT"];
  var isRetryableByTrait = __name((error) => error.$retryable !== undefined, "isRetryableByTrait");
  var isClockSkewError = __name((error) => CLOCK_SKEW_ERROR_CODES.includes(error.name), "isClockSkewError");
  var isThrottlingError = __name((error) => {
    var _a, _b;
    return ((_a = error.$metadata) == null ? undefined : _a.httpStatusCode) === 429 || THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) == null ? undefined : _b.throttling) == true;
  }, "isThrottlingError");
  var isTransientError = __name((error) => {
    var _a;
    return TRANSIENT_ERROR_CODES.includes(error.name) || NODEJS_TIMEOUT_ERROR_CODES.includes((error == null ? undefined : error.code) || "") || TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) == null ? undefined : _a.httpStatusCode) || 0);
  }, "isTransientError");
  var isServerError = __name((error) => {
    var _a;
    if (((_a = error.$metadata) == null ? undefined : _a.httpStatusCode) !== undefined) {
      const statusCode = error.$metadata.httpStatusCode;
      if (500 <= statusCode && statusCode <= 599 && !isTransientError(error)) {
        return true;
      }
      return false;
    }
    return false;
  }, "isServerError");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoin
var require_dist_cjs34 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    AdaptiveRetryStrategy: () => AdaptiveRetryStrategy,
    ConfiguredRetryStrategy: () => ConfiguredRetryStrategy,
    DEFAULT_MAX_ATTEMPTS: () => DEFAULT_MAX_ATTEMPTS,
    DEFAULT_RETRY_DELAY_BASE: () => DEFAULT_RETRY_DELAY_BASE,
    DEFAULT_RETRY_MODE: () => DEFAULT_RETRY_MODE,
    DefaultRateLimiter: () => DefaultRateLimiter,
    INITIAL_RETRY_TOKENS: () => INITIAL_RETRY_TOKENS,
    INVOCATION_ID_HEADER: () => INVOCATION_ID_HEADER,
    MAXIMUM_RETRY_DELAY: () => MAXIMUM_RETRY_DELAY,
    NO_RETRY_INCREMENT: () => NO_RETRY_INCREMENT,
    REQUEST_HEADER: () => REQUEST_HEADER,
    RETRY_COST: () => RETRY_COST,
    RETRY_MODES: () => RETRY_MODES,
    StandardRetryStrategy: () => StandardRetryStrategy,
    THROTTLING_RETRY_DELAY_BASE: () => THROTTLING_RETRY_DELAY_BASE,
    TIMEOUT_RETRY_COST: () => TIMEOUT_RETRY_COST
  });
  module.exports = __toCommonJS(src_exports);
  var RETRY_MODES = ((RETRY_MODES2) => {
    RETRY_MODES2["STANDARD"] = "standard";
    RETRY_MODES2["ADAPTIVE"] = "adaptive";
    return RETRY_MODES2;
  })(RETRY_MODES || {});
  var DEFAULT_MAX_ATTEMPTS = 3;
  var DEFAULT_RETRY_MODE = "standard";
  var import_service_error_classification = require_dist_cjs33();
  var _DefaultRateLimiter = class _DefaultRateLimiter2 {
    constructor(options) {
      this.currentCapacity = 0;
      this.enabled = false;
      this.lastMaxRate = 0;
      this.measuredTxRate = 0;
      this.requestCount = 0;
      this.lastTimestamp = 0;
      this.timeWindow = 0;
      this.beta = (options == null ? undefined : options.beta) ?? 0.7;
      this.minCapacity = (options == null ? undefined : options.minCapacity) ?? 1;
      this.minFillRate = (options == null ? undefined : options.minFillRate) ?? 0.5;
      this.scaleConstant = (options == null ? undefined : options.scaleConstant) ?? 0.4;
      this.smooth = (options == null ? undefined : options.smooth) ?? 0.8;
      const currentTimeInSeconds = this.getCurrentTimeInSeconds();
      this.lastThrottleTime = currentTimeInSeconds;
      this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
      this.fillRate = this.minFillRate;
      this.maxCapacity = this.minCapacity;
    }
    getCurrentTimeInSeconds() {
      return Date.now() / 1000;
    }
    async getSendToken() {
      return this.acquireTokenBucket(1);
    }
    async acquireTokenBucket(amount) {
      if (!this.enabled) {
        return;
      }
      this.refillTokenBucket();
      if (amount > this.currentCapacity) {
        const delay = (amount - this.currentCapacity) / this.fillRate * 1000;
        await new Promise((resolve) => setTimeout(resolve, delay));
      }
      this.currentCapacity = this.currentCapacity - amount;
    }
    refillTokenBucket() {
      const timestamp = this.getCurrentTimeInSeconds();
      if (!this.lastTimestamp) {
        this.lastTimestamp = timestamp;
        return;
      }
      const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
      this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
      this.lastTimestamp = timestamp;
    }
    updateClientSendingRate(response) {
      let calculatedRate;
      this.updateMeasuredRate();
      if ((0, import_service_error_classification.isThrottlingError)(response)) {
        const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
        this.lastMaxRate = rateToUse;
        this.calculateTimeWindow();
        this.lastThrottleTime = this.getCurrentTimeInSeconds();
        calculatedRate = this.cubicThrottle(rateToUse);
        this.enableTokenBucket();
      } else {
        this.calculateTimeWindow();
        calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
      }
      const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
      this.updateTokenBucketRate(newRate);
    }
    calculateTimeWindow() {
      this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
    }
    cubicThrottle(rateToUse) {
      return this.getPrecise(rateToUse * this.beta);
    }
    cubicSuccess(timestamp) {
      return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
    }
    enableTokenBucket() {
      this.enabled = true;
    }
    updateTokenBucketRate(newRate) {
      this.refillTokenBucket();
      this.fillRate = Math.max(newRate, this.minFillRate);
      this.maxCapacity = Math.max(newRate, this.minCapacity);
      this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
    }
    updateMeasuredRate() {
      const t = this.getCurrentTimeInSeconds();
      const timeBucket = Math.floor(t * 2) / 2;
      this.requestCount++;
      if (timeBucket > this.lastTxRateBucket) {
        const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
        this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
        this.requestCount = 0;
        this.lastTxRateBucket = timeBucket;
      }
    }
    getPrecise(num) {
      return parseFloat(num.toFixed(8));
    }
  };
  __name(_DefaultRateLimiter, "DefaultRateLimiter");
  var DefaultRateLimiter = _DefaultRateLimiter;
  var DEFAULT_RETRY_DELAY_BASE = 100;
  var MAXIMUM_RETRY_DELAY = 20 * 1000;
  var THROTTLING_RETRY_DELAY_BASE = 500;
  var INITIAL_RETRY_TOKENS = 500;
  var RETRY_COST = 5;
  var TIMEOUT_RETRY_COST = 10;
  var NO_RETRY_INCREMENT = 1;
  var INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
  var REQUEST_HEADER = "amz-sdk-request";
  var getDefaultRetryBackoffStrategy = __name(() => {
    let delayBase = DEFAULT_RETRY_DELAY_BASE;
    const computeNextBackoffDelay = __name((attempts) => {
      return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    }, "computeNextBackoffDelay");
    const setDelayBase = __name((delay) => {
      delayBase = delay;
    }, "setDelayBase");
    return {
      computeNextBackoffDelay,
      setDelayBase
    };
  }, "getDefaultRetryBackoffStrategy");
  var createDefaultRetryToken = __name(({
    retryDelay,
    retryCount,
    retryCost
  }) => {
    const getRetryCount = __name(() => retryCount, "getRetryCount");
    const getRetryDelay = __name(() => Math.min(MAXIMUM_RETRY_DELAY, retryDelay), "getRetryDelay");
    const getRetryCost = __name(() => retryCost, "getRetryCost");
    return {
      getRetryCount,
      getRetryDelay,
      getRetryCost
    };
  }, "createDefaultRetryToken");
  var _StandardRetryStrategy = class _StandardRetryStrategy2 {
    constructor(maxAttempts) {
      this.maxAttempts = maxAttempts;
      this.mode = "standard";
      this.capacity = INITIAL_RETRY_TOKENS;
      this.retryBackoffStrategy = getDefaultRetryBackoffStrategy();
      this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts;
    }
    async acquireInitialRetryToken(retryTokenScope) {
      return createDefaultRetryToken({
        retryDelay: DEFAULT_RETRY_DELAY_BASE,
        retryCount: 0
      });
    }
    async refreshRetryTokenForRetry(token, errorInfo) {
      const maxAttempts = await this.getMaxAttempts();
      if (this.shouldRetry(token, errorInfo, maxAttempts)) {
        const errorType = errorInfo.errorType;
        this.retryBackoffStrategy.setDelayBase(errorType === "THROTTLING" ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE);
        const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
        const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;
        const capacityCost = this.getCapacityCost(errorType);
        this.capacity -= capacityCost;
        return createDefaultRetryToken({
          retryDelay,
          retryCount: token.getRetryCount() + 1,
          retryCost: capacityCost
        });
      }
      throw new Error("No retry token available");
    }
    recordSuccess(token) {
      this.capacity = Math.max(INITIAL_RETRY_TOKENS, this.capacity + (token.getRetryCost() ?? NO_RETRY_INCREMENT));
    }
    getCapacity() {
      return this.capacity;
    }
    async getMaxAttempts() {
      try {
        return await this.maxAttemptsProvider();
      } catch (error) {
        console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`);
        return DEFAULT_MAX_ATTEMPTS;
      }
    }
    shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
      const attempts = tokenToRenew.getRetryCount() + 1;
      return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
    }
    getCapacityCost(errorType) {
      return errorType === "TRANSIENT" ? TIMEOUT_RETRY_COST : RETRY_COST;
    }
    isRetryableError(errorType) {
      return errorType === "THROTTLING" || errorType === "TRANSIENT";
    }
  };
  __name(_StandardRetryStrategy, "StandardRetryStrategy");
  var StandardRetryStrategy = _StandardRetryStrategy;
  var _AdaptiveRetryStrategy = class _AdaptiveRetryStrategy2 {
    constructor(maxAttemptsProvider, options) {
      this.maxAttemptsProvider = maxAttemptsProvider;
      this.mode = "adaptive";
      const { rateLimiter } = options ?? {};
      this.rateLimiter = rateLimiter ?? new DefaultRateLimiter;
      this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);
    }
    async acquireInitialRetryToken(retryTokenScope) {
      await this.rateLimiter.getSendToken();
      return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
    }
    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
      this.rateLimiter.updateClientSendingRate(errorInfo);
      return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
    }
    recordSuccess(token) {
      this.rateLimiter.updateClientSendingRate({});
      this.standardRetryStrategy.recordSuccess(token);
    }
  };
  __name(_AdaptiveRetryStrategy, "AdaptiveRetryStrategy");
  var AdaptiveRetryStrategy = _AdaptiveRetryStrategy;
  var _ConfiguredRetryStrategy = class _ConfiguredRetryStrategy2 extends StandardRetryStrategy {
    constructor(maxAttempts, computeNextBackoffDelay = DEFAULT_RETRY_DELAY_BASE) {
      super(typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts);
      if (typeof computeNextBackoffDelay === "number") {
        this.computeNextBackoffDelay = () => computeNextBackoffDelay;
      } else {
        this.computeNextBackoffDelay = computeNextBackoffDelay;
      }
    }
    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
      const token = await super.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
      token.getRetryDelay = () => this.computeNextBackoffDelay(token.getRetryCount());
      return token;
    }
  };
  __name(_ConfiguredRetryStrategy, "ConfiguredRetryStrategy");
  var ConfiguredRetryStrategy = _ConfiguredRetryStrategy;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.jsnode.jsjssand.jsm
var require_isStreamingPayload = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isStreamingPayload = undefined;
  var stream_1 = __require("stream");
  var isStreamingPayload = (request) => (request === null || request === undefined ? undefined : request.body) instanceof stream_1.Readable || typeof ReadableStream !== "undefined" && (request === null || request === undefined ? undefined : request.body) instanceof ReadableStream;
  exports.isStreamingPayload = isStreamingPayload;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rule
var require_dist_cjs35 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    AdaptiveRetryStrategy: () => AdaptiveRetryStrategy,
    CONFIG_MAX_ATTEMPTS: () => CONFIG_MAX_ATTEMPTS,
    CONFIG_RETRY_MODE: () => CONFIG_RETRY_MODE,
    ENV_MAX_ATTEMPTS: () => ENV_MAX_ATTEMPTS,
    ENV_RETRY_MODE: () => ENV_RETRY_MODE,
    NODE_MAX_ATTEMPT_CONFIG_OPTIONS: () => NODE_MAX_ATTEMPT_CONFIG_OPTIONS,
    NODE_RETRY_MODE_CONFIG_OPTIONS: () => NODE_RETRY_MODE_CONFIG_OPTIONS,
    StandardRetryStrategy: () => StandardRetryStrategy,
    defaultDelayDecider: () => defaultDelayDecider,
    defaultRetryDecider: () => defaultRetryDecider,
    getOmitRetryHeadersPlugin: () => getOmitRetryHeadersPlugin,
    getRetryAfterHint: () => getRetryAfterHint,
    getRetryPlugin: () => getRetryPlugin,
    omitRetryHeadersMiddleware: () => omitRetryHeadersMiddleware,
    omitRetryHeadersMiddlewareOptions: () => omitRetryHeadersMiddlewareOptions,
    resolveRetryConfig: () => resolveRetryConfig,
    retryMiddleware: () => retryMiddleware,
    retryMiddlewareOptions: () => retryMiddlewareOptions
  });
  module.exports = __toCommonJS(src_exports);
  var import_protocol_http = require_dist_cjs2();
  var import_uuid = require_dist();
  var import_util_retry = require_dist_cjs34();
  var getDefaultRetryQuota = __name((initialRetryTokens, options) => {
    const MAX_CAPACITY = initialRetryTokens;
    const noRetryIncrement = (options == null ? undefined : options.noRetryIncrement) ?? import_util_retry.NO_RETRY_INCREMENT;
    const retryCost = (options == null ? undefined : options.retryCost) ?? import_util_retry.RETRY_COST;
    const timeoutRetryCost = (options == null ? undefined : options.timeoutRetryCost) ?? import_util_retry.TIMEOUT_RETRY_COST;
    let availableCapacity = initialRetryTokens;
    const getCapacityAmount = __name((error) => error.name === "TimeoutError" ? timeoutRetryCost : retryCost, "getCapacityAmount");
    const hasRetryTokens = __name((error) => getCapacityAmount(error) <= availableCapacity, "hasRetryTokens");
    const retrieveRetryTokens = __name((error) => {
      if (!hasRetryTokens(error)) {
        throw new Error("No retry token available");
      }
      const capacityAmount = getCapacityAmount(error);
      availableCapacity -= capacityAmount;
      return capacityAmount;
    }, "retrieveRetryTokens");
    const releaseRetryTokens = __name((capacityReleaseAmount) => {
      availableCapacity += capacityReleaseAmount ?? noRetryIncrement;
      availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
    }, "releaseRetryTokens");
    return Object.freeze({
      hasRetryTokens,
      retrieveRetryTokens,
      releaseRetryTokens
    });
  }, "getDefaultRetryQuota");
  var defaultDelayDecider = __name((delayBase, attempts) => Math.floor(Math.min(import_util_retry.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase)), "defaultDelayDecider");
  var import_service_error_classification = require_dist_cjs33();
  var defaultRetryDecider = __name((error) => {
    if (!error) {
      return false;
    }
    return (0, import_service_error_classification.isRetryableByTrait)(error) || (0, import_service_error_classification.isClockSkewError)(error) || (0, import_service_error_classification.isThrottlingError)(error) || (0, import_service_error_classification.isTransientError)(error);
  }, "defaultRetryDecider");
  var asSdkError = __name((error) => {
    if (error instanceof Error)
      return error;
    if (error instanceof Object)
      return Object.assign(new Error, error);
    if (typeof error === "string")
      return new Error(error);
    return new Error(`AWS SDK error wrapper for ${error}`);
  }, "asSdkError");
  var _StandardRetryStrategy = class _StandardRetryStrategy2 {
    constructor(maxAttemptsProvider, options) {
      this.maxAttemptsProvider = maxAttemptsProvider;
      this.mode = import_util_retry.RETRY_MODES.STANDARD;
      this.retryDecider = (options == null ? undefined : options.retryDecider) ?? defaultRetryDecider;
      this.delayDecider = (options == null ? undefined : options.delayDecider) ?? defaultDelayDecider;
      this.retryQuota = (options == null ? undefined : options.retryQuota) ?? getDefaultRetryQuota(import_util_retry.INITIAL_RETRY_TOKENS);
    }
    shouldRetry(error, attempts, maxAttempts) {
      return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
    }
    async getMaxAttempts() {
      let maxAttempts;
      try {
        maxAttempts = await this.maxAttemptsProvider();
      } catch (error) {
        maxAttempts = import_util_retry.DEFAULT_MAX_ATTEMPTS;
      }
      return maxAttempts;
    }
    async retry(next, args, options) {
      let retryTokenAmount;
      let attempts = 0;
      let totalDelay = 0;
      const maxAttempts = await this.getMaxAttempts();
      const { request } = args;
      if (import_protocol_http.HttpRequest.isInstance(request)) {
        request.headers[import_util_retry.INVOCATION_ID_HEADER] = (0, import_uuid.v4)();
      }
      while (true) {
        try {
          if (import_protocol_http.HttpRequest.isInstance(request)) {
            request.headers[import_util_retry.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
          }
          if (options == null ? undefined : options.beforeRequest) {
            await options.beforeRequest();
          }
          const { response, output } = await next(args);
          if (options == null ? undefined : options.afterRequest) {
            options.afterRequest(response);
          }
          this.retryQuota.releaseRetryTokens(retryTokenAmount);
          output.$metadata.attempts = attempts + 1;
          output.$metadata.totalRetryDelay = totalDelay;
          return { response, output };
        } catch (e) {
          const err = asSdkError(e);
          attempts++;
          if (this.shouldRetry(err, attempts, maxAttempts)) {
            retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
            const delayFromDecider = this.delayDecider((0, import_service_error_classification.isThrottlingError)(err) ? import_util_retry.THROTTLING_RETRY_DELAY_BASE : import_util_retry.DEFAULT_RETRY_DELAY_BASE, attempts);
            const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
            const delay = Math.max(delayFromResponse || 0, delayFromDecider);
            totalDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
            continue;
          }
          if (!err.$metadata) {
            err.$metadata = {};
          }
          err.$metadata.attempts = attempts;
          err.$metadata.totalRetryDelay = totalDelay;
          throw err;
        }
      }
    }
  };
  __name(_StandardRetryStrategy, "StandardRetryStrategy");
  var StandardRetryStrategy = _StandardRetryStrategy;
  var getDelayFromRetryAfterHeader = __name((response) => {
    if (!import_protocol_http.HttpResponse.isInstance(response))
      return;
    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
    if (!retryAfterHeaderName)
      return;
    const retryAfter = response.headers[retryAfterHeaderName];
    const retryAfterSeconds = Number(retryAfter);
    if (!Number.isNaN(retryAfterSeconds))
      return retryAfterSeconds * 1000;
    const retryAfterDate = new Date(retryAfter);
    return retryAfterDate.getTime() - Date.now();
  }, "getDelayFromRetryAfterHeader");
  var _AdaptiveRetryStrategy = class _AdaptiveRetryStrategy2 extends StandardRetryStrategy {
    constructor(maxAttemptsProvider, options) {
      const { rateLimiter, ...superOptions } = options ?? {};
      super(maxAttemptsProvider, superOptions);
      this.rateLimiter = rateLimiter ?? new import_util_retry.DefaultRateLimiter;
      this.mode = import_util_retry.RETRY_MODES.ADAPTIVE;
    }
    async retry(next, args) {
      return super.retry(next, args, {
        beforeRequest: async () => {
          return this.rateLimiter.getSendToken();
        },
        afterRequest: (response) => {
          this.rateLimiter.updateClientSendingRate(response);
        }
      });
    }
  };
  __name(_AdaptiveRetryStrategy, "AdaptiveRetryStrategy");
  var AdaptiveRetryStrategy = _AdaptiveRetryStrategy;
  var import_util_middleware = require_dist_cjs20();
  var ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
  var CONFIG_MAX_ATTEMPTS = "max_attempts";
  var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => {
      const value = env[ENV_MAX_ATTEMPTS];
      if (!value)
        return;
      const maxAttempt = parseInt(value);
      if (Number.isNaN(maxAttempt)) {
        throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
      }
      return maxAttempt;
    },
    configFileSelector: (profile) => {
      const value = profile[CONFIG_MAX_ATTEMPTS];
      if (!value)
        return;
      const maxAttempt = parseInt(value);
      if (Number.isNaN(maxAttempt)) {
        throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
      }
      return maxAttempt;
    },
    default: import_util_retry.DEFAULT_MAX_ATTEMPTS
  };
  var resolveRetryConfig = __name((input) => {
    const { retryStrategy } = input;
    const maxAttempts = (0, import_util_middleware.normalizeProvider)(input.maxAttempts ?? import_util_retry.DEFAULT_MAX_ATTEMPTS);
    return {
      ...input,
      maxAttempts,
      retryStrategy: async () => {
        if (retryStrategy) {
          return retryStrategy;
        }
        const retryMode = await (0, import_util_middleware.normalizeProvider)(input.retryMode)();
        if (retryMode === import_util_retry.RETRY_MODES.ADAPTIVE) {
          return new import_util_retry.AdaptiveRetryStrategy(maxAttempts);
        }
        return new import_util_retry.StandardRetryStrategy(maxAttempts);
      }
    };
  }, "resolveRetryConfig");
  var ENV_RETRY_MODE = "AWS_RETRY_MODE";
  var CONFIG_RETRY_MODE = "retry_mode";
  var NODE_RETRY_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[ENV_RETRY_MODE],
    configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],
    default: import_util_retry.DEFAULT_RETRY_MODE
  };
  var omitRetryHeadersMiddleware = __name(() => (next) => async (args) => {
    const { request } = args;
    if (import_protocol_http.HttpRequest.isInstance(request)) {
      delete request.headers[import_util_retry.INVOCATION_ID_HEADER];
      delete request.headers[import_util_retry.REQUEST_HEADER];
    }
    return next(args);
  }, "omitRetryHeadersMiddleware");
  var omitRetryHeadersMiddlewareOptions = {
    name: "omitRetryHeadersMiddleware",
    tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
    relation: "before",
    toMiddleware: "awsAuthMiddleware",
    override: true
  };
  var getOmitRetryHeadersPlugin = __name((options) => ({
    applyToStack: (clientStack) => {
      clientStack.addRelativeTo(omitRetryHeadersMiddleware(), omitRetryHeadersMiddlewareOptions);
    }
  }), "getOmitRetryHeadersPlugin");
  var import_smithy_client = require_dist_cjs16();
  var import_isStreamingPayload = require_isStreamingPayload();
  var retryMiddleware = __name((options) => (next, context) => async (args) => {
    var _a;
    let retryStrategy = await options.retryStrategy();
    const maxAttempts = await options.maxAttempts();
    if (isRetryStrategyV2(retryStrategy)) {
      retryStrategy = retryStrategy;
      let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
      let lastError = new Error;
      let attempts = 0;
      let totalRetryDelay = 0;
      const { request } = args;
      const isRequest = import_protocol_http.HttpRequest.isInstance(request);
      if (isRequest) {
        request.headers[import_util_retry.INVOCATION_ID_HEADER] = (0, import_uuid.v4)();
      }
      while (true) {
        try {
          if (isRequest) {
            request.headers[import_util_retry.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
          }
          const { response, output } = await next(args);
          retryStrategy.recordSuccess(retryToken);
          output.$metadata.attempts = attempts + 1;
          output.$metadata.totalRetryDelay = totalRetryDelay;
          return { response, output };
        } catch (e) {
          const retryErrorInfo = getRetryErrorInfo(e);
          lastError = asSdkError(e);
          if (isRequest && (0, import_isStreamingPayload.isStreamingPayload)(request)) {
            (_a = context.logger instanceof import_smithy_client.NoOpLogger ? console : context.logger) == null || _a.warn("An error was encountered in a non-retryable streaming request.");
            throw lastError;
          }
          try {
            retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
          } catch (refreshError) {
            if (!lastError.$metadata) {
              lastError.$metadata = {};
            }
            lastError.$metadata.attempts = attempts + 1;
            lastError.$metadata.totalRetryDelay = totalRetryDelay;
            throw lastError;
          }
          attempts = retryToken.getRetryCount();
          const delay = retryToken.getRetryDelay();
          totalRetryDelay += delay;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
      }
    } else {
      retryStrategy = retryStrategy;
      if (retryStrategy == null ? undefined : retryStrategy.mode)
        context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
      return retryStrategy.retry(next, args);
    }
  }, "retryMiddleware");
  var isRetryStrategyV2 = __name((retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined", "isRetryStrategyV2");
  var getRetryErrorInfo = __name((error) => {
    const errorInfo = {
      errorType: getRetryErrorType(error)
    };
    const retryAfterHint = getRetryAfterHint(error.$response);
    if (retryAfterHint) {
      errorInfo.retryAfterHint = retryAfterHint;
    }
    return errorInfo;
  }, "getRetryErrorInfo");
  var getRetryErrorType = __name((error) => {
    if ((0, import_service_error_classification.isThrottlingError)(error))
      return "THROTTLING";
    if ((0, import_service_error_classification.isTransientError)(error))
      return "TRANSIENT";
    if ((0, import_service_error_classification.isServerError)(error))
      return "SERVER_ERROR";
    return "CLIENT_ERROR";
  }, "getRetryErrorType");
  var retryMiddlewareOptions = {
    name: "retryMiddleware",
    tags: ["RETRY"],
    step: "finalizeRequest",
    priority: "high",
    override: true
  };
  var getRetryPlugin = __name((options) => ({
    applyToStack: (clientStack) => {
      clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
    }
  }), "getRetryPlugin");
  var getRetryAfterHint = __name((response) => {
    if (!import_protocol_http.HttpResponse.isInstance(response))
      return;
    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
    if (!retryAfterHeaderName)
      return;
    const retryAfter = response.headers[retryAfterHeaderName];
    const retryAfterSeconds = Number(retryAfter);
    if (!Number.isNaN(retryAfterSeconds))
      return new Date(retryAfterSeconds * 1000);
    const retryAfterDate = new Date(retryAfter);
    return retryAfterDate;
  }, "getRetryAfterHint");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolve
var require_getHomeDir = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getHomeDir = undefined;
  var os_1 = __require("os");
  var path_1 = __require("path");
  var homeDirCache = {};
  var getHomeDirCacheKey = () => {
    if (process && process.geteuid) {
      return `${process.geteuid()}`;
    }
    return "DEFAULT";
  };
  var getHomeDir2 = () => {
    const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
    if (HOME)
      return HOME;
    if (USERPROFILE)
      return USERPROFILE;
    if (HOMEPATH)
      return `${HOMEDRIVE}${HOMEPATH}`;
    const homeDirCacheKey = getHomeDirCacheKey();
    if (!homeDirCache[homeDirCacheKey])
      homeDirCache[homeDirCacheKey] = (0, os_1.homedir)();
    return homeDirCache[homeDirCacheKey];
  };
  exports.getHomeDir = getHomeDir2;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.jsnode.
var require_getSSOTokenFilepath = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getSSOTokenFilepath = undefined;
  var crypto_1 = __require("crypto");
  var path_1 = __require("path");
  var getHomeDir_1 = require_getHomeDir();
  var getSSOTokenFilepath2 = (id) => {
    const hasher = (0, crypto_1.createHash)("sha1");
    const cacheName = hasher.update(id).digest("hex");
    return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
  };
  exports.getSSOTokenFilepath = getSSOTokenFilepath2;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.jsnode.
var require_getSSOTokenFromFile = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getSSOTokenFromFile = undefined;
  var fs_1 = __require("fs");
  var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
  var { readFile } = fs_1.promises;
  var getSSOTokenFromFile2 = async (id) => {
    const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);
    const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
    return JSON.parse(ssoTokenText);
  };
  exports.getSSOTokenFromFile = getSSOTokenFromFile2;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolv
var require_slurpFile = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.slurpFile = undefined;
  var fs_1 = __require("fs");
  var { readFile } = fs_1.promises;
  var filePromisesHash = {};
  var slurpFile = (path, options) => {
    if (!filePromisesHash[path] || (options === null || options === undefined ? undefined : options.ignoreCache)) {
      filePromisesHash[path] = readFile(path, "utf8");
    }
    return filePromisesHash[path];
  };
  exports.slurpFile = slurpFile;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_dist_cjs36 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    CONFIG_PREFIX_SEPARATOR: () => CONFIG_PREFIX_SEPARATOR,
    DEFAULT_PROFILE: () => DEFAULT_PROFILE,
    ENV_PROFILE: () => ENV_PROFILE,
    getProfileName: () => getProfileName,
    loadSharedConfigFiles: () => loadSharedConfigFiles,
    loadSsoSessionData: () => loadSsoSessionData,
    parseKnownFiles: () => parseKnownFiles
  });
  module.exports = __toCommonJS(src_exports);
  __reExport(src_exports, require_getHomeDir(), module.exports);
  var ENV_PROFILE = "AWS_PROFILE";
  var DEFAULT_PROFILE = "default";
  var getProfileName = __name((init) => init.profile || process.env[ENV_PROFILE] || DEFAULT_PROFILE, "getProfileName");
  __reExport(src_exports, require_getSSOTokenFilepath(), module.exports);
  __reExport(src_exports, require_getSSOTokenFromFile(), module.exports);
  var import_types = require_dist_cjs();
  var getConfigData = __name((data) => Object.entries(data).filter(([key]) => {
    const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
    if (indexOfSeparator === -1) {
      return false;
    }
    return Object.values(import_types.IniSectionType).includes(key.substring(0, indexOfSeparator));
  }).reduce((acc, [key, value]) => {
    const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
    const updatedKey = key.substring(0, indexOfSeparator) === import_types.IniSectionType.PROFILE ? key.substring(indexOfSeparator + 1) : key;
    acc[updatedKey] = value;
    return acc;
  }, {
    ...data.default && { default: data.default }
  }), "getConfigData");
  var import_path = __require("path");
  var import_getHomeDir = require_getHomeDir();
  var ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
  var getConfigFilepath = __name(() => process.env[ENV_CONFIG_PATH] || (0, import_path.join)((0, import_getHomeDir.getHomeDir)(), ".aws", "config"), "getConfigFilepath");
  var import_getHomeDir2 = require_getHomeDir();
  var ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
  var getCredentialsFilepath = __name(() => process.env[ENV_CREDENTIALS_PATH] || (0, import_path.join)((0, import_getHomeDir2.getHomeDir)(), ".aws", "credentials"), "getCredentialsFilepath");
  var prefixKeyRegex = /^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/;
  var profileNameBlockList = ["__proto__", "profile __proto__"];
  var parseIni = __name((iniData) => {
    const map = {};
    let currentSection;
    let currentSubSection;
    for (const iniLine of iniData.split(/\r?\n/)) {
      const trimmedLine = iniLine.split(/(^|\s)[;#]/)[0].trim();
      const isSection = trimmedLine[0] === "[" && trimmedLine[trimmedLine.length - 1] === "]";
      if (isSection) {
        currentSection = undefined;
        currentSubSection = undefined;
        const sectionName = trimmedLine.substring(1, trimmedLine.length - 1);
        const matches = prefixKeyRegex.exec(sectionName);
        if (matches) {
          const [, prefix, , name] = matches;
          if (Object.values(import_types.IniSectionType).includes(prefix)) {
            currentSection = [prefix, name].join(CONFIG_PREFIX_SEPARATOR);
          }
        } else {
          currentSection = sectionName;
        }
        if (profileNameBlockList.includes(sectionName)) {
          throw new Error(`Found invalid profile name "${sectionName}"`);
        }
      } else if (currentSection) {
        const indexOfEqualsSign = trimmedLine.indexOf("=");
        if (![0, -1].includes(indexOfEqualsSign)) {
          const [name, value] = [
            trimmedLine.substring(0, indexOfEqualsSign).trim(),
            trimmedLine.substring(indexOfEqualsSign + 1).trim()
          ];
          if (value === "") {
            currentSubSection = name;
          } else {
            if (currentSubSection && iniLine.trimStart() === iniLine) {
              currentSubSection = undefined;
            }
            map[currentSection] = map[currentSection] || {};
            const key = currentSubSection ? [currentSubSection, name].join(CONFIG_PREFIX_SEPARATOR) : name;
            map[currentSection][key] = value;
          }
        }
      }
    }
    return map;
  }, "parseIni");
  var import_slurpFile = require_slurpFile();
  var swallowError = __name(() => ({}), "swallowError");
  var CONFIG_PREFIX_SEPARATOR = ".";
  var loadSharedConfigFiles = __name(async (init = {}) => {
    const { filepath = getCredentialsFilepath(), configFilepath = getConfigFilepath() } = init;
    const parsedFiles = await Promise.all([
      (0, import_slurpFile.slurpFile)(configFilepath, {
        ignoreCache: init.ignoreCache
      }).then(parseIni).then(getConfigData).catch(swallowError),
      (0, import_slurpFile.slurpFile)(filepath, {
        ignoreCache: init.ignoreCache
      }).then(parseIni).catch(swallowError)
    ]);
    return {
      configFile: parsedFiles[0],
      credentialsFile: parsedFiles[1]
    };
  }, "loadSharedConfigFiles");
  var getSsoSessionData = __name((data) => Object.entries(data).filter(([key]) => key.startsWith(import_types.IniSectionType.SSO_SESSION + CONFIG_PREFIX_SEPARATOR)).reduce((acc, [key, value]) => ({ ...acc, [key.split(CONFIG_PREFIX_SEPARATOR)[1]]: value }), {}), "getSsoSessionData");
  var import_slurpFile2 = require_slurpFile();
  var swallowError2 = __name(() => ({}), "swallowError");
  var loadSsoSessionData = __name(async (init = {}) => (0, import_slurpFile2.slurpFile)(init.configFilepath ?? getConfigFilepath()).then(parseIni).then(getSsoSessionData).catch(swallowError2), "loadSsoSessionData");
  var mergeConfigFiles = __name((...files) => {
    const merged = {};
    for (const file of files) {
      for (const [key, values] of Object.entries(file)) {
        if (merged[key] !== undefined) {
          Object.assign(merged[key], values);
        } else {
          merged[key] = values;
        }
      }
    }
    return merged;
  }, "mergeConfigFiles");
  var parseKnownFiles = __name(async (init) => {
    const parsedFiles = await loadSharedConfigFiles(init);
    return mergeConfigFiles(parsedFiles.configFile, parsedFiles.credentialsFile);
  }, "parseKnownFiles");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.
var require_dist_cjs37 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    loadConfig: () => loadConfig
  });
  module.exports = __toCommonJS(src_exports);
  var import_property_provider = require_dist_cjs25();
  var fromEnv = __name((envVarSelector) => async () => {
    try {
      const config = envVarSelector(process.env);
      if (config === undefined) {
        throw new Error;
      }
      return config;
    } catch (e) {
      throw new import_property_provider.CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);
    }
  }, "fromEnv");
  var import_shared_ini_file_loader = require_dist_cjs36();
  var fromSharedConfigFiles = __name((configSelector, { preferredFile = "config", ...init } = {}) => async () => {
    const profile = (0, import_shared_ini_file_loader.getProfileName)(init);
    const { configFile, credentialsFile } = await (0, import_shared_ini_file_loader.loadSharedConfigFiles)(init);
    const profileFromCredentials = credentialsFile[profile] || {};
    const profileFromConfig = configFile[profile] || {};
    const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
    try {
      const cfgFile = preferredFile === "config" ? configFile : credentialsFile;
      const configValue = configSelector(mergedProfile, cfgFile);
      if (configValue === undefined) {
        throw new Error;
      }
      return configValue;
    } catch (e) {
      throw new import_property_provider.CredentialsProviderError(e.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
    }
  }, "fromSharedConfigFiles");
  var isFunction = __name((func) => typeof func === "function", "isFunction");
  var fromStatic = __name((defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0, import_property_provider.fromStatic)(defaultValue), "fromStatic");
  var loadConfig = __name(({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, import_property_provider.memoize)((0, import_property_provider.chain)(fromEnv(environmentVariableSelector), fromSharedConfigFiles(configFileSelector, configuration), fromStatic(defaultValue))), "loadConfig");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.jsnode.jsjssan
var require_getEndpointUrlConfig = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getEndpointUrlConfig = undefined;
  var shared_ini_file_loader_1 = require_dist_cjs36();
  var ENV_ENDPOINT_URL = "AWS_ENDPOINT_URL";
  var CONFIG_ENDPOINT_URL = "endpoint_url";
  var getEndpointUrlConfig = (serviceId) => ({
    environmentVariableSelector: (env) => {
      const serviceSuffixParts = serviceId.split(" ").map((w) => w.toUpperCase());
      const serviceEndpointUrl = env[[ENV_ENDPOINT_URL, ...serviceSuffixParts].join("_")];
      if (serviceEndpointUrl)
        return serviceEndpointUrl;
      const endpointUrl = env[ENV_ENDPOINT_URL];
      if (endpointUrl)
        return endpointUrl;
      return;
    },
    configFileSelector: (profile, config) => {
      if (config && profile.services) {
        const servicesSection = config[["services", profile.services].join(shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR)];
        if (servicesSection) {
          const servicePrefixParts = serviceId.split(" ").map((w) => w.toLowerCase());
          const endpointUrl2 = servicesSection[[servicePrefixParts.join("_"), CONFIG_ENDPOINT_URL].join(shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR)];
          if (endpointUrl2)
            return endpointUrl2;
        }
      }
      const endpointUrl = profile[CONFIG_ENDPOINT_URL];
      if (endpointUrl)
        return endpointUrl;
      return;
    },
    default: undefined
  });
  exports.getEndpointUrlConfig = getEndpointUrlConfig;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.jsnode.jsjssand
var require_getEndpointFromConfig = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getEndpointFromConfig = undefined;
  var node_config_provider_1 = require_dist_cjs37();
  var getEndpointUrlConfig_1 = require_getEndpointUrlConfig();
  var getEndpointFromConfig = async (serviceId) => (0, node_config_provider_1.loadConfig)((0, getEndpointUrlConfig_1.getEndpointUrlConfig)(serviceId))();
  exports.getEndpointFromConfig = getEndpointFromConfig;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rulese
var require_dist_cjs38 = __commonJS((exports, module) => {
  var parseQueryString = function(querystring) {
    const query = {};
    querystring = querystring.replace(/^\?/, "");
    if (querystring) {
      for (const pair of querystring.split("&")) {
        let [key, value = null] = pair.split("=");
        key = decodeURIComponent(key);
        if (value) {
          value = decodeURIComponent(value);
        }
        if (!(key in query)) {
          query[key] = value;
        } else if (Array.isArray(query[key])) {
          query[key].push(value);
        } else {
          query[key] = [query[key], value];
        }
      }
    }
    return query;
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    parseQueryString: () => parseQueryString
  });
  module.exports = __toCommonJS(src_exports);
  __name(parseQueryString, "parseQueryString");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoin
var require_dist_cjs39 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    parseUrl: () => parseUrl
  });
  module.exports = __toCommonJS(src_exports);
  var import_querystring_parser = require_dist_cjs38();
  var parseUrl = __name((url) => {
    if (typeof url === "string") {
      return parseUrl(new URL(url));
    }
    const { hostname, pathname, port, protocol, search } = url;
    let query;
    if (search) {
      query = (0, import_querystring_parser.parseQueryString)(search);
    }
    return {
      hostname,
      port: port ? parseInt(port) : undefined,
      protocol,
      path: pathname,
      query
    };
  }, "parseUrl");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rule
var require_dist_cjs40 = __commonJS((exports, module) => {
  var getSerdePlugin = function(config, serializer, deserializer) {
    return {
      applyToStack: (commandStack) => {
        commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);
        commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);
      }
    };
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    deserializerMiddleware: () => deserializerMiddleware,
    deserializerMiddlewareOption: () => deserializerMiddlewareOption,
    getSerdePlugin: () => getSerdePlugin,
    serializerMiddleware: () => serializerMiddleware,
    serializerMiddlewareOption: () => serializerMiddlewareOption
  });
  module.exports = __toCommonJS(src_exports);
  var deserializerMiddleware = __name((options, deserializer) => (next, context) => async (args) => {
    const { response } = await next(args);
    try {
      const parsed = await deserializer(response, options);
      return {
        response,
        output: parsed
      };
    } catch (error) {
      Object.defineProperty(error, "$response", {
        value: response
      });
      if (!("$metadata" in error)) {
        const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.\$response on this object.`;
        error.message += "\n  " + hint;
      }
      throw error;
    }
  }, "deserializerMiddleware");
  var serializerMiddleware = __name((options, serializer) => (next, context) => async (args) => {
    var _a;
    const endpoint = ((_a = context.endpointV2) == null ? undefined : _a.url) && options.urlParser ? async () => options.urlParser(context.endpointV2.url) : options.endpoint;
    if (!endpoint) {
      throw new Error("No valid endpoint provider available.");
    }
    const request = await serializer(args.input, { ...options, endpoint });
    return next({
      ...args,
      request
    });
  }, "serializerMiddleware");
  var deserializerMiddlewareOption = {
    name: "deserializerMiddleware",
    step: "deserialize",
    tags: ["DESERIALIZER"],
    override: true
  };
  var serializerMiddlewareOption = {
    name: "serializerMiddleware",
    step: "serialize",
    tags: ["SERIALIZER"],
    override: true
  };
  __name(getSerdePlugin, "getSerdePlugin");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset
var require_dist_cjs41 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    endpointMiddleware: () => endpointMiddleware,
    endpointMiddlewareOptions: () => endpointMiddlewareOptions,
    getEndpointFromInstructions: () => getEndpointFromInstructions,
    getEndpointPlugin: () => getEndpointPlugin,
    resolveEndpointConfig: () => resolveEndpointConfig,
    resolveParams: () => resolveParams,
    toEndpointV1: () => toEndpointV1
  });
  module.exports = __toCommonJS(src_exports);
  var resolveParamsForS3 = __name(async (endpointParams) => {
    const bucket = (endpointParams == null ? undefined : endpointParams.Bucket) || "";
    if (typeof endpointParams.Bucket === "string") {
      endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
    }
    if (isArnBucketName(bucket)) {
      if (endpointParams.ForcePathStyle === true) {
        throw new Error("Path-style addressing cannot be used with ARN buckets");
      }
    } else if (!isDnsCompatibleBucketName(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
      endpointParams.ForcePathStyle = true;
    }
    if (endpointParams.DisableMultiRegionAccessPoints) {
      endpointParams.disableMultiRegionAccessPoints = true;
      endpointParams.DisableMRAP = true;
    }
    return endpointParams;
  }, "resolveParamsForS3");
  var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
  var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
  var DOTS_PATTERN = /\.\./;
  var isDnsCompatibleBucketName = __name((bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName), "isDnsCompatibleBucketName");
  var isArnBucketName = __name((bucketName) => {
    const [arn, partition, service, region, account, typeOrId] = bucketName.split(":");
    const isArn = arn === "arn" && bucketName.split(":").length >= 6;
    const isValidArn = [arn, partition, service, account, typeOrId].filter(Boolean).length === 5;
    if (isArn && !isValidArn) {
      throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
    }
    return arn === "arn" && !!partition && !!service && !!account && !!typeOrId;
  }, "isArnBucketName");
  var createConfigValueProvider = __name((configKey, canonicalEndpointParamKey, config) => {
    const configProvider = __name(async () => {
      const configValue = config[configKey] ?? config[canonicalEndpointParamKey];
      if (typeof configValue === "function") {
        return configValue();
      }
      return configValue;
    }, "configProvider");
    if (configKey === "credentialScope" || canonicalEndpointParamKey === "CredentialScope") {
      return async () => {
        const credentials = typeof config.credentials === "function" ? await config.credentials() : config.credentials;
        const configValue = (credentials == null ? undefined : credentials.credentialScope) ?? (credentials == null ? undefined : credentials.CredentialScope);
        return configValue;
      };
    }
    if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
      return async () => {
        const endpoint = await configProvider();
        if (endpoint && typeof endpoint === "object") {
          if ("url" in endpoint) {
            return endpoint.url.href;
          }
          if ("hostname" in endpoint) {
            const { protocol, hostname, port, path } = endpoint;
            return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
          }
        }
        return endpoint;
      };
    }
    return configProvider;
  }, "createConfigValueProvider");
  var import_getEndpointFromConfig = require_getEndpointFromConfig();
  var import_url_parser = require_dist_cjs39();
  var toEndpointV1 = __name((endpoint) => {
    if (typeof endpoint === "object") {
      if ("url" in endpoint) {
        return (0, import_url_parser.parseUrl)(endpoint.url);
      }
      return endpoint;
    }
    return (0, import_url_parser.parseUrl)(endpoint);
  }, "toEndpointV1");
  var getEndpointFromInstructions = __name(async (commandInput, instructionsSupplier, clientConfig, context) => {
    if (!clientConfig.endpoint) {
      const endpointFromConfig = await (0, import_getEndpointFromConfig.getEndpointFromConfig)(clientConfig.serviceId || "");
      if (endpointFromConfig) {
        clientConfig.endpoint = () => Promise.resolve(toEndpointV1(endpointFromConfig));
      }
    }
    const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);
    if (typeof clientConfig.endpointProvider !== "function") {
      throw new Error("config.endpointProvider is not set.");
    }
    const endpoint = clientConfig.endpointProvider(endpointParams, context);
    return endpoint;
  }, "getEndpointFromInstructions");
  var resolveParams = __name(async (commandInput, instructionsSupplier, clientConfig) => {
    var _a;
    const endpointParams = {};
    const instructions = ((_a = instructionsSupplier == null ? undefined : instructionsSupplier.getEndpointParameterInstructions) == null ? undefined : _a.call(instructionsSupplier)) || {};
    for (const [name, instruction] of Object.entries(instructions)) {
      switch (instruction.type) {
        case "staticContextParams":
          endpointParams[name] = instruction.value;
          break;
        case "contextParams":
          endpointParams[name] = commandInput[instruction.name];
          break;
        case "clientContextParams":
        case "builtInParams":
          endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();
          break;
        default:
          throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
      }
    }
    if (Object.keys(instructions).length === 0) {
      Object.assign(endpointParams, clientConfig);
    }
    if (String(clientConfig.serviceId).toLowerCase() === "s3") {
      await resolveParamsForS3(endpointParams);
    }
    return endpointParams;
  }, "resolveParams");
  var import_util_middleware = require_dist_cjs20();
  var endpointMiddleware = __name(({
    config,
    instructions
  }) => {
    return (next, context) => async (args) => {
      var _a, _b, _c;
      const endpoint = await getEndpointFromInstructions(args.input, {
        getEndpointParameterInstructions() {
          return instructions;
        }
      }, { ...config }, context);
      context.endpointV2 = endpoint;
      context.authSchemes = (_a = endpoint.properties) == null ? undefined : _a.authSchemes;
      const authScheme = (_b = context.authSchemes) == null ? undefined : _b[0];
      if (authScheme) {
        context["signing_region"] = authScheme.signingRegion;
        context["signing_service"] = authScheme.signingName;
        const smithyContext = (0, import_util_middleware.getSmithyContext)(context);
        const httpAuthOption = (_c = smithyContext == null ? undefined : smithyContext.selectedHttpAuthScheme) == null ? undefined : _c.httpAuthOption;
        if (httpAuthOption) {
          httpAuthOption.signingProperties = Object.assign(httpAuthOption.signingProperties || {}, {
            signing_region: authScheme.signingRegion,
            signingRegion: authScheme.signingRegion,
            signing_service: authScheme.signingName,
            signingName: authScheme.signingName,
            signingRegionSet: authScheme.signingRegionSet
          }, authScheme.properties);
        }
      }
      return next({
        ...args
      });
    };
  }, "endpointMiddleware");
  var import_middleware_serde = require_dist_cjs40();
  var endpointMiddlewareOptions = {
    step: "serialize",
    tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
    name: "endpointV2Middleware",
    override: true,
    relation: "before",
    toMiddleware: import_middleware_serde.serializerMiddlewareOption.name
  };
  var getEndpointPlugin = __name((config, instructions) => ({
    applyToStack: (clientStack) => {
      clientStack.addRelativeTo(endpointMiddleware({
        config,
        instructions
      }), endpointMiddlewareOptions);
    }
  }), "getEndpointPlugin");
  var resolveEndpointConfig = __name((input) => {
    const tls = input.tls ?? true;
    const { endpoint } = input;
    const customEndpointProvider = endpoint != null ? async () => toEndpointV1(await (0, import_util_middleware.normalizeProvider)(endpoint)()) : undefined;
    const isCustomEndpoint = !!endpoint;
    return {
      ...input,
      endpoint: customEndpointProvider,
      tls,
      isCustomEndpoint,
      useDualstackEndpoint: (0, import_util_middleware.normalizeProvider)(input.useDualstackEndpoint ?? false),
      useFipsEndpoint: (0, import_util_middleware.normalizeProvider)(input.useFipsEndpoint ?? false)
    };
  }, "resolveEndpointConfig");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/
var require_dist_cjs42 = __commonJS((exports, module) => {
  var escapeAttribute = function(value) {
    return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
  };
  var escapeElement = function(value) {
    return value.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#x0D;").replace(/\n/g, "&#x0A;").replace(/\u0085/g, "&#x85;").replace(/\u2028/, "&#x2028;");
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    XmlNode: () => XmlNode,
    XmlText: () => XmlText
  });
  module.exports = __toCommonJS(src_exports);
  __name(escapeAttribute, "escapeAttribute");
  __name(escapeElement, "escapeElement");
  var _XmlText = class _XmlText2 {
    constructor(value) {
      this.value = value;
    }
    toString() {
      return escapeElement("" + this.value);
    }
  };
  __name(_XmlText, "XmlText");
  var XmlText = _XmlText;
  var _XmlNode = class _XmlNode2 {
    constructor(name, children = []) {
      this.name = name;
      this.children = children;
      this.attributes = {};
    }
    static of(name, childText, withName) {
      const node = new _XmlNode2(name);
      if (childText !== undefined) {
        node.addChildNode(new XmlText(childText));
      }
      if (withName !== undefined) {
        node.withName(withName);
      }
      return node;
    }
    withName(name) {
      this.name = name;
      return this;
    }
    addAttribute(name, value) {
      this.attributes[name] = value;
      return this;
    }
    addChildNode(child) {
      this.children.push(child);
      return this;
    }
    removeAttribute(name) {
      delete this.attributes[name];
      return this;
    }
    n(name) {
      this.name = name;
      return this;
    }
    c(child) {
      this.children.push(child);
      return this;
    }
    a(name, value) {
      if (value != null) {
        this.attributes[name] = value;
      }
      return this;
    }
    cc(input, field, withName = field) {
      if (input[field] != null) {
        const node = _XmlNode2.of(field, input[field]).withName(withName);
        this.c(node);
      }
    }
    l(input, listName, memberName, valueProvider) {
      if (input[listName] != null) {
        const nodes = valueProvider();
        nodes.map((node) => {
          node.withName(memberName);
          this.c(node);
        });
      }
    }
    lc(input, listName, memberName, valueProvider) {
      if (input[listName] != null) {
        const nodes = valueProvider();
        const containerNode = new _XmlNode2(memberName);
        nodes.map((node) => {
          containerNode.c(node);
        });
        this.c(containerNode);
      }
    }
    toString() {
      const hasChildren = Boolean(this.children.length);
      let xmlText = `<${this.name}`;
      const attributes = this.attributes;
      for (const attributeName of Object.keys(attributes)) {
        const attribute = attributes[attributeName];
        if (attribute != null) {
          xmlText += ` ${attributeName}="${escapeAttribute("" + attribute)}"`;
        }
      }
      return xmlText += !hasChildren ? "/>" : `>${this.children.map((c) => c.toString()).join("")}</${this.name}>`;
    }
  };
  __name(_XmlNode, "XmlNode");
  var XmlNode = _XmlNode;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/e
var require_dist_cjs43 = __commonJS((exports, module) => {
  var convertHttpAuthSchemesToMap = function(httpAuthSchemes) {
    const map = new Map;
    for (const scheme of httpAuthSchemes) {
      map.set(scheme.schemeId, scheme);
    }
    return map;
  };
  var requestBuilder = function(input, context) {
    return new RequestBuilder(input, context);
  };
  var createPaginator = function(ClientCtor, CommandCtor, inputTokenName, outputTokenName, pageSizeTokenName) {
    return __name(async function* paginateOperation(config, input, ...additionalArguments) {
      let token = config.startingToken || undefined;
      let hasNext = true;
      let page;
      while (hasNext) {
        input[inputTokenName] = token;
        if (pageSizeTokenName) {
          input[pageSizeTokenName] = input[pageSizeTokenName] ?? config.pageSize;
        }
        if (config.client instanceof ClientCtor) {
          page = await makePagedClientRequest(CommandCtor, config.client, input, ...additionalArguments);
        } else {
          throw new Error(`Invalid client, expected instance of ${ClientCtor.name}`);
        }
        yield page;
        const prevToken = token;
        token = page[outputTokenName];
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return;
    }, "paginateOperation");
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    DefaultIdentityProviderConfig: () => DefaultIdentityProviderConfig,
    EXPIRATION_MS: () => EXPIRATION_MS,
    HttpApiKeyAuthSigner: () => HttpApiKeyAuthSigner,
    HttpBearerAuthSigner: () => HttpBearerAuthSigner,
    NoAuthSigner: () => NoAuthSigner,
    RequestBuilder: () => RequestBuilder,
    createIsIdentityExpiredFunction: () => createIsIdentityExpiredFunction,
    createPaginator: () => createPaginator,
    doesIdentityRequireRefresh: () => doesIdentityRequireRefresh,
    getHttpAuthSchemeEndpointRuleSetPlugin: () => getHttpAuthSchemeEndpointRuleSetPlugin,
    getHttpAuthSchemePlugin: () => getHttpAuthSchemePlugin,
    getHttpSigningPlugin: () => getHttpSigningPlugin,
    getSmithyContext: () => getSmithyContext3,
    httpAuthSchemeEndpointRuleSetMiddlewareOptions: () => httpAuthSchemeEndpointRuleSetMiddlewareOptions,
    httpAuthSchemeMiddleware: () => httpAuthSchemeMiddleware,
    httpAuthSchemeMiddlewareOptions: () => httpAuthSchemeMiddlewareOptions,
    httpSigningMiddleware: () => httpSigningMiddleware,
    httpSigningMiddlewareOptions: () => httpSigningMiddlewareOptions,
    isIdentityExpired: () => isIdentityExpired,
    memoizeIdentityProvider: () => memoizeIdentityProvider,
    normalizeProvider: () => normalizeProvider,
    requestBuilder: () => requestBuilder
  });
  module.exports = __toCommonJS(src_exports);
  var import_util_middleware = require_dist_cjs20();
  __name(convertHttpAuthSchemesToMap, "convertHttpAuthSchemesToMap");
  var httpAuthSchemeMiddleware = __name((config, mwOptions) => (next, context) => async (args) => {
    var _a;
    const options = config.httpAuthSchemeProvider(await mwOptions.httpAuthSchemeParametersProvider(config, context, args.input));
    const authSchemes = convertHttpAuthSchemesToMap(config.httpAuthSchemes);
    const smithyContext = (0, import_util_middleware.getSmithyContext)(context);
    const failureReasons = [];
    for (const option of options) {
      const scheme = authSchemes.get(option.schemeId);
      if (!scheme) {
        failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` was not enabled for this service.`);
        continue;
      }
      const identityProvider = scheme.identityProvider(await mwOptions.identityProviderConfigProvider(config));
      if (!identityProvider) {
        failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` did not have an IdentityProvider configured.`);
        continue;
      }
      const { identityProperties = {}, signingProperties = {} } = ((_a = option.propertiesExtractor) == null ? undefined : _a.call(option, config, context)) || {};
      option.identityProperties = Object.assign(option.identityProperties || {}, identityProperties);
      option.signingProperties = Object.assign(option.signingProperties || {}, signingProperties);
      smithyContext.selectedHttpAuthScheme = {
        httpAuthOption: option,
        identity: await identityProvider(option.identityProperties),
        signer: scheme.signer
      };
      break;
    }
    if (!smithyContext.selectedHttpAuthScheme) {
      throw new Error(failureReasons.join("\n"));
    }
    return next(args);
  }, "httpAuthSchemeMiddleware");
  var import_middleware_endpoint = require_dist_cjs41();
  var httpAuthSchemeEndpointRuleSetMiddlewareOptions = {
    step: "serialize",
    tags: ["HTTP_AUTH_SCHEME"],
    name: "httpAuthSchemeMiddleware",
    override: true,
    relation: "before",
    toMiddleware: import_middleware_endpoint.endpointMiddlewareOptions.name
  };
  var getHttpAuthSchemeEndpointRuleSetPlugin = __name((config, {
    httpAuthSchemeParametersProvider,
    identityProviderConfigProvider
  }) => ({
    applyToStack: (clientStack) => {
      clientStack.addRelativeTo(httpAuthSchemeMiddleware(config, {
        httpAuthSchemeParametersProvider,
        identityProviderConfigProvider
      }), httpAuthSchemeEndpointRuleSetMiddlewareOptions);
    }
  }), "getHttpAuthSchemeEndpointRuleSetPlugin");
  var import_middleware_serde = require_dist_cjs40();
  var httpAuthSchemeMiddlewareOptions = {
    step: "serialize",
    tags: ["HTTP_AUTH_SCHEME"],
    name: "httpAuthSchemeMiddleware",
    override: true,
    relation: "before",
    toMiddleware: import_middleware_serde.serializerMiddlewareOption.name
  };
  var getHttpAuthSchemePlugin = __name((config, {
    httpAuthSchemeParametersProvider,
    identityProviderConfigProvider
  }) => ({
    applyToStack: (clientStack) => {
      clientStack.addRelativeTo(httpAuthSchemeMiddleware(config, {
        httpAuthSchemeParametersProvider,
        identityProviderConfigProvider
      }), httpAuthSchemeMiddlewareOptions);
    }
  }), "getHttpAuthSchemePlugin");
  var import_protocol_http = require_dist_cjs2();
  var defaultErrorHandler = __name((signingProperties) => (error) => {
    throw error;
  }, "defaultErrorHandler");
  var defaultSuccessHandler = __name((httpResponse, signingProperties) => {
  }, "defaultSuccessHandler");
  var httpSigningMiddleware = __name((config) => (next, context) => async (args) => {
    if (!import_protocol_http.HttpRequest.isInstance(args.request)) {
      return next(args);
    }
    const smithyContext = (0, import_util_middleware.getSmithyContext)(context);
    const scheme = smithyContext.selectedHttpAuthScheme;
    if (!scheme) {
      throw new Error(`No HttpAuthScheme was selected: unable to sign request`);
    }
    const {
      httpAuthOption: { signingProperties = {} },
      identity,
      signer
    } = scheme;
    const output = await next({
      ...args,
      request: await signer.sign(args.request, identity, signingProperties)
    }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));
    (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);
    return output;
  }, "httpSigningMiddleware");
  var import_middleware_retry = require_dist_cjs35();
  var httpSigningMiddlewareOptions = {
    step: "finalizeRequest",
    tags: ["HTTP_SIGNING"],
    name: "httpSigningMiddleware",
    aliases: ["apiKeyMiddleware", "tokenMiddleware", "awsAuthMiddleware"],
    override: true,
    relation: "after",
    toMiddleware: import_middleware_retry.retryMiddlewareOptions.name
  };
  var getHttpSigningPlugin = __name((config) => ({
    applyToStack: (clientStack) => {
      clientStack.addRelativeTo(httpSigningMiddleware(config), httpSigningMiddlewareOptions);
    }
  }), "getHttpSigningPlugin");
  var _DefaultIdentityProviderConfig = class _DefaultIdentityProviderConfig2 {
    constructor(config) {
      this.authSchemes = new Map;
      for (const [key, value] of Object.entries(config)) {
        if (value !== undefined) {
          this.authSchemes.set(key, value);
        }
      }
    }
    getIdentityProvider(schemeId) {
      return this.authSchemes.get(schemeId);
    }
  };
  __name(_DefaultIdentityProviderConfig, "DefaultIdentityProviderConfig");
  var DefaultIdentityProviderConfig = _DefaultIdentityProviderConfig;
  var import_types = require_dist_cjs();
  var _HttpApiKeyAuthSigner = class _HttpApiKeyAuthSigner2 {
    async sign(httpRequest, identity, signingProperties) {
      if (!signingProperties) {
        throw new Error("request could not be signed with `apiKey` since the `name` and `in` signer properties are missing");
      }
      if (!signingProperties.name) {
        throw new Error("request could not be signed with `apiKey` since the `name` signer property is missing");
      }
      if (!signingProperties.in) {
        throw new Error("request could not be signed with `apiKey` since the `in` signer property is missing");
      }
      if (!identity.apiKey) {
        throw new Error("request could not be signed with `apiKey` since the `apiKey` is not defined");
      }
      const clonedRequest = httpRequest.clone();
      if (signingProperties.in === import_types.HttpApiKeyAuthLocation.QUERY) {
        clonedRequest.query[signingProperties.name] = identity.apiKey;
      } else if (signingProperties.in === import_types.HttpApiKeyAuthLocation.HEADER) {
        clonedRequest.headers[signingProperties.name] = signingProperties.scheme ? `${signingProperties.scheme} ${identity.apiKey}` : identity.apiKey;
      } else {
        throw new Error("request can only be signed with `apiKey` locations `query` or `header`, but found: `" + signingProperties.in + "`");
      }
      return clonedRequest;
    }
  };
  __name(_HttpApiKeyAuthSigner, "HttpApiKeyAuthSigner");
  var HttpApiKeyAuthSigner = _HttpApiKeyAuthSigner;
  var _HttpBearerAuthSigner = class _HttpBearerAuthSigner2 {
    async sign(httpRequest, identity, signingProperties) {
      const clonedRequest = httpRequest.clone();
      if (!identity.token) {
        throw new Error("request could not be signed with `token` since the `token` is not defined");
      }
      clonedRequest.headers["Authorization"] = `Bearer ${identity.token}`;
      return clonedRequest;
    }
  };
  __name(_HttpBearerAuthSigner, "HttpBearerAuthSigner");
  var HttpBearerAuthSigner = _HttpBearerAuthSigner;
  var _NoAuthSigner = class _NoAuthSigner2 {
    async sign(httpRequest, identity, signingProperties) {
      return httpRequest;
    }
  };
  __name(_NoAuthSigner, "NoAuthSigner");
  var NoAuthSigner = _NoAuthSigner;
  var createIsIdentityExpiredFunction = __name((expirationMs) => (identity) => doesIdentityRequireRefresh(identity) && identity.expiration.getTime() - Date.now() < expirationMs, "createIsIdentityExpiredFunction");
  var EXPIRATION_MS = 300000;
  var isIdentityExpired = createIsIdentityExpiredFunction(EXPIRATION_MS);
  var doesIdentityRequireRefresh = __name((identity) => identity.expiration !== undefined, "doesIdentityRequireRefresh");
  var memoizeIdentityProvider = __name((provider, isExpired, requiresRefresh) => {
    if (provider === undefined) {
      return;
    }
    const normalizedProvider = typeof provider !== "function" ? async () => Promise.resolve(provider) : provider;
    let resolved;
    let pending;
    let hasResult;
    let isConstant = false;
    const coalesceProvider = __name(async (options) => {
      if (!pending) {
        pending = normalizedProvider(options);
      }
      try {
        resolved = await pending;
        hasResult = true;
        isConstant = false;
      } finally {
        pending = undefined;
      }
      return resolved;
    }, "coalesceProvider");
    if (isExpired === undefined) {
      return async (options) => {
        if (!hasResult || (options == null ? undefined : options.forceRefresh)) {
          resolved = await coalesceProvider(options);
        }
        return resolved;
      };
    }
    return async (options) => {
      if (!hasResult || (options == null ? undefined : options.forceRefresh)) {
        resolved = await coalesceProvider(options);
      }
      if (isConstant) {
        return resolved;
      }
      if (!requiresRefresh(resolved)) {
        isConstant = true;
        return resolved;
      }
      if (isExpired(resolved)) {
        await coalesceProvider(options);
        return resolved;
      }
      return resolved;
    };
  }, "memoizeIdentityProvider");
  var getSmithyContext3 = __name((context) => context[import_types.SMITHY_CONTEXT_KEY] || (context[import_types.SMITHY_CONTEXT_KEY] = {}), "getSmithyContext");
  var normalizeProvider = __name((input) => {
    if (typeof input === "function")
      return input;
    const promisified = Promise.resolve(input);
    return () => promisified;
  }, "normalizeProvider");
  var import_smithy_client = require_dist_cjs16();
  __name(requestBuilder, "requestBuilder");
  var _RequestBuilder = class _RequestBuilder2 {
    constructor(input, context) {
      this.input = input;
      this.context = context;
      this.query = {};
      this.method = "";
      this.headers = {};
      this.path = "";
      this.body = null;
      this.hostname = "";
      this.resolvePathStack = [];
    }
    async build() {
      const { hostname, protocol = "https", port, path: basePath } = await this.context.endpoint();
      this.path = basePath;
      for (const resolvePath of this.resolvePathStack) {
        resolvePath(this.path);
      }
      return new import_protocol_http.HttpRequest({
        protocol,
        hostname: this.hostname || hostname,
        port,
        method: this.method,
        path: this.path,
        query: this.query,
        body: this.body,
        headers: this.headers
      });
    }
    hn(hostname) {
      this.hostname = hostname;
      return this;
    }
    bp(uriLabel) {
      this.resolvePathStack.push((basePath) => {
        this.path = `${(basePath == null ? undefined : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + uriLabel;
      });
      return this;
    }
    p(memberName, labelValueProvider, uriLabel, isGreedyLabel) {
      this.resolvePathStack.push((path) => {
        this.path = (0, import_smithy_client.resolvedPath)(path, this.input, memberName, labelValueProvider, uriLabel, isGreedyLabel);
      });
      return this;
    }
    h(headers) {
      this.headers = headers;
      return this;
    }
    q(query) {
      this.query = query;
      return this;
    }
    b(body) {
      this.body = body;
      return this;
    }
    m(method) {
      this.method = method;
      return this;
    }
  };
  __name(_RequestBuilder, "RequestBuilder");
  var RequestBuilder = _RequestBuilder;
  var makePagedClientRequest = __name(async (CommandCtor, client, input, ...args) => {
    return await client.send(new CommandCtor(input), ...args);
  }, "makePagedClientRequest");
  __name(createPaginator, "createPaginator");
});

// node_modules/@aws-sdk/client-sso/dist-cj
var require_util = __commonJS((exports) => {
  var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
  var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
  var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
  var regexName = new RegExp("^" + nameRegexp + "$");
  var getAllMatches = function(string, regex) {
    const matches = [];
    let match = regex.exec(string);
    while (match) {
      const allmatches = [];
      allmatches.startIndex = regex.lastIndex - match[0].length;
      const len = match.length;
      for (let index = 0;index < len; index++) {
        allmatches.push(match[index]);
      }
      matches.push(allmatches);
      match = regex.exec(string);
    }
    return matches;
  };
  var isName = function(string) {
    const match = regexName.exec(string);
    return !(match === null || typeof match === "undefined");
  };
  exports.isExist = function(v) {
    return typeof v !== "undefined";
  };
  exports.isEmptyObject = function(obj) {
    return Object.keys(obj).length === 0;
  };
  exports.merge = function(target, a, arrayMode) {
    if (a) {
      const keys = Object.keys(a);
      const len = keys.length;
      for (let i = 0;i < len; i++) {
        if (arrayMode === "strict") {
          target[keys[i]] = [a[keys[i]]];
        } else {
          target[keys[i]] = a[keys[i]];
        }
      }
    }
  };
  exports.getValue = function(v) {
    if (exports.isExist(v)) {
      return v;
    } else {
      return "";
    }
  };
  exports.isName = isName;
  exports.getAllMatches = getAllMatches;
  exports.nameRegexp = nameRegexp;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/end
var require_validator2 = __commonJS((exports) => {
  var isWhiteSpace = function(char) {
    return char === " " || char === "\t" || char === "\n" || char === "\r";
  };
  var readPI = function(xmlData, i) {
    const start = i;
    for (;i < xmlData.length; i++) {
      if (xmlData[i] == "?" || xmlData[i] == " ") {
        const tagname = xmlData.substr(start, i - start);
        if (i > 5 && tagname === "xml") {
          return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
        } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
          i++;
          break;
        } else {
          continue;
        }
      }
    }
    return i;
  };
  var readCommentAndCDATA = function(xmlData, i) {
    if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
      for (i += 3;i < xmlData.length; i++) {
        if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
          i += 2;
          break;
        }
      }
    } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
      let angleBracketsCount = 1;
      for (i += 8;i < xmlData.length; i++) {
        if (xmlData[i] === "<") {
          angleBracketsCount++;
        } else if (xmlData[i] === ">") {
          angleBracketsCount--;
          if (angleBracketsCount === 0) {
            break;
          }
        }
      }
    } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
      for (i += 8;i < xmlData.length; i++) {
        if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
          i += 2;
          break;
        }
      }
    }
    return i;
  };
  var readAttributeStr = function(xmlData, i) {
    let attrStr = "";
    let startChar = "";
    let tagClosed = false;
    for (;i < xmlData.length; i++) {
      if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
        if (startChar === "") {
          startChar = xmlData[i];
        } else if (startChar !== xmlData[i]) {
        } else {
          startChar = "";
        }
      } else if (xmlData[i] === ">") {
        if (startChar === "") {
          tagClosed = true;
          break;
        }
      }
      attrStr += xmlData[i];
    }
    if (startChar !== "") {
      return false;
    }
    return {
      value: attrStr,
      index: i,
      tagClosed
    };
  };
  var validateAttributeString = function(attrStr, options) {
    const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
    const attrNames = {};
    for (let i = 0;i < matches.length; i++) {
      if (matches[i][1].length === 0) {
        return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
      } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {
        return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' is without value.", getPositionFromMatch(matches[i]));
      } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {
        return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
      }
      const attrName = matches[i][2];
      if (!validateAttrName(attrName)) {
        return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
      }
      if (!attrNames.hasOwnProperty(attrName)) {
        attrNames[attrName] = 1;
      } else {
        return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
      }
    }
    return true;
  };
  var validateNumberAmpersand = function(xmlData, i) {
    let re = /\d/;
    if (xmlData[i] === "x") {
      i++;
      re = /[\da-fA-F]/;
    }
    for (;i < xmlData.length; i++) {
      if (xmlData[i] === ";")
        return i;
      if (!xmlData[i].match(re))
        break;
    }
    return -1;
  };
  var validateAmpersand = function(xmlData, i) {
    i++;
    if (xmlData[i] === ";")
      return -1;
    if (xmlData[i] === "#") {
      i++;
      return validateNumberAmpersand(xmlData, i);
    }
    let count = 0;
    for (;i < xmlData.length; i++, count++) {
      if (xmlData[i].match(/\w/) && count < 20)
        continue;
      if (xmlData[i] === ";")
        break;
      return -1;
    }
    return i;
  };
  var getErrorObject = function(code, message, lineNumber) {
    return {
      err: {
        code,
        msg: message,
        line: lineNumber.line || lineNumber,
        col: lineNumber.col
      }
    };
  };
  var validateAttrName = function(attrName) {
    return util.isName(attrName);
  };
  var validateTagName = function(tagname) {
    return util.isName(tagname);
  };
  var getLineNumberForPosition = function(xmlData, index) {
    const lines = xmlData.substring(0, index).split(/\r?\n/);
    return {
      line: lines.length,
      col: lines[lines.length - 1].length + 1
    };
  };
  var getPositionFromMatch = function(match) {
    return match.startIndex + match[1].length;
  };
  var util = require_util();
  var defaultOptions = {
    allowBooleanAttributes: false,
    unpairedTags: []
  };
  exports.validate = function(xmlData, options) {
    options = Object.assign({}, defaultOptions, options);
    const tags = [];
    let tagFound = false;
    let reachedRoot = false;
    if (xmlData[0] === "\uFEFF") {
      xmlData = xmlData.substr(1);
    }
    for (let i = 0;i < xmlData.length; i++) {
      if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
        i += 2;
        i = readPI(xmlData, i);
        if (i.err)
          return i;
      } else if (xmlData[i] === "<") {
        let tagStartPos = i;
        i++;
        if (xmlData[i] === "!") {
          i = readCommentAndCDATA(xmlData, i);
          continue;
        } else {
          let closingTag = false;
          if (xmlData[i] === "/") {
            closingTag = true;
            i++;
          }
          let tagName = "";
          for (;i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "\t" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
            tagName += xmlData[i];
          }
          tagName = tagName.trim();
          if (tagName[tagName.length - 1] === "/") {
            tagName = tagName.substring(0, tagName.length - 1);
            i--;
          }
          if (!validateTagName(tagName)) {
            let msg;
            if (tagName.trim().length === 0) {
              msg = "Invalid space after '<'.";
            } else {
              msg = "Tag '" + tagName + "' is an invalid name.";
            }
            return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
          }
          const result = readAttributeStr(xmlData, i);
          if (result === false) {
            return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
          }
          let attrStr = result.value;
          i = result.index;
          if (attrStr[attrStr.length - 1] === "/") {
            const attrStrStart = i - attrStr.length;
            attrStr = attrStr.substring(0, attrStr.length - 1);
            const isValid = validateAttributeString(attrStr, options);
            if (isValid === true) {
              tagFound = true;
            } else {
              return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
            }
          } else if (closingTag) {
            if (!result.tagClosed) {
              return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
            } else if (attrStr.trim().length > 0) {
              return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
            } else {
              const otg = tags.pop();
              if (tagName !== otg.tagName) {
                let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                return getErrorObject("InvalidTag", "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.", getLineNumberForPosition(xmlData, tagStartPos));
              }
              if (tags.length == 0) {
                reachedRoot = true;
              }
            }
          } else {
            const isValid = validateAttributeString(attrStr, options);
            if (isValid !== true) {
              return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
            }
            if (reachedRoot === true) {
              return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
            } else if (options.unpairedTags.indexOf(tagName) !== -1) {
            } else {
              tags.push({ tagName, tagStartPos });
            }
            tagFound = true;
          }
          for (i++;i < xmlData.length; i++) {
            if (xmlData[i] === "<") {
              if (xmlData[i + 1] === "!") {
                i++;
                i = readCommentAndCDATA(xmlData, i);
                continue;
              } else if (xmlData[i + 1] === "?") {
                i = readPI(xmlData, ++i);
                if (i.err)
                  return i;
              } else {
                break;
              }
            } else if (xmlData[i] === "&") {
              const afterAmp = validateAmpersand(xmlData, i);
              if (afterAmp == -1)
                return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
              i = afterAmp;
            } else {
              if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {
                return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i));
              }
            }
          }
          if (xmlData[i] === "<") {
            i--;
          }
        }
      } else {
        if (isWhiteSpace(xmlData[i])) {
          continue;
        }
        return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
      }
    }
    if (!tagFound) {
      return getErrorObject("InvalidXml", "Start tag expected.", 1);
    } else if (tags.length == 1) {
      return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
    } else if (tags.length > 0) {
      return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t) => t.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
    }
    return true;
  };
  var doubleQuote = '"';
  var singleQuote = "'";
  var validAttrStrRegxp = new RegExp('(\\s*)([^\\s=]+)(\\s*=)?(\\s*([\'"])(([\\s\\S])*?)\\5)?', "g");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.j
var require_OptionsBuilder = __commonJS((exports) => {
  var defaultOptions = {
    preserveOrder: false,
    attributeNamePrefix: "@_",
    attributesGroupName: false,
    textNodeName: "#text",
    ignoreAttributes: true,
    removeNSPrefix: false,
    allowBooleanAttributes: false,
    parseTagValue: true,
    parseAttributeValue: false,
    trimValues: true,
    cdataPropName: false,
    numberParseOptions: {
      hex: true,
      leadingZeros: true,
      eNotation: true
    },
    tagValueProcessor: function(tagName, val2) {
      return val2;
    },
    attributeValueProcessor: function(attrName, val2) {
      return val2;
    },
    stopNodes: [],
    alwaysCreateTextNode: false,
    isArray: () => false,
    commentPropName: false,
    unpairedTags: [],
    processEntities: true,
    htmlEntities: false,
    ignoreDeclaration: false,
    ignorePiTags: false,
    transformTagName: false,
    transformAttributeName: false,
    updateTag: function(tagName, jPath, attrs) {
      return tagName;
    }
  };
  var buildOptions = function(options) {
    return Object.assign({}, defaultOptions, options);
  };
  exports.buildOptions = buildOptions;
  exports.defaultOptions = defaultOptions;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ru
var require_xmlNode = __commonJS((exports, module) => {
  class XmlNode {
    constructor(tagname) {
      this.tagname = tagname;
      this.child = [];
      this[":@"] = {};
    }
    add(key, val2) {
      if (key === "__proto__")
        key = "#__proto__";
      this.child.push({ [key]: val2 });
    }
    addChild(node) {
      if (node.tagname === "__proto__")
        node.tagname = "#__proto__";
      if (node[":@"] && Object.keys(node[":@"]).length > 0) {
        this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
      } else {
        this.child.push({ [node.tagname]: node.child });
      }
    }
  }
  module.exports = XmlNode;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.
var require_DocTypeReader = __commonJS((exports, module) => {
  var readDocType = function(xmlData, i) {
    const entities = {};
    if (xmlData[i + 3] === "O" && xmlData[i + 4] === "C" && xmlData[i + 5] === "T" && xmlData[i + 6] === "Y" && xmlData[i + 7] === "P" && xmlData[i + 8] === "E") {
      i = i + 9;
      let angleBracketsCount = 1;
      let hasBody = false, comment = false;
      let exp = "";
      for (;i < xmlData.length; i++) {
        if (xmlData[i] === "<" && !comment) {
          if (hasBody && isEntity(xmlData, i)) {
            i += 7;
            [entityName, val, i] = readEntityExp(xmlData, i + 1);
            if (val.indexOf("&") === -1)
              entities[validateEntityName(entityName)] = {
                regx: RegExp(`&${entityName};`, "g"),
                val
              };
          } else if (hasBody && isElement(xmlData, i))
            i += 8;
          else if (hasBody && isAttlist(xmlData, i))
            i += 8;
          else if (hasBody && isNotation(xmlData, i))
            i += 9;
          else if (isComment)
            comment = true;
          else
            throw new Error("Invalid DOCTYPE");
          angleBracketsCount++;
          exp = "";
        } else if (xmlData[i] === ">") {
          if (comment) {
            if (xmlData[i - 1] === "-" && xmlData[i - 2] === "-") {
              comment = false;
              angleBracketsCount--;
            }
          } else {
            angleBracketsCount--;
          }
          if (angleBracketsCount === 0) {
            break;
          }
        } else if (xmlData[i] === "[") {
          hasBody = true;
        } else {
          exp += xmlData[i];
        }
      }
      if (angleBracketsCount !== 0) {
        throw new Error(`Unclosed DOCTYPE`);
      }
    } else {
      throw new Error(`Invalid Tag instead of DOCTYPE`);
    }
    return { entities, i };
  };
  var readEntityExp = function(xmlData, i) {
    let entityName2 = "";
    for (;i < xmlData.length && (xmlData[i] !== "'" && xmlData[i] !== '"'); i++) {
      entityName2 += xmlData[i];
    }
    entityName2 = entityName2.trim();
    if (entityName2.indexOf(" ") !== -1)
      throw new Error("External entites are not supported");
    const startChar = xmlData[i++];
    let val2 = "";
    for (;i < xmlData.length && xmlData[i] !== startChar; i++) {
      val2 += xmlData[i];
    }
    return [entityName2, val2, i];
  };
  var isComment = function(xmlData, i) {
    if (xmlData[i + 1] === "!" && xmlData[i + 2] === "-" && xmlData[i + 3] === "-")
      return true;
    return false;
  };
  var isEntity = function(xmlData, i) {
    if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "N" && xmlData[i + 4] === "T" && xmlData[i + 5] === "I" && xmlData[i + 6] === "T" && xmlData[i + 7] === "Y")
      return true;
    return false;
  };
  var isElement = function(xmlData, i) {
    if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "L" && xmlData[i + 4] === "E" && xmlData[i + 5] === "M" && xmlData[i + 6] === "E" && xmlData[i + 7] === "N" && xmlData[i + 8] === "T")
      return true;
    return false;
  };
  var isAttlist = function(xmlData, i) {
    if (xmlData[i + 1] === "!" && xmlData[i + 2] === "A" && xmlData[i + 3] === "T" && xmlData[i + 4] === "T" && xmlData[i + 5] === "L" && xmlData[i + 6] === "I" && xmlData[i + 7] === "S" && xmlData[i + 8] === "T")
      return true;
    return false;
  };
  var isNotation = function(xmlData, i) {
    if (xmlData[i + 1] === "!" && xmlData[i + 2] === "N" && xmlData[i + 3] === "O" && xmlData[i + 4] === "T" && xmlData[i + 5] === "A" && xmlData[i + 6] === "T" && xmlData[i + 7] === "I" && xmlData[i + 8] === "O" && xmlData[i + 9] === "N")
      return true;
    return false;
  };
  var validateEntityName = function(name) {
    if (util.isName(name))
      return name;
    else
      throw new Error(`Invalid entity name ${name}`);
  };
  var util = require_util();
  module.exports = readDocType;
});

// node_modules/@aws-sdk/client-
var require_strnum = __commonJS((exports, module) => {
  var toNumber = function(str, options = {}) {
    options = Object.assign({}, consider, options);
    if (!str || typeof str !== "string")
      return str;
    let trimmedStr = str.trim();
    if (options.skipLike !== undefined && options.skipLike.test(trimmedStr))
      return str;
    else if (options.hex && hexRegex.test(trimmedStr)) {
      return Number.parseInt(trimmedStr, 16);
    } else {
      const match = numRegex.exec(trimmedStr);
      if (match) {
        const sign = match[1];
        const leadingZeros = match[2];
        let numTrimmedByZeros = trimZeros(match[3]);
        const eNotation = match[4] || match[6];
        if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".")
          return str;
        else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".")
          return str;
        else {
          const num = Number(trimmedStr);
          const numStr = "" + num;
          if (numStr.search(/[eE]/) !== -1) {
            if (options.eNotation)
              return num;
            else
              return str;
          } else if (eNotation) {
            if (options.eNotation)
              return num;
            else
              return str;
          } else if (trimmedStr.indexOf(".") !== -1) {
            if (numStr === "0" && numTrimmedByZeros === "")
              return num;
            else if (numStr === numTrimmedByZeros)
              return num;
            else if (sign && numStr === "-" + numTrimmedByZeros)
              return num;
            else
              return str;
          }
          if (leadingZeros) {
            if (numTrimmedByZeros === numStr)
              return num;
            else if (sign + numTrimmedByZeros === numStr)
              return num;
            else
              return str;
          }
          if (trimmedStr === numStr)
            return num;
          else if (trimmedStr === sign + numStr)
            return num;
          return str;
        }
      } else {
        return str;
      }
    }
  };
  var trimZeros = function(numStr) {
    if (numStr && numStr.indexOf(".") !== -1) {
      numStr = numStr.replace(/0+$/, "");
      if (numStr === ".")
        numStr = "0";
      else if (numStr[0] === ".")
        numStr = "0" + numStr;
      else if (numStr[numStr.length - 1] === ".")
        numStr = numStr.substr(0, numStr.length - 1);
      return numStr;
    }
    return numStr;
  };
  var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
  var numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
  if (!Number.parseInt && window.parseInt) {
    Number.parseInt = window.parseInt;
  }
  if (!Number.parseFloat && window.parseFloat) {
    Number.parseFloat = window.parseFloat;
  }
  var consider = {
    hex: true,
    leadingZeros: true,
    decimalPoint: ".",
    eNotation: true
  };
  module.exports = toNumber;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jss
var require_OrderedObjParser = __commonJS((exports, module) => {
  var addExternalEntities = function(externalEntities) {
    const entKeys = Object.keys(externalEntities);
    for (let i = 0;i < entKeys.length; i++) {
      const ent = entKeys[i];
      this.lastEntities[ent] = {
        regex: new RegExp("&" + ent + ";", "g"),
        val: externalEntities[ent]
      };
    }
  };
  var parseTextData = function(val2, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
    if (val2 !== undefined) {
      if (this.options.trimValues && !dontTrim) {
        val2 = val2.trim();
      }
      if (val2.length > 0) {
        if (!escapeEntities)
          val2 = this.replaceEntitiesValue(val2);
        const newval = this.options.tagValueProcessor(tagName, val2, jPath, hasAttributes, isLeafNode);
        if (newval === null || newval === undefined) {
          return val2;
        } else if (typeof newval !== typeof val2 || newval !== val2) {
          return newval;
        } else if (this.options.trimValues) {
          return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
        } else {
          const trimmedVal = val2.trim();
          if (trimmedVal === val2) {
            return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            return val2;
          }
        }
      }
    }
  };
  var resolveNameSpace = function(tagname) {
    if (this.options.removeNSPrefix) {
      const tags = tagname.split(":");
      const prefix = tagname.charAt(0) === "/" ? "/" : "";
      if (tags[0] === "xmlns") {
        return "";
      }
      if (tags.length === 2) {
        tagname = prefix + tags[1];
      }
    }
    return tagname;
  };
  var buildAttributesMap = function(attrStr, jPath, tagName) {
    if (!this.options.ignoreAttributes && typeof attrStr === "string") {
      const matches = util.getAllMatches(attrStr, attrsRegx);
      const len = matches.length;
      const attrs = {};
      for (let i = 0;i < len; i++) {
        const attrName = this.resolveNameSpace(matches[i][1]);
        let oldVal = matches[i][4];
        let aName = this.options.attributeNamePrefix + attrName;
        if (attrName.length) {
          if (this.options.transformAttributeName) {
            aName = this.options.transformAttributeName(aName);
          }
          if (aName === "__proto__")
            aName = "#__proto__";
          if (oldVal !== undefined) {
            if (this.options.trimValues) {
              oldVal = oldVal.trim();
            }
            oldVal = this.replaceEntitiesValue(oldVal);
            const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
            if (newVal === null || newVal === undefined) {
              attrs[aName] = oldVal;
            } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
              attrs[aName] = newVal;
            } else {
              attrs[aName] = parseValue(oldVal, this.options.parseAttributeValue, this.options.numberParseOptions);
            }
          } else if (this.options.allowBooleanAttributes) {
            attrs[aName] = true;
          }
        }
      }
      if (!Object.keys(attrs).length) {
        return;
      }
      if (this.options.attributesGroupName) {
        const attrCollection = {};
        attrCollection[this.options.attributesGroupName] = attrs;
        return attrCollection;
      }
      return attrs;
    }
  };
  var addChild = function(currentNode, childNode, jPath) {
    const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
    if (result === false) {
    } else if (typeof result === "string") {
      childNode.tagname = result;
      currentNode.addChild(childNode);
    } else {
      currentNode.addChild(childNode);
    }
  };
  var saveTextToParentTag = function(textData, currentNode, jPath, isLeafNode) {
    if (textData) {
      if (isLeafNode === undefined)
        isLeafNode = Object.keys(currentNode.child).length === 0;
      textData = this.parseTextData(textData, currentNode.tagname, jPath, false, currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false, isLeafNode);
      if (textData !== undefined && textData !== "")
        currentNode.add(this.options.textNodeName, textData);
      textData = "";
    }
    return textData;
  };
  var isItStopNode = function(stopNodes, jPath, currentTagName) {
    const allNodesExp = "*." + currentTagName;
    for (const stopNodePath in stopNodes) {
      const stopNodeExp = stopNodes[stopNodePath];
      if (allNodesExp === stopNodeExp || jPath === stopNodeExp)
        return true;
    }
    return false;
  };
  var tagExpWithClosingIndex = function(xmlData, i, closingChar = ">") {
    let attrBoundary;
    let tagExp = "";
    for (let index = i;index < xmlData.length; index++) {
      let ch = xmlData[index];
      if (attrBoundary) {
        if (ch === attrBoundary)
          attrBoundary = "";
      } else if (ch === '"' || ch === "'") {
        attrBoundary = ch;
      } else if (ch === closingChar[0]) {
        if (closingChar[1]) {
          if (xmlData[index + 1] === closingChar[1]) {
            return {
              data: tagExp,
              index
            };
          }
        } else {
          return {
            data: tagExp,
            index
          };
        }
      } else if (ch === "\t") {
        ch = " ";
      }
      tagExp += ch;
    }
  };
  var findClosingIndex = function(xmlData, str, i, errMsg) {
    const closingIndex = xmlData.indexOf(str, i);
    if (closingIndex === -1) {
      throw new Error(errMsg);
    } else {
      return closingIndex + str.length - 1;
    }
  };
  var readTagExp = function(xmlData, i, removeNSPrefix, closingChar = ">") {
    const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
    if (!result)
      return;
    let tagExp = result.data;
    const closeIndex = result.index;
    const separatorIndex = tagExp.search(/\s/);
    let tagName = tagExp;
    let attrExpPresent = true;
    if (separatorIndex !== -1) {
      tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
      tagExp = tagExp.substr(separatorIndex + 1);
    }
    if (removeNSPrefix) {
      const colonIndex = tagName.indexOf(":");
      if (colonIndex !== -1) {
        tagName = tagName.substr(colonIndex + 1);
        attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
      }
    }
    return {
      tagName,
      tagExp,
      closeIndex,
      attrExpPresent
    };
  };
  var readStopNodeData = function(xmlData, tagName, i) {
    const startIndex = i;
    let openTagCount = 1;
    for (;i < xmlData.length; i++) {
      if (xmlData[i] === "<") {
        if (xmlData[i + 1] === "/") {
          const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
          let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
          if (closeTagName === tagName) {
            openTagCount--;
            if (openTagCount === 0) {
              return {
                tagContent: xmlData.substring(startIndex, i),
                i: closeIndex
              };
            }
          }
          i = closeIndex;
        } else if (xmlData[i + 1] === "?") {
          const closeIndex = findClosingIndex(xmlData, "?>", i + 1, "StopNode is not closed.");
          i = closeIndex;
        } else if (xmlData.substr(i + 1, 3) === "!--") {
          const closeIndex = findClosingIndex(xmlData, "-->", i + 3, "StopNode is not closed.");
          i = closeIndex;
        } else if (xmlData.substr(i + 1, 2) === "![") {
          const closeIndex = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
          i = closeIndex;
        } else {
          const tagData = readTagExp(xmlData, i, ">");
          if (tagData) {
            const openTagName = tagData && tagData.tagName;
            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
              openTagCount++;
            }
            i = tagData.closeIndex;
          }
        }
      }
    }
  };
  var parseValue = function(val2, shouldParse, options) {
    if (shouldParse && typeof val2 === "string") {
      const newval = val2.trim();
      if (newval === "true")
        return true;
      else if (newval === "false")
        return false;
      else
        return toNumber(val2, options);
    } else {
      if (util.isExist(val2)) {
        return val2;
      } else {
        return "";
      }
    }
  };
  var util = require_util();
  var xmlNode = require_xmlNode();
  var readDocType = require_DocTypeReader();
  var toNumber = require_strnum();
  var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);

  class OrderedObjParser {
    constructor(options) {
      this.options = options;
      this.currentNode = null;
      this.tagsNodeStack = [];
      this.docTypeEntities = {};
      this.lastEntities = {
        apos: { regex: /&(apos|#39|#x27);/g, val: "'" },
        gt: { regex: /&(gt|#62|#x3E);/g, val: ">" },
        lt: { regex: /&(lt|#60|#x3C);/g, val: "<" },
        quot: { regex: /&(quot|#34|#x22);/g, val: "\"" }
      };
      this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
      this.htmlEntities = {
        space: { regex: /&(nbsp|#160);/g, val: " " },
        cent: { regex: /&(cent|#162);/g, val: "\xA2" },
        pound: { regex: /&(pound|#163);/g, val: "\xA3" },
        yen: { regex: /&(yen|#165);/g, val: "\xA5" },
        euro: { regex: /&(euro|#8364);/g, val: "\u20AC" },
        copyright: { regex: /&(copy|#169);/g, val: "\xA9" },
        reg: { regex: /&(reg|#174);/g, val: "\xAE" },
        inr: { regex: /&(inr|#8377);/g, val: "\u20B9" }
      };
      this.addExternalEntities = addExternalEntities;
      this.parseXml = parseXml;
      this.parseTextData = parseTextData;
      this.resolveNameSpace = resolveNameSpace;
      this.buildAttributesMap = buildAttributesMap;
      this.isItStopNode = isItStopNode;
      this.replaceEntitiesValue = replaceEntitiesValue;
      this.readStopNodeData = readStopNodeData;
      this.saveTextToParentTag = saveTextToParentTag;
      this.addChild = addChild;
    }
  }
  var attrsRegx = new RegExp('([^\\s=]+)\\s*(=\\s*([\'"])([\\s\\S]*?)\\3)?', "gm");
  var parseXml = function(xmlData) {
    xmlData = xmlData.replace(/\r\n?/g, "\n");
    const xmlObj = new xmlNode("!xml");
    let currentNode = xmlObj;
    let textData = "";
    let jPath = "";
    for (let i = 0;i < xmlData.length; i++) {
      const ch = xmlData[i];
      if (ch === "<") {
        if (xmlData[i + 1] === "/") {
          const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
          let tagName = xmlData.substring(i + 2, closeIndex).trim();
          if (this.options.removeNSPrefix) {
            const colonIndex = tagName.indexOf(":");
            if (colonIndex !== -1) {
              tagName = tagName.substr(colonIndex + 1);
            }
          }
          if (this.options.transformTagName) {
            tagName = this.options.transformTagName(tagName);
          }
          if (currentNode) {
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
          }
          const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
          if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {
            throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
          }
          let propIndex = 0;
          if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
            propIndex = jPath.lastIndexOf(".", jPath.lastIndexOf(".") - 1);
            this.tagsNodeStack.pop();
          } else {
            propIndex = jPath.lastIndexOf(".");
          }
          jPath = jPath.substring(0, propIndex);
          currentNode = this.tagsNodeStack.pop();
          textData = "";
          i = closeIndex;
        } else if (xmlData[i + 1] === "?") {
          let tagData = readTagExp(xmlData, i, false, "?>");
          if (!tagData)
            throw new Error("Pi Tag is not closed.");
          textData = this.saveTextToParentTag(textData, currentNode, jPath);
          if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
          } else {
            const childNode = new xmlNode(tagData.tagName);
            childNode.add(this.options.textNodeName, "");
            if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
              childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
            }
            this.addChild(currentNode, childNode, jPath);
          }
          i = tagData.closeIndex + 1;
        } else if (xmlData.substr(i + 1, 3) === "!--") {
          const endIndex = findClosingIndex(xmlData, "-->", i + 4, "Comment is not closed.");
          if (this.options.commentPropName) {
            const comment = xmlData.substring(i + 4, endIndex - 2);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
          }
          i = endIndex;
        } else if (xmlData.substr(i + 1, 2) === "!D") {
          const result = readDocType(xmlData, i);
          this.docTypeEntities = result.entities;
          i = result.i;
        } else if (xmlData.substr(i + 1, 2) === "![") {
          const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
          const tagExp = xmlData.substring(i + 9, closeIndex);
          textData = this.saveTextToParentTag(textData, currentNode, jPath);
          if (this.options.cdataPropName) {
            currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
          } else {
            let val2 = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);
            if (val2 == undefined)
              val2 = "";
            currentNode.add(this.options.textNodeName, val2);
          }
          i = closeIndex + 2;
        } else {
          let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
          let tagName = result.tagName;
          let tagExp = result.tagExp;
          let attrExpPresent = result.attrExpPresent;
          let closeIndex = result.closeIndex;
          if (this.options.transformTagName) {
            tagName = this.options.transformTagName(tagName);
          }
          if (currentNode && textData) {
            if (currentNode.tagname !== "!xml") {
              textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
            }
          }
          const lastTag = currentNode;
          if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
            currentNode = this.tagsNodeStack.pop();
            jPath = jPath.substring(0, jPath.lastIndexOf("."));
          }
          if (tagName !== xmlObj.tagname) {
            jPath += jPath ? "." + tagName : tagName;
          }
          if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
            let tagContent = "";
            if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
              i = result.closeIndex;
            } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
              i = result.closeIndex;
            } else {
              const result2 = this.readStopNodeData(xmlData, tagName, closeIndex + 1);
              if (!result2)
                throw new Error(`Unexpected end of ${tagName}`);
              i = result2.i;
              tagContent = result2.tagContent;
            }
            const childNode = new xmlNode(tagName);
            if (tagName !== tagExp && attrExpPresent) {
              childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
            }
            if (tagContent) {
              tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
            }
            jPath = jPath.substr(0, jPath.lastIndexOf("."));
            childNode.add(this.options.textNodeName, tagContent);
            this.addChild(currentNode, childNode, jPath);
          } else {
            if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
              if (tagName[tagName.length - 1] === "/") {
                tagName = tagName.substr(0, tagName.length - 1);
                tagExp = tagName;
              } else {
                tagExp = tagExp.substr(0, tagExp.length - 1);
              }
              if (this.options.transformTagName) {
                tagName = this.options.transformTagName(tagName);
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              this.addChild(currentNode, childNode, jPath);
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
            } else {
              const childNode = new xmlNode(tagName);
              this.tagsNodeStack.push(currentNode);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              this.addChild(currentNode, childNode, jPath);
              currentNode = childNode;
            }
            textData = "";
            i = closeIndex;
          }
        }
      } else {
        textData += xmlData[i];
      }
    }
    return xmlObj.child;
  };
  var replaceEntitiesValue = function(val2) {
    if (this.options.processEntities) {
      for (let entityName2 in this.docTypeEntities) {
        const entity = this.docTypeEntities[entityName2];
        val2 = val2.replace(entity.regx, entity.val);
      }
      for (let entityName2 in this.lastEntities) {
        const entity = this.lastEntities[entityName2];
        val2 = val2.replace(entity.regex, entity.val);
      }
      if (this.options.htmlEntities) {
        for (let entityName2 in this.htmlEntities) {
          const entity = this.htmlEntities[entityName2];
          val2 = val2.replace(entity.regex, entity.val);
        }
      }
      val2 = val2.replace(this.ampEntity.regex, this.ampEntity.val);
    }
    return val2;
  };
  module.exports = OrderedObjParser;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rule
var require_node2json = __commonJS((exports) => {
  var prettify = function(node, options) {
    return compress(node, options);
  };
  var compress = function(arr, options, jPath) {
    let text;
    const compressedObj = {};
    for (let i = 0;i < arr.length; i++) {
      const tagObj = arr[i];
      const property = propName(tagObj);
      let newJpath = "";
      if (jPath === undefined)
        newJpath = property;
      else
        newJpath = jPath + "." + property;
      if (property === options.textNodeName) {
        if (text === undefined)
          text = tagObj[property];
        else
          text += "" + tagObj[property];
      } else if (property === undefined) {
        continue;
      } else if (tagObj[property]) {
        let val2 = compress(tagObj[property], options, newJpath);
        const isLeaf = isLeafTag(val2, options);
        if (tagObj[":@"]) {
          assignAttributes(val2, tagObj[":@"], newJpath, options);
        } else if (Object.keys(val2).length === 1 && val2[options.textNodeName] !== undefined && !options.alwaysCreateTextNode) {
          val2 = val2[options.textNodeName];
        } else if (Object.keys(val2).length === 0) {
          if (options.alwaysCreateTextNode)
            val2[options.textNodeName] = "";
          else
            val2 = "";
        }
        if (compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {
          if (!Array.isArray(compressedObj[property])) {
            compressedObj[property] = [compressedObj[property]];
          }
          compressedObj[property].push(val2);
        } else {
          if (options.isArray(property, newJpath, isLeaf)) {
            compressedObj[property] = [val2];
          } else {
            compressedObj[property] = val2;
          }
        }
      }
    }
    if (typeof text === "string") {
      if (text.length > 0)
        compressedObj[options.textNodeName] = text;
    } else if (text !== undefined)
      compressedObj[options.textNodeName] = text;
    return compressedObj;
  };
  var propName = function(obj) {
    const keys = Object.keys(obj);
    for (let i = 0;i < keys.length; i++) {
      const key = keys[i];
      if (key !== ":@")
        return key;
    }
  };
  var assignAttributes = function(obj, attrMap, jpath, options) {
    if (attrMap) {
      const keys = Object.keys(attrMap);
      const len = keys.length;
      for (let i = 0;i < len; i++) {
        const atrrName = keys[i];
        if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
          obj[atrrName] = [attrMap[atrrName]];
        } else {
          obj[atrrName] = attrMap[atrrName];
        }
      }
    }
  };
  var isLeafTag = function(obj, options) {
    const { textNodeName } = options;
    const propCount = Object.keys(obj).length;
    if (propCount === 0) {
      return true;
    }
    if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) {
      return true;
    }
    return false;
  };
  exports.prettify = prettify;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rule
var require_XMLParser = __commonJS((exports, module) => {
  var { buildOptions } = require_OptionsBuilder();
  var OrderedObjParser = require_OrderedObjParser();
  var { prettify } = require_node2json();
  var validator = require_validator2();

  class XMLParser {
    constructor(options) {
      this.externalEntities = {};
      this.options = buildOptions(options);
    }
    parse(xmlData, validationOption) {
      if (typeof xmlData === "string") {
      } else if (xmlData.toString) {
        xmlData = xmlData.toString();
      } else {
        throw new Error("XML data is accepted in String or Bytes[] form.");
      }
      if (validationOption) {
        if (validationOption === true)
          validationOption = {};
        const result = validator.validate(xmlData, validationOption);
        if (result !== true) {
          throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
        }
      }
      const orderedObjParser = new OrderedObjParser(this.options);
      orderedObjParser.addExternalEntities(this.externalEntities);
      const orderedResult = orderedObjParser.parseXml(xmlData);
      if (this.options.preserveOrder || orderedResult === undefined)
        return orderedResult;
      else
        return prettify(orderedResult, this.options);
    }
    addEntity(key, value) {
      if (value.indexOf("&") !== -1) {
        throw new Error("Entity value can't have '&'");
      } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
        throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
      } else if (value === "&") {
        throw new Error("An entity with value '&' is not permitted");
      } else {
        this.externalEntities[key] = value;
      }
    }
  }
  module.exports = XMLParser;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.j
var require_orderedJs2Xml = __commonJS((exports, module) => {
  var toXml = function(jArray, options) {
    let indentation = "";
    if (options.format && options.indentBy.length > 0) {
      indentation = EOL;
    }
    return arrToStr(jArray, options, "", indentation);
  };
  var arrToStr = function(arr, options, jPath, indentation) {
    let xmlStr = "";
    let isPreviousElementTag = false;
    for (let i = 0;i < arr.length; i++) {
      const tagObj = arr[i];
      const tagName = propName(tagObj);
      let newJPath = "";
      if (jPath.length === 0)
        newJPath = tagName;
      else
        newJPath = `${jPath}.${tagName}`;
      if (tagName === options.textNodeName) {
        let tagText = tagObj[tagName];
        if (!isStopNode(newJPath, options)) {
          tagText = options.tagValueProcessor(tagName, tagText);
          tagText = replaceEntitiesValue(tagText, options);
        }
        if (isPreviousElementTag) {
          xmlStr += indentation;
        }
        xmlStr += tagText;
        isPreviousElementTag = false;
        continue;
      } else if (tagName === options.cdataPropName) {
        if (isPreviousElementTag) {
          xmlStr += indentation;
        }
        xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
        isPreviousElementTag = false;
        continue;
      } else if (tagName === options.commentPropName) {
        xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
        isPreviousElementTag = true;
        continue;
      } else if (tagName[0] === "?") {
        const attStr2 = attr_to_str(tagObj[":@"], options);
        const tempInd = tagName === "?xml" ? "" : indentation;
        let piTextNodeName = tagObj[tagName][0][options.textNodeName];
        piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
        xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
        isPreviousElementTag = true;
        continue;
      }
      let newIdentation = indentation;
      if (newIdentation !== "") {
        newIdentation += options.indentBy;
      }
      const attStr = attr_to_str(tagObj[":@"], options);
      const tagStart = indentation + `<${tagName}${attStr}`;
      const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
      if (options.unpairedTags.indexOf(tagName) !== -1) {
        if (options.suppressUnpairedNode)
          xmlStr += tagStart + ">";
        else
          xmlStr += tagStart + "/>";
      } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
        xmlStr += tagStart + "/>";
      } else if (tagValue && tagValue.endsWith(">")) {
        xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
      } else {
        xmlStr += tagStart + ">";
        if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
          xmlStr += indentation + options.indentBy + tagValue + indentation;
        } else {
          xmlStr += tagValue;
        }
        xmlStr += `</${tagName}>`;
      }
      isPreviousElementTag = true;
    }
    return xmlStr;
  };
  var propName = function(obj) {
    const keys = Object.keys(obj);
    for (let i = 0;i < keys.length; i++) {
      const key = keys[i];
      if (key !== ":@")
        return key;
    }
  };
  var attr_to_str = function(attrMap, options) {
    let attrStr = "";
    if (attrMap && !options.ignoreAttributes) {
      for (let attr in attrMap) {
        let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
        attrVal = replaceEntitiesValue(attrVal, options);
        if (attrVal === true && options.suppressBooleanAttributes) {
          attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
        } else {
          attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
        }
      }
    }
    return attrStr;
  };
  var isStopNode = function(jPath, options) {
    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
    let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
    for (let index in options.stopNodes) {
      if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName)
        return true;
    }
    return false;
  };
  var replaceEntitiesValue = function(textValue, options) {
    if (textValue && textValue.length > 0 && options.processEntities) {
      for (let i = 0;i < options.entities.length; i++) {
        const entity = options.entities[i];
        textValue = textValue.replace(entity.regex, entity.val);
      }
    }
    return textValue;
  };
  var EOL = "\n";
  module.exports = toXml;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rule
var require_json2xml = __commonJS((exports, module) => {
  var Builder = function(options) {
    this.options = Object.assign({}, defaultOptions, options);
    if (this.options.ignoreAttributes || this.options.attributesGroupName) {
      this.isAttribute = function() {
        return false;
      };
    } else {
      this.attrPrefixLen = this.options.attributeNamePrefix.length;
      this.isAttribute = isAttribute;
    }
    this.processTextOrObjNode = processTextOrObjNode;
    if (this.options.format) {
      this.indentate = indentate;
      this.tagEndChar = ">\n";
      this.newLine = "\n";
    } else {
      this.indentate = function() {
        return "";
      };
      this.tagEndChar = ">";
      this.newLine = "";
    }
  };
  var processTextOrObjNode = function(object, key, level) {
    const result = this.j2x(object, level + 1);
    if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {
      return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
    } else {
      return this.buildObjectNode(result.val, key, result.attrStr, level);
    }
  };
  var indentate = function(level) {
    return this.options.indentBy.repeat(level);
  };
  var isAttribute = function(name) {
    if (name.startsWith(this.options.attributeNamePrefix)) {
      return name.substr(this.attrPrefixLen);
    } else {
      return false;
    }
  };
  var buildFromOrderedJs = require_orderedJs2Xml();
  var defaultOptions = {
    attributeNamePrefix: "@_",
    attributesGroupName: false,
    textNodeName: "#text",
    ignoreAttributes: true,
    cdataPropName: false,
    format: false,
    indentBy: "  ",
    suppressEmptyNode: false,
    suppressUnpairedNode: true,
    suppressBooleanAttributes: true,
    tagValueProcessor: function(key, a) {
      return a;
    },
    attributeValueProcessor: function(attrName, a) {
      return a;
    },
    preserveOrder: false,
    commentPropName: false,
    unpairedTags: [],
    entities: [
      { regex: new RegExp("&", "g"), val: "&amp;" },
      { regex: new RegExp(">", "g"), val: "&gt;" },
      { regex: new RegExp("<", "g"), val: "&lt;" },
      { regex: new RegExp("\'", "g"), val: "&apos;" },
      { regex: new RegExp("\"", "g"), val: "&quot;" }
    ],
    processEntities: true,
    stopNodes: [],
    oneListGroup: false
  };
  Builder.prototype.build = function(jObj) {
    if (this.options.preserveOrder) {
      return buildFromOrderedJs(jObj, this.options);
    } else {
      if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
        jObj = {
          [this.options.arrayNodeName]: jObj
        };
      }
      return this.j2x(jObj, 0).val;
    }
  };
  Builder.prototype.j2x = function(jObj, level) {
    let attrStr = "";
    let val2 = "";
    for (let key in jObj) {
      if (typeof jObj[key] === "undefined") {
      } else if (jObj[key] === null) {
        if (key[0] === "?")
          val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
        else
          val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
      } else if (jObj[key] instanceof Date) {
        val2 += this.buildTextValNode(jObj[key], key, "", level);
      } else if (typeof jObj[key] !== "object") {
        const attr = this.isAttribute(key);
        if (attr) {
          attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
        } else {
          if (key === this.options.textNodeName) {
            let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
            val2 += this.replaceEntitiesValue(newval);
          } else {
            val2 += this.buildTextValNode(jObj[key], key, "", level);
          }
        }
      } else if (Array.isArray(jObj[key])) {
        const arrLen = jObj[key].length;
        let listTagVal = "";
        for (let j = 0;j < arrLen; j++) {
          const item = jObj[key][j];
          if (typeof item === "undefined") {
          } else if (item === null) {
            if (key[0] === "?")
              val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
            else
              val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
          } else if (typeof item === "object") {
            if (this.options.oneListGroup) {
              listTagVal += this.j2x(item, level + 1).val;
            } else {
              listTagVal += this.processTextOrObjNode(item, key, level);
            }
          } else {
            listTagVal += this.buildTextValNode(item, key, "", level);
          }
        }
        if (this.options.oneListGroup) {
          listTagVal = this.buildObjectNode(listTagVal, key, "", level);
        }
        val2 += listTagVal;
      } else {
        if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
          const Ks = Object.keys(jObj[key]);
          const L = Ks.length;
          for (let j = 0;j < L; j++) {
            attrStr += this.buildAttrPairStr(Ks[j], "" + jObj[key][Ks[j]]);
          }
        } else {
          val2 += this.processTextOrObjNode(jObj[key], key, level);
        }
      }
    }
    return { attrStr, val: val2 };
  };
  Builder.prototype.buildAttrPairStr = function(attrName, val2) {
    val2 = this.options.attributeValueProcessor(attrName, "" + val2);
    val2 = this.replaceEntitiesValue(val2);
    if (this.options.suppressBooleanAttributes && val2 === "true") {
      return " " + attrName;
    } else
      return " " + attrName + '="' + val2 + '"';
  };
  Builder.prototype.buildObjectNode = function(val2, key, attrStr, level) {
    if (val2 === "") {
      if (key[0] === "?")
        return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
      else {
        return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
      }
    } else {
      let tagEndExp = "</" + key + this.tagEndChar;
      let piClosingChar = "";
      if (key[0] === "?") {
        piClosingChar = "?";
        tagEndExp = "";
      }
      if (attrStr && val2.indexOf("<") === -1) {
        return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val2 + tagEndExp;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
        return this.indentate(level) + `<!--${val2}-->` + this.newLine;
      } else {
        return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val2 + this.indentate(level) + tagEndExp;
      }
    }
  };
  Builder.prototype.closeTag = function(key) {
    let closeTag = "";
    if (this.options.unpairedTags.indexOf(key) !== -1) {
      if (!this.options.suppressUnpairedNode)
        closeTag = "/";
    } else if (this.options.suppressEmptyNode) {
      closeTag = "/";
    } else {
      closeTag = `></${key}`;
    }
    return closeTag;
  };
  Builder.prototype.buildTextValNode = function(val2, key, attrStr, level) {
    if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
      return this.indentate(level) + `<![CDATA[${val2}]]>` + this.newLine;
    } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
      return this.indentate(level) + `<!--${val2}-->` + this.newLine;
    } else if (key[0] === "?") {
      return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
    } else {
      let textValue = this.options.tagValueProcessor(key, val2);
      textValue = this.replaceEntitiesValue(textValue);
      if (textValue === "") {
        return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
      } else {
        return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
      }
    }
  };
  Builder.prototype.replaceEntitiesValue = function(textValue) {
    if (textValue && textValue.length > 0 && this.options.processEntities) {
      for (let i = 0;i < this.options.entities.length; i++) {
        const entity = this.options.entities[i];
        textValue = textValue.replace(entity.regex, entity.val);
      }
    }
    return textValue;
  };
  module.exports = Builder;
});

// node_modules/@aws-sdk/client-sso/dist-c
var require_fxp = __commonJS((exports, module) => {
  var validator = require_validator2();
  var XMLParser = require_XMLParser();
  var XMLBuilder = require_json2xml();
  module.exports = {
    XMLParser,
    XMLValidator: validator,
    XMLBuilder
  };
});

// node_modules/@aws-sdk/clien
var require_tslib2 = __commonJS((exports, module) => {
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __esDecorate;
  var __runInitializers;
  var __propKey;
  var __setFunctionName;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __spreadArray;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __classPrivateFieldIn;
  var __createBinding;
  var __addDisposableResource;
  var __disposeResources;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports2) {
        factory(createExporter(root, createExporter(exports2)));
      });
    } else if (typeof module === "object" && typeof exports === "object") {
      factory(createExporter(root, createExporter(exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports2, previous) {
      if (exports2 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports2, "__esModule", { value: true });
        } else {
          exports2.__esModule = true;
        }
      }
      return function(id, v) {
        return exports2[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (Object.prototype.hasOwnProperty.call(b, p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __);
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length;i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s);i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1;i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __esDecorate = function(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
      function accept(f) {
        if (f !== undefined && typeof f !== "function")
          throw new TypeError("Function expected");
        return f;
      }
      var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
      var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
      var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
      var _, done = false;
      for (var i = decorators.length - 1;i >= 0; i--) {
        var context = {};
        for (var p in contextIn)
          context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access)
          context.access[p] = contextIn.access[p];
        context.addInitializer = function(f) {
          if (done)
            throw new TypeError("Cannot add initializers after decoration has completed");
          extraInitializers.push(accept(f || null));
        };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
          if (result === undefined)
            continue;
          if (result === null || typeof result !== "object")
            throw new TypeError("Object expected");
          if (_ = accept(result.get))
            descriptor.get = _;
          if (_ = accept(result.set))
            descriptor.set = _;
          if (_ = accept(result.init))
            initializers.unshift(_);
        } else if (_ = accept(result)) {
          if (kind === "field")
            initializers.unshift(_);
          else
            descriptor[key] = _;
        }
      }
      if (target)
        Object.defineProperty(target, contextIn.name, descriptor);
      done = true;
    };
    __runInitializers = function(thisArg, initializers, value) {
      var useValue = arguments.length > 2;
      for (var i = 0;i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
      }
      return useValue ? value : undefined;
    };
    __propKey = function(x) {
      return typeof x === "symbol" ? x : "".concat(x);
    };
    __setFunctionName = function(f, name, prefix) {
      if (typeof name === "symbol")
        name = name.description ? "[".concat(name.description, "]") : "";
      return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), throw: verb(1), return: verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : undefined, done: true };
      }
    };
    __exportStar = function(m, o) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
          __createBinding(o, m, p);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === undefined)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === undefined)
        k2 = k;
      o[k2] = m[k];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = undefined;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === undefined || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0;i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length;i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0;i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length;j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __spreadArray = function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar;i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({ value: v2, done: d });
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", { value: raw });
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    var __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : { default: mod };
    };
    __classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    __classPrivateFieldIn = function(state, receiver) {
      if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
        throw new TypeError("Cannot use 'in' operator on non-object");
      return typeof state === "function" ? receiver === state : state.has(receiver);
    };
    __addDisposableResource = function(env, value, async) {
      if (value !== null && value !== undefined) {
        if (typeof value !== "object" && typeof value !== "function")
          throw new TypeError("Object expected.");
        var dispose;
        if (async) {
          if (!Symbol.asyncDispose)
            throw new TypeError("Symbol.asyncDispose is not defined.");
          dispose = value[Symbol.asyncDispose];
        }
        if (dispose === undefined) {
          if (!Symbol.dispose)
            throw new TypeError("Symbol.dispose is not defined.");
          dispose = value[Symbol.dispose];
        }
        if (typeof dispose !== "function")
          throw new TypeError("Object not disposable.");
        env.stack.push({ value, dispose, async });
      } else if (async) {
        env.stack.push({ async: true });
      }
      return value;
    };
    var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    __disposeResources = function(env) {
      function fail(e) {
        env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
        env.hasError = true;
      }
      function next() {
        while (env.stack.length) {
          var rec = env.stack.pop();
          try {
            var result = rec.dispose && rec.dispose.call(rec.value);
            if (rec.async)
              return Promise.resolve(result).then(next, function(e) {
                fail(e);
                return next();
              });
          } catch (e) {
            fail(e);
          }
        }
        if (env.hasError)
          throw env.error;
      }
      return next();
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__esDecorate", __esDecorate);
    exporter("__runInitializers", __runInitializers);
    exporter("__propKey", __propKey);
    exporter("__setFunctionName", __setFunctionName);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__spreadArray", __spreadArray);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    exporter("__addDisposableResource", __addDisposableResource);
    exporter("__disposeResources", __disposeResources);
  });
});

// node_modules/@aws-sdk/client-sso/dist-cjs/en
var require_package2 = __commonJS((exports, module) => {
  module.exports = {
    name: "@aws-sdk/client-s3",
    description: "AWS SDK for JavaScript S3 Client for Node.js, Browser and React Native",
    version: "3.499.0",
    scripts: {
      build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
      "build:cjs": "node ../../scripts/compilation/inline client-s3",
      "build:es": "tsc -p tsconfig.es.json",
      "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
      "build:types": "tsc -p tsconfig.types.json",
      "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
      clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
      "extract:docs": "api-extractor run --local",
      "generate:client": "node ../../scripts/generate-clients/single-service --solo s3",
      test: "yarn test:unit",
      "test:e2e": "yarn test:e2e:node && yarn test:e2e:browser",
      "test:e2e:browser": "ts-mocha test/**/*.browser.ispec.ts && karma start karma.conf.js",
      "test:e2e:node": "jest --c jest.config.e2e.js",
      "test:unit": "ts-mocha test/unit/**/*.spec.ts"
    },
    main: "./dist-cjs/index.js",
    types: "./dist-types/index.d.ts",
    module: "./dist-es/index.js",
    sideEffects: false,
    dependencies: {
      "@aws-crypto/sha1-browser": "3.0.0",
      "@aws-crypto/sha256-browser": "3.0.0",
      "@aws-crypto/sha256-js": "3.0.0",
      "@aws-sdk/client-sts": "3.499.0",
      "@aws-sdk/core": "3.496.0",
      "@aws-sdk/credential-provider-node": "3.499.0",
      "@aws-sdk/middleware-bucket-endpoint": "3.496.0",
      "@aws-sdk/middleware-expect-continue": "3.496.0",
      "@aws-sdk/middleware-flexible-checksums": "3.496.0",
      "@aws-sdk/middleware-host-header": "3.496.0",
      "@aws-sdk/middleware-location-constraint": "3.496.0",
      "@aws-sdk/middleware-logger": "3.496.0",
      "@aws-sdk/middleware-recursion-detection": "3.496.0",
      "@aws-sdk/middleware-sdk-s3": "3.499.0",
      "@aws-sdk/middleware-signing": "3.496.0",
      "@aws-sdk/middleware-ssec": "3.498.0",
      "@aws-sdk/middleware-user-agent": "3.496.0",
      "@aws-sdk/region-config-resolver": "3.496.0",
      "@aws-sdk/signature-v4-multi-region": "3.499.0",
      "@aws-sdk/types": "3.496.0",
      "@aws-sdk/util-endpoints": "3.496.0",
      "@aws-sdk/util-user-agent-browser": "3.496.0",
      "@aws-sdk/util-user-agent-node": "3.496.0",
      "@aws-sdk/xml-builder": "3.496.0",
      "@smithy/config-resolver": "^2.1.1",
      "@smithy/core": "^1.3.1",
      "@smithy/eventstream-serde-browser": "^2.1.1",
      "@smithy/eventstream-serde-config-resolver": "^2.1.1",
      "@smithy/eventstream-serde-node": "^2.1.1",
      "@smithy/fetch-http-handler": "^2.4.1",
      "@smithy/hash-blob-browser": "^2.1.1",
      "@smithy/hash-node": "^2.1.1",
      "@smithy/hash-stream-node": "^2.1.1",
      "@smithy/invalid-dependency": "^2.1.1",
      "@smithy/md5-js": "^2.1.1",
      "@smithy/middleware-content-length": "^2.1.1",
      "@smithy/middleware-endpoint": "^2.4.1",
      "@smithy/middleware-retry": "^2.1.1",
      "@smithy/middleware-serde": "^2.1.1",
      "@smithy/middleware-stack": "^2.1.1",
      "@smithy/node-config-provider": "^2.2.1",
      "@smithy/node-http-handler": "^2.3.1",
      "@smithy/protocol-http": "^3.1.1",
      "@smithy/smithy-client": "^2.3.1",
      "@smithy/types": "^2.9.1",
      "@smithy/url-parser": "^2.1.1",
      "@smithy/util-base64": "^2.1.1",
      "@smithy/util-body-length-browser": "^2.1.1",
      "@smithy/util-body-length-node": "^2.2.1",
      "@smithy/util-defaults-mode-browser": "^2.1.1",
      "@smithy/util-defaults-mode-node": "^2.1.1",
      "@smithy/util-endpoints": "^1.1.1",
      "@smithy/util-retry": "^2.1.1",
      "@smithy/util-stream": "^2.1.1",
      "@smithy/util-utf8": "^2.1.1",
      "@smithy/util-waiter": "^2.1.1",
      "fast-xml-parser": "4.2.5",
      tslib: "^2.5.0"
    },
    devDependencies: {
      "@smithy/service-client-documentation-generator": "^2.1.1",
      "@tsconfig/node14": "1.0.3",
      "@types/chai": "^4.2.11",
      "@types/mocha": "^8.0.4",
      "@types/node": "^14.14.31",
      concurrently: "7.0.0",
      "downlevel-dts": "0.10.1",
      rimraf: "3.0.2",
      typescript: "~4.9.5"
    },
    engines: {
      node: ">=14.0.0"
    },
    typesVersions: {
      "<4.0": {
        "dist-types/*": [
          "dist-types/ts3.4/*"
        ]
      }
    },
    files: [
      "dist-*/**"
    ],
    author: {
      name: "AWS SDK for JavaScript Team",
      url: "https://aws.amazon.com/javascript/"
    },
    license: "Apache-2.0",
    browser: {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
    },
    "react-native": {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
    },
    homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-s3",
    repository: {
      type: "git",
      url: "https://github.com/aws/aws-sdk-js-v3.git",
      directory: "clients/client-s3"
    }
  };
});

// node_modules/@aws-sdk/client-sso/dist-cjs/en
var require_dist_cjs44 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    AWSSDKSigV4Signer: () => AWSSDKSigV4Signer,
    AwsSdkSigV4Signer: () => AwsSdkSigV4Signer,
    _toBool: () => _toBool,
    _toNum: () => _toNum,
    _toStr: () => _toStr,
    awsExpectUnion: () => awsExpectUnion,
    emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion,
    resolveAWSSDKSigV4Config: () => resolveAWSSDKSigV4Config,
    resolveAwsSdkSigV4Config: () => resolveAwsSdkSigV4Config
  });
  module.exports = __toCommonJS(src_exports);
  var warningEmitted = false;
  var emitWarningIfUnsupportedVersion = __name((version) => {
    if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf("."))) < 16) {
      warningEmitted = true;
      process.emitWarning(`NodeDeprecationWarning: The AWS SDK for JavaScript (v3) will
no longer support Node.js 14.x on May 1, 2024.

To continue receiving updates to AWS services, bug fixes, and security
updates please upgrade to an active Node.js LTS version.

More information can be found at: https://a.co/dzr2AJd`);
    }
  }, "emitWarningIfUnsupportedVersion");
  var import_protocol_http = require_dist_cjs2();
  var getDateHeader = __name((response) => {
    var _a, _b;
    return import_protocol_http.HttpResponse.isInstance(response) ? ((_a = response.headers) == null ? undefined : _a.date) ?? ((_b = response.headers) == null ? undefined : _b.Date) : undefined;
  }, "getDateHeader");
  var getSkewCorrectedDate = __name((systemClockOffset) => new Date(Date.now() + systemClockOffset), "getSkewCorrectedDate");
  var isClockSkewed = __name((clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 300000, "isClockSkewed");
  var getUpdatedSystemClockOffset = __name((clockTime, currentSystemClockOffset) => {
    const clockTimeInMs = Date.parse(clockTime);
    if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
      return clockTimeInMs - Date.now();
    }
    return currentSystemClockOffset;
  }, "getUpdatedSystemClockOffset");
  var throwSigningPropertyError = __name((name, property) => {
    if (!property) {
      throw new Error(`Property \`${name}\` is not resolved for AWS SDK SigV4Auth`);
    }
    return property;
  }, "throwSigningPropertyError");
  var validateSigningProperties = __name(async (signingProperties) => {
    var _a, _b, _c;
    const context = throwSigningPropertyError("context", signingProperties.context);
    const config = throwSigningPropertyError("config", signingProperties.config);
    const authScheme = (_c = (_b = (_a = context.endpointV2) == null ? undefined : _a.properties) == null ? undefined : _b.authSchemes) == null ? undefined : _c[0];
    const signerFunction = throwSigningPropertyError("signer", config.signer);
    const signer = await signerFunction(authScheme);
    const signingRegion = signingProperties == null ? undefined : signingProperties.signingRegion;
    const signingName = signingProperties == null ? undefined : signingProperties.signingName;
    return {
      config,
      signer,
      signingRegion,
      signingName
    };
  }, "validateSigningProperties");
  var _AwsSdkSigV4Signer = class _AwsSdkSigV4Signer2 {
    async sign(httpRequest, identity, signingProperties) {
      if (!import_protocol_http.HttpRequest.isInstance(httpRequest)) {
        throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
      }
      const { config, signer, signingRegion, signingName } = await validateSigningProperties(signingProperties);
      const signedRequest = await signer.sign(httpRequest, {
        signingDate: getSkewCorrectedDate(config.systemClockOffset),
        signingRegion,
        signingService: signingName
      });
      return signedRequest;
    }
    errorHandler(signingProperties) {
      return (error) => {
        const serverTime = error.ServerTime ?? getDateHeader(error.$response);
        if (serverTime) {
          const config = throwSigningPropertyError("config", signingProperties.config);
          config.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config.systemClockOffset);
        }
        throw error;
      };
    }
    successHandler(httpResponse, signingProperties) {
      const dateHeader = getDateHeader(httpResponse);
      if (dateHeader) {
        const config = throwSigningPropertyError("config", signingProperties.config);
        config.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config.systemClockOffset);
      }
    }
  };
  __name(_AwsSdkSigV4Signer, "AwsSdkSigV4Signer");
  var AwsSdkSigV4Signer = _AwsSdkSigV4Signer;
  var AWSSDKSigV4Signer = AwsSdkSigV4Signer;
  var import_core = require_dist_cjs43();
  var import_signature_v4 = require_dist_cjs21();
  var resolveAwsSdkSigV4Config = __name((config) => {
    let normalizedCreds;
    if (config.credentials) {
      normalizedCreds = (0, import_core.memoizeIdentityProvider)(config.credentials, import_core.isIdentityExpired, import_core.doesIdentityRequireRefresh);
    }
    if (!normalizedCreds) {
      if (config.credentialDefaultProvider) {
        normalizedCreds = (0, import_core.normalizeProvider)(config.credentialDefaultProvider(config));
      } else {
        normalizedCreds = __name(async () => {
          throw new Error("`credentials` is missing");
        }, "normalizedCreds");
      }
    }
    const {
      signingEscapePath = true,
      systemClockOffset = config.systemClockOffset || 0,
      sha256
    } = config;
    let signer;
    if (config.signer) {
      signer = (0, import_core.normalizeProvider)(config.signer);
    } else if (config.regionInfoProvider) {
      signer = __name(() => (0, import_core.normalizeProvider)(config.region)().then(async (region) => [
        await config.regionInfoProvider(region, {
          useFipsEndpoint: await config.useFipsEndpoint(),
          useDualstackEndpoint: await config.useDualstackEndpoint()
        }) || {},
        region
      ]).then(([regionInfo, region]) => {
        const { signingRegion, signingService } = regionInfo;
        config.signingRegion = config.signingRegion || signingRegion || region;
        config.signingName = config.signingName || signingService || config.serviceId;
        const params = {
          ...config,
          credentials: normalizedCreds,
          region: config.signingRegion,
          service: config.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        };
        const SignerCtor = config.signerConstructor || import_signature_v4.SignatureV4;
        return new SignerCtor(params);
      }), "signer");
    } else {
      signer = __name(async (authScheme) => {
        authScheme = Object.assign({}, {
          name: "sigv4",
          signingName: config.signingName || config.defaultSigningName,
          signingRegion: await (0, import_core.normalizeProvider)(config.region)(),
          properties: {}
        }, authScheme);
        const signingRegion = authScheme.signingRegion;
        const signingService = authScheme.signingName;
        config.signingRegion = config.signingRegion || signingRegion;
        config.signingName = config.signingName || signingService || config.serviceId;
        const params = {
          ...config,
          credentials: normalizedCreds,
          region: config.signingRegion,
          service: config.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        };
        const SignerCtor = config.signerConstructor || import_signature_v4.SignatureV4;
        return new SignerCtor(params);
      }, "signer");
    }
    return {
      ...config,
      systemClockOffset,
      signingEscapePath,
      credentials: normalizedCreds,
      signer
    };
  }, "resolveAwsSdkSigV4Config");
  var resolveAWSSDKSigV4Config = resolveAwsSdkSigV4Config;
  var _toStr = __name((val2) => {
    if (val2 == null) {
      return val2;
    }
    if (typeof val2 === "number" || typeof val2 === "bigint") {
      const warning = new Error(`Received number ${val2} where a string was expected.`);
      warning.name = "Warning";
      console.warn(warning);
      return String(val2);
    }
    if (typeof val2 === "boolean") {
      const warning = new Error(`Received boolean ${val2} where a string was expected.`);
      warning.name = "Warning";
      console.warn(warning);
      return String(val2);
    }
    return val2;
  }, "_toStr");
  var _toBool = __name((val2) => {
    if (val2 == null) {
      return val2;
    }
    if (typeof val2 === "number") {
    }
    if (typeof val2 === "string") {
      const lowercase = val2.toLowerCase();
      if (val2 !== "" && lowercase !== "false" && lowercase !== "true") {
        const warning = new Error(`Received string "${val2}" where a boolean was expected.`);
        warning.name = "Warning";
        console.warn(warning);
      }
      return val2 !== "" && lowercase !== "false";
    }
    return val2;
  }, "_toBool");
  var _toNum = __name((val2) => {
    if (val2 == null) {
      return val2;
    }
    if (typeof val2 === "boolean") {
    }
    if (typeof val2 === "string") {
      const num = Number(val2);
      if (num.toString() !== val2) {
        const warning = new Error(`Received string "${val2}" where a number was expected.`);
        warning.name = "Warning";
        console.warn(warning);
        return val2;
      }
      return num;
    }
    return val2;
  }, "_toNum");
  var import_smithy_client = require_dist_cjs16();
  var awsExpectUnion = __name((value) => {
    if (value == null) {
      return;
    }
    if (typeof value === "object" && "__type" in value) {
      delete value.__type;
    }
    return (0, import_smithy_client.expectUnion)(value);
  }, "awsExpectUnion");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.jsno
var require_httpAuthSchemeProvider = __commonJS((exports) => {
  var createAwsAuthSigv4HttpAuthOption = function(authParameters) {
    return {
      schemeId: "aws.auth#sigv4",
      signingProperties: {
        name: "sts",
        region: authParameters.region
      },
      propertiesExtractor: (config, context) => ({
        signingProperties: {
          config,
          context
        }
      })
    };
  };
  var createSmithyApiNoAuthHttpAuthOption = function(authParameters) {
    return {
      schemeId: "smithy.api#noAuth"
    };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.resolveHttpAuthSchemeConfig = exports.resolveStsAuthConfig = exports.defaultSTSHttpAuthSchemeProvider = exports.defaultSTSHttpAuthSchemeParametersProvider = undefined;
  var core_1 = require_dist_cjs44();
  var util_middleware_1 = require_dist_cjs20();
  var STSClient_1 = require_STSClient();
  var defaultSTSHttpAuthSchemeParametersProvider = async (config, context, input) => {
    return {
      operation: (0, util_middleware_1.getSmithyContext)(context).operation,
      region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
        throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
      })()
    };
  };
  exports.defaultSTSHttpAuthSchemeParametersProvider = defaultSTSHttpAuthSchemeParametersProvider;
  var defaultSTSHttpAuthSchemeProvider = (authParameters) => {
    const options = [];
    switch (authParameters.operation) {
      case "AssumeRoleWithSAML": {
        options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
        break;
      }
      case "AssumeRoleWithWebIdentity": {
        options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
        break;
      }
      default: {
        options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
      }
    }
    return options;
  };
  exports.defaultSTSHttpAuthSchemeProvider = defaultSTSHttpAuthSchemeProvider;
  var resolveStsAuthConfig = (input) => ({
    ...input,
    stsClientCtor: STSClient_1.STSClient
  });
  exports.resolveStsAuthConfig = resolveStsAuthConfig;
  var resolveHttpAuthSchemeConfig = (config) => {
    const config_0 = (0, exports.resolveStsAuthConfig)(config);
    const config_1 = (0, core_1.resolveAwsSdkSigV4Config)(config_0);
    return {
      ...config_1
    };
  };
  exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.jsno
var require_EndpointParameters = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.commonParams = exports.resolveClientEndpointParameters = undefined;
  var resolveClientEndpointParameters = (options) => {
    return {
      ...options,
      useDualstackEndpoint: options.useDualstackEndpoint ?? false,
      useFipsEndpoint: options.useFipsEndpoint ?? false,
      useGlobalEndpoint: options.useGlobalEndpoint ?? false,
      defaultSigningName: "sts"
    };
  };
  exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  exports.commonParams = {
    UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
  };
});

// node_modules/@aws-sdk/client-sso/dist-cjs/end
var require_package3 = __commonJS((exports, module) => {
  module.exports = {
    name: "@aws-sdk/client-sts",
    description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
    version: "3.499.0",
    scripts: {
      build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
      "build:cjs": "node ../../scripts/compilation/inline client-sts",
      "build:es": "tsc -p tsconfig.es.json",
      "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
      "build:types": "tsc -p tsconfig.types.json",
      "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
      clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
      "extract:docs": "api-extractor run --local",
      "generate:client": "node ../../scripts/generate-clients/single-service --solo sts",
      test: "yarn test:unit",
      "test:unit": "jest"
    },
    main: "./dist-cjs/index.js",
    types: "./dist-types/index.d.ts",
    module: "./dist-es/index.js",
    sideEffects: false,
    dependencies: {
      "@aws-crypto/sha256-browser": "3.0.0",
      "@aws-crypto/sha256-js": "3.0.0",
      "@aws-sdk/core": "3.496.0",
      "@aws-sdk/credential-provider-node": "3.499.0",
      "@aws-sdk/middleware-host-header": "3.496.0",
      "@aws-sdk/middleware-logger": "3.496.0",
      "@aws-sdk/middleware-recursion-detection": "3.496.0",
      "@aws-sdk/middleware-user-agent": "3.496.0",
      "@aws-sdk/region-config-resolver": "3.496.0",
      "@aws-sdk/types": "3.496.0",
      "@aws-sdk/util-endpoints": "3.496.0",
      "@aws-sdk/util-user-agent-browser": "3.496.0",
      "@aws-sdk/util-user-agent-node": "3.496.0",
      "@smithy/config-resolver": "^2.1.1",
      "@smithy/core": "^1.3.1",
      "@smithy/fetch-http-handler": "^2.4.1",
      "@smithy/hash-node": "^2.1.1",
      "@smithy/invalid-dependency": "^2.1.1",
      "@smithy/middleware-content-length": "^2.1.1",
      "@smithy/middleware-endpoint": "^2.4.1",
      "@smithy/middleware-retry": "^2.1.1",
      "@smithy/middleware-serde": "^2.1.1",
      "@smithy/middleware-stack": "^2.1.1",
      "@smithy/node-config-provider": "^2.2.1",
      "@smithy/node-http-handler": "^2.3.1",
      "@smithy/protocol-http": "^3.1.1",
      "@smithy/smithy-client": "^2.3.1",
      "@smithy/types": "^2.9.1",
      "@smithy/url-parser": "^2.1.1",
      "@smithy/util-base64": "^2.1.1",
      "@smithy/util-body-length-browser": "^2.1.1",
      "@smithy/util-body-length-node": "^2.2.1",
      "@smithy/util-defaults-mode-browser": "^2.1.1",
      "@smithy/util-defaults-mode-node": "^2.1.1",
      "@smithy/util-endpoints": "^1.1.1",
      "@smithy/util-middleware": "^2.1.1",
      "@smithy/util-retry": "^2.1.1",
      "@smithy/util-utf8": "^2.1.1",
      "fast-xml-parser": "4.2.5",
      tslib: "^2.5.0"
    },
    devDependencies: {
      "@smithy/service-client-documentation-generator": "^2.1.1",
      "@tsconfig/node14": "1.0.3",
      "@types/node": "^14.14.31",
      concurrently: "7.0.0",
      "downlevel-dts": "0.10.1",
      rimraf: "3.0.2",
      typescript: "~4.9.5"
    },
    engines: {
      node: ">=14.0.0"
    },
    typesVersions: {
      "<4.0": {
        "dist-types/*": [
          "dist-types/ts3.4/*"
        ]
      }
    },
    files: [
      "dist-*/**"
    ],
    author: {
      name: "AWS SDK for JavaScript Team",
      url: "https://aws.amazon.com/javascript/"
    },
    license: "Apache-2.0",
    browser: {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
    },
    "react-native": {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
    },
    homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
    repository: {
      type: "git",
      url: "https://github.com/aws/aws-sdk-js-v3.git",
      directory: "clients/client-sts"
    }
  };
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.jsn
var require_STSServiceException = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.STSServiceException = exports.__ServiceException = undefined;
  var smithy_client_1 = require_dist_cjs16();
  Object.defineProperty(exports, "__ServiceException", { enumerable: true, get: function() {
    return smithy_client_1.ServiceException;
  } });

  class STSServiceException2 extends smithy_client_1.ServiceException {
    constructor(options) {
      super(options);
      Object.setPrototypeOf(this, STSServiceException2.prototype);
    }
  }
  exports.STSServiceException = STSServiceException2;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.j
var require_models_0 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.GetSessionTokenResponseFilterSensitiveLog = exports.GetFederationTokenResponseFilterSensitiveLog = exports.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = exports.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = exports.AssumeRoleWithSAMLResponseFilterSensitiveLog = exports.AssumeRoleWithSAMLRequestFilterSensitiveLog = exports.AssumeRoleResponseFilterSensitiveLog = exports.CredentialsFilterSensitiveLog = exports.InvalidAuthorizationMessageException = exports.IDPCommunicationErrorException = exports.InvalidIdentityTokenException = exports.IDPRejectedClaimException = exports.RegionDisabledException = exports.PackedPolicyTooLargeException = exports.MalformedPolicyDocumentException = exports.ExpiredTokenException = undefined;
  var smithy_client_1 = require_dist_cjs16();
  var STSServiceException_1 = require_STSServiceException();

  class ExpiredTokenException2 extends STSServiceException_1.STSServiceException {
    constructor(opts) {
      super({
        name: "ExpiredTokenException",
        $fault: "client",
        ...opts
      });
      this.name = "ExpiredTokenException";
      this.$fault = "client";
      Object.setPrototypeOf(this, ExpiredTokenException2.prototype);
    }
  }
  exports.ExpiredTokenException = ExpiredTokenException2;

  class MalformedPolicyDocumentException2 extends STSServiceException_1.STSServiceException {
    constructor(opts) {
      super({
        name: "MalformedPolicyDocumentException",
        $fault: "client",
        ...opts
      });
      this.name = "MalformedPolicyDocumentException";
      this.$fault = "client";
      Object.setPrototypeOf(this, MalformedPolicyDocumentException2.prototype);
    }
  }
  exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException2;

  class PackedPolicyTooLargeException2 extends STSServiceException_1.STSServiceException {
    constructor(opts) {
      super({
        name: "PackedPolicyTooLargeException",
        $fault: "client",
        ...opts
      });
      this.name = "PackedPolicyTooLargeException";
      this.$fault = "client";
      Object.setPrototypeOf(this, PackedPolicyTooLargeException2.prototype);
    }
  }
  exports.PackedPolicyTooLargeException = PackedPolicyTooLargeException2;

  class RegionDisabledException2 extends STSServiceException_1.STSServiceException {
    constructor(opts) {
      super({
        name: "RegionDisabledException",
        $fault: "client",
        ...opts
      });
      this.name = "RegionDisabledException";
      this.$fault = "client";
      Object.setPrototypeOf(this, RegionDisabledException2.prototype);
    }
  }
  exports.RegionDisabledException = RegionDisabledException2;

  class IDPRejectedClaimException2 extends STSServiceException_1.STSServiceException {
    constructor(opts) {
      super({
        name: "IDPRejectedClaimException",
        $fault: "client",
        ...opts
      });
      this.name = "IDPRejectedClaimException";
      this.$fault = "client";
      Object.setPrototypeOf(this, IDPRejectedClaimException2.prototype);
    }
  }
  exports.IDPRejectedClaimException = IDPRejectedClaimException2;

  class InvalidIdentityTokenException2 extends STSServiceException_1.STSServiceException {
    constructor(opts) {
      super({
        name: "InvalidIdentityTokenException",
        $fault: "client",
        ...opts
      });
      this.name = "InvalidIdentityTokenException";
      this.$fault = "client";
      Object.setPrototypeOf(this, InvalidIdentityTokenException2.prototype);
    }
  }
  exports.InvalidIdentityTokenException = InvalidIdentityTokenException2;

  class IDPCommunicationErrorException2 extends STSServiceException_1.STSServiceException {
    constructor(opts) {
      super({
        name: "IDPCommunicationErrorException",
        $fault: "client",
        ...opts
      });
      this.name = "IDPCommunicationErrorException";
      this.$fault = "client";
      Object.setPrototypeOf(this, IDPCommunicationErrorException2.prototype);
    }
  }
  exports.IDPCommunicationErrorException = IDPCommunicationErrorException2;

  class InvalidAuthorizationMessageException2 extends STSServiceException_1.STSServiceException {
    constructor(opts) {
      super({
        name: "InvalidAuthorizationMessageException",
        $fault: "client",
        ...opts
      });
      this.name = "InvalidAuthorizationMessageException";
      this.$fault = "client";
      Object.setPrototypeOf(this, InvalidAuthorizationMessageException2.prototype);
    }
  }
  exports.InvalidAuthorizationMessageException = InvalidAuthorizationMessageException2;
  var CredentialsFilterSensitiveLog2 = (obj) => ({
    ...obj,
    ...obj.SecretAccessKey && { SecretAccessKey: smithy_client_1.SENSITIVE_STRING }
  });
  exports.CredentialsFilterSensitiveLog = CredentialsFilterSensitiveLog2;
  var AssumeRoleResponseFilterSensitiveLog2 = (obj) => ({
    ...obj,
    ...obj.Credentials && { Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials) }
  });
  exports.AssumeRoleResponseFilterSensitiveLog = AssumeRoleResponseFilterSensitiveLog2;
  var AssumeRoleWithSAMLRequestFilterSensitiveLog2 = (obj) => ({
    ...obj,
    ...obj.SAMLAssertion && { SAMLAssertion: smithy_client_1.SENSITIVE_STRING }
  });
  exports.AssumeRoleWithSAMLRequestFilterSensitiveLog = AssumeRoleWithSAMLRequestFilterSensitiveLog2;
  var AssumeRoleWithSAMLResponseFilterSensitiveLog2 = (obj) => ({
    ...obj,
    ...obj.Credentials && { Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials) }
  });
  exports.AssumeRoleWithSAMLResponseFilterSensitiveLog = AssumeRoleWithSAMLResponseFilterSensitiveLog2;
  var AssumeRoleWithWebIdentityRequestFilterSensitiveLog2 = (obj) => ({
    ...obj,
    ...obj.WebIdentityToken && { WebIdentityToken: smithy_client_1.SENSITIVE_STRING }
  });
  exports.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = AssumeRoleWithWebIdentityRequestFilterSensitiveLog2;
  var AssumeRoleWithWebIdentityResponseFilterSensitiveLog2 = (obj) => ({
    ...obj,
    ...obj.Credentials && { Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials) }
  });
  exports.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = AssumeRoleWithWebIdentityResponseFilterSensitiveLog2;
  var GetFederationTokenResponseFilterSensitiveLog2 = (obj) => ({
    ...obj,
    ...obj.Credentials && { Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials) }
  });
  exports.GetFederationTokenResponseFilterSensitiveLog = GetFederationTokenResponseFilterSensitiveLog2;
  var GetSessionTokenResponseFilterSensitiveLog2 = (obj) => ({
    ...obj,
    ...obj.Credentials && { Credentials: (0, exports.CredentialsFilterSensitiveLog)(obj.Credentials) }
  });
  exports.GetSessionTokenResponseFilterSensitiveLog = GetSessionTokenResponseFilterSensitiveLog2;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssol
var require_Aws_query = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.de_GetSessionTokenCommand = exports.de_GetFederationTokenCommand = exports.de_GetCallerIdentityCommand = exports.de_GetAccessKeyInfoCommand = exports.de_DecodeAuthorizationMessageCommand = exports.de_AssumeRoleWithWebIdentityCommand = exports.de_AssumeRoleWithSAMLCommand = exports.de_AssumeRoleCommand = exports.se_GetSessionTokenCommand = exports.se_GetFederationTokenCommand = exports.se_GetCallerIdentityCommand = exports.se_GetAccessKeyInfoCommand = exports.se_DecodeAuthorizationMessageCommand = exports.se_AssumeRoleWithWebIdentityCommand = exports.se_AssumeRoleWithSAMLCommand = exports.se_AssumeRoleCommand = undefined;
  var protocol_http_1 = require_dist_cjs2();
  var smithy_client_1 = require_dist_cjs16();
  var fast_xml_parser_1 = require_fxp();
  var models_0_1 = require_models_0();
  var STSServiceException_1 = require_STSServiceException();
  var se_AssumeRoleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_AssumeRoleRequest(input, context),
      [_A]: _AR,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  };
  exports.se_AssumeRoleCommand = se_AssumeRoleCommand;
  var se_AssumeRoleWithSAMLCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_AssumeRoleWithSAMLRequest(input, context),
      [_A]: _ARWSAML,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  };
  exports.se_AssumeRoleWithSAMLCommand = se_AssumeRoleWithSAMLCommand;
  var se_AssumeRoleWithWebIdentityCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_AssumeRoleWithWebIdentityRequest(input, context),
      [_A]: _ARWWI,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  };
  exports.se_AssumeRoleWithWebIdentityCommand = se_AssumeRoleWithWebIdentityCommand;
  var se_DecodeAuthorizationMessageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_DecodeAuthorizationMessageRequest(input, context),
      [_A]: _DAM,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  };
  exports.se_DecodeAuthorizationMessageCommand = se_DecodeAuthorizationMessageCommand;
  var se_GetAccessKeyInfoCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetAccessKeyInfoRequest(input, context),
      [_A]: _GAKI,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  };
  exports.se_GetAccessKeyInfoCommand = se_GetAccessKeyInfoCommand;
  var se_GetCallerIdentityCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetCallerIdentityRequest(input, context),
      [_A]: _GCI,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  };
  exports.se_GetCallerIdentityCommand = se_GetCallerIdentityCommand;
  var se_GetFederationTokenCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetFederationTokenRequest(input, context),
      [_A]: _GFT,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  };
  exports.se_GetFederationTokenCommand = se_GetFederationTokenCommand;
  var se_GetSessionTokenCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
      ...se_GetSessionTokenRequest(input, context),
      [_A]: _GST,
      [_V]: _
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
  };
  exports.se_GetSessionTokenCommand = se_GetSessionTokenCommand;
  var de_AssumeRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
      return de_AssumeRoleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  };
  exports.de_AssumeRoleCommand = de_AssumeRoleCommand;
  var de_AssumeRoleCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "ExpiredTokenException":
      case "com.amazonaws.sts#ExpiredTokenException":
        throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
      case "MalformedPolicyDocument":
      case "com.amazonaws.sts#MalformedPolicyDocumentException":
        throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
      case "PackedPolicyTooLarge":
      case "com.amazonaws.sts#PackedPolicyTooLargeException":
        throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
      case "RegionDisabledException":
      case "com.amazonaws.sts#RegionDisabledException":
        throw await de_RegionDisabledExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody: parsedBody.Error,
          errorCode
        });
    }
  };
  var de_AssumeRoleWithSAMLCommand = async (output, context) => {
    if (output.statusCode >= 300) {
      return de_AssumeRoleWithSAMLCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  };
  exports.de_AssumeRoleWithSAMLCommand = de_AssumeRoleWithSAMLCommand;
  var de_AssumeRoleWithSAMLCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "ExpiredTokenException":
      case "com.amazonaws.sts#ExpiredTokenException":
        throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
      case "IDPRejectedClaim":
      case "com.amazonaws.sts#IDPRejectedClaimException":
        throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
      case "InvalidIdentityToken":
      case "com.amazonaws.sts#InvalidIdentityTokenException":
        throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
      case "MalformedPolicyDocument":
      case "com.amazonaws.sts#MalformedPolicyDocumentException":
        throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
      case "PackedPolicyTooLarge":
      case "com.amazonaws.sts#PackedPolicyTooLargeException":
        throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
      case "RegionDisabledException":
      case "com.amazonaws.sts#RegionDisabledException":
        throw await de_RegionDisabledExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody: parsedBody.Error,
          errorCode
        });
    }
  };
  var de_AssumeRoleWithWebIdentityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
      return de_AssumeRoleWithWebIdentityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  };
  exports.de_AssumeRoleWithWebIdentityCommand = de_AssumeRoleWithWebIdentityCommand;
  var de_AssumeRoleWithWebIdentityCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "ExpiredTokenException":
      case "com.amazonaws.sts#ExpiredTokenException":
        throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
      case "IDPCommunicationError":
      case "com.amazonaws.sts#IDPCommunicationErrorException":
        throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);
      case "IDPRejectedClaim":
      case "com.amazonaws.sts#IDPRejectedClaimException":
        throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
      case "InvalidIdentityToken":
      case "com.amazonaws.sts#InvalidIdentityTokenException":
        throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
      case "MalformedPolicyDocument":
      case "com.amazonaws.sts#MalformedPolicyDocumentException":
        throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
      case "PackedPolicyTooLarge":
      case "com.amazonaws.sts#PackedPolicyTooLargeException":
        throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
      case "RegionDisabledException":
      case "com.amazonaws.sts#RegionDisabledException":
        throw await de_RegionDisabledExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody: parsedBody.Error,
          errorCode
        });
    }
  };
  var de_DecodeAuthorizationMessageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
      return de_DecodeAuthorizationMessageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  };
  exports.de_DecodeAuthorizationMessageCommand = de_DecodeAuthorizationMessageCommand;
  var de_DecodeAuthorizationMessageCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "InvalidAuthorizationMessageException":
      case "com.amazonaws.sts#InvalidAuthorizationMessageException":
        throw await de_InvalidAuthorizationMessageExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody: parsedBody.Error,
          errorCode
        });
    }
  };
  var de_GetAccessKeyInfoCommand = async (output, context) => {
    if (output.statusCode >= 300) {
      return de_GetAccessKeyInfoCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  };
  exports.de_GetAccessKeyInfoCommand = de_GetAccessKeyInfoCommand;
  var de_GetAccessKeyInfoCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody: parsedBody.Error,
      errorCode
    });
  };
  var de_GetCallerIdentityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
      return de_GetCallerIdentityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCallerIdentityResponse(data.GetCallerIdentityResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  };
  exports.de_GetCallerIdentityCommand = de_GetCallerIdentityCommand;
  var de_GetCallerIdentityCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody: parsedBody.Error,
      errorCode
    });
  };
  var de_GetFederationTokenCommand = async (output, context) => {
    if (output.statusCode >= 300) {
      return de_GetFederationTokenCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetFederationTokenResponse(data.GetFederationTokenResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  };
  exports.de_GetFederationTokenCommand = de_GetFederationTokenCommand;
  var de_GetFederationTokenCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "MalformedPolicyDocument":
      case "com.amazonaws.sts#MalformedPolicyDocumentException":
        throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
      case "PackedPolicyTooLarge":
      case "com.amazonaws.sts#PackedPolicyTooLargeException":
        throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
      case "RegionDisabledException":
      case "com.amazonaws.sts#RegionDisabledException":
        throw await de_RegionDisabledExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody: parsedBody.Error,
          errorCode
        });
    }
  };
  var de_GetSessionTokenCommand = async (output, context) => {
    if (output.statusCode >= 300) {
      return de_GetSessionTokenCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetSessionTokenResponse(data.GetSessionTokenResult, context);
    const response = {
      $metadata: deserializeMetadata(output),
      ...contents
    };
    return response;
  };
  exports.de_GetSessionTokenCommand = de_GetSessionTokenCommand;
  var de_GetSessionTokenCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "RegionDisabledException":
      case "com.amazonaws.sts#RegionDisabledException":
        throw await de_RegionDisabledExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody: parsedBody.Error,
          errorCode
        });
    }
  };
  var de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ExpiredTokenException(body.Error, context);
    const exception = new models_0_1.ExpiredTokenException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
  };
  var de_IDPCommunicationErrorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_IDPCommunicationErrorException(body.Error, context);
    const exception = new models_0_1.IDPCommunicationErrorException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
  };
  var de_IDPRejectedClaimExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_IDPRejectedClaimException(body.Error, context);
    const exception = new models_0_1.IDPRejectedClaimException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
  };
  var de_InvalidAuthorizationMessageExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidAuthorizationMessageException(body.Error, context);
    const exception = new models_0_1.InvalidAuthorizationMessageException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
  };
  var de_InvalidIdentityTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidIdentityTokenException(body.Error, context);
    const exception = new models_0_1.InvalidIdentityTokenException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
  };
  var de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
    const exception = new models_0_1.MalformedPolicyDocumentException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
  };
  var de_PackedPolicyTooLargeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_PackedPolicyTooLargeException(body.Error, context);
    const exception = new models_0_1.PackedPolicyTooLargeException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
  };
  var de_RegionDisabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_RegionDisabledException(body.Error, context);
    const exception = new models_0_1.RegionDisabledException({
      $metadata: deserializeMetadata(parsedOutput),
      ...deserialized
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
  };
  var se_AssumeRoleRequest = (input, context) => {
    const entries = {};
    if (input[_RA] != null) {
      entries[_RA] = input[_RA];
    }
    if (input[_RSN] != null) {
      entries[_RSN] = input[_RSN];
    }
    if (input[_PA] != null) {
      const memberEntries = se_policyDescriptorListType(input[_PA], context);
      if (input[_PA]?.length === 0) {
        entries.PolicyArns = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `PolicyArns.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_P] != null) {
      entries[_P] = input[_P];
    }
    if (input[_DS] != null) {
      entries[_DS] = input[_DS];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_TTK] != null) {
      const memberEntries = se_tagKeyListType(input[_TTK], context);
      if (input[_TTK]?.length === 0) {
        entries.TransitiveTagKeys = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `TransitiveTagKeys.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_EI] != null) {
      entries[_EI] = input[_EI];
    }
    if (input[_SN] != null) {
      entries[_SN] = input[_SN];
    }
    if (input[_TC] != null) {
      entries[_TC] = input[_TC];
    }
    if (input[_SI] != null) {
      entries[_SI] = input[_SI];
    }
    if (input[_PC] != null) {
      const memberEntries = se_ProvidedContextsListType(input[_PC], context);
      if (input[_PC]?.length === 0) {
        entries.ProvidedContexts = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `ProvidedContexts.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  };
  var se_AssumeRoleWithSAMLRequest = (input, context) => {
    const entries = {};
    if (input[_RA] != null) {
      entries[_RA] = input[_RA];
    }
    if (input[_PAr] != null) {
      entries[_PAr] = input[_PAr];
    }
    if (input[_SAMLA] != null) {
      entries[_SAMLA] = input[_SAMLA];
    }
    if (input[_PA] != null) {
      const memberEntries = se_policyDescriptorListType(input[_PA], context);
      if (input[_PA]?.length === 0) {
        entries.PolicyArns = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `PolicyArns.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_P] != null) {
      entries[_P] = input[_P];
    }
    if (input[_DS] != null) {
      entries[_DS] = input[_DS];
    }
    return entries;
  };
  var se_AssumeRoleWithWebIdentityRequest = (input, context) => {
    const entries = {};
    if (input[_RA] != null) {
      entries[_RA] = input[_RA];
    }
    if (input[_RSN] != null) {
      entries[_RSN] = input[_RSN];
    }
    if (input[_WIT] != null) {
      entries[_WIT] = input[_WIT];
    }
    if (input[_PI] != null) {
      entries[_PI] = input[_PI];
    }
    if (input[_PA] != null) {
      const memberEntries = se_policyDescriptorListType(input[_PA], context);
      if (input[_PA]?.length === 0) {
        entries.PolicyArns = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `PolicyArns.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_P] != null) {
      entries[_P] = input[_P];
    }
    if (input[_DS] != null) {
      entries[_DS] = input[_DS];
    }
    return entries;
  };
  var se_DecodeAuthorizationMessageRequest = (input, context) => {
    const entries = {};
    if (input[_EM] != null) {
      entries[_EM] = input[_EM];
    }
    return entries;
  };
  var se_GetAccessKeyInfoRequest = (input, context) => {
    const entries = {};
    if (input[_AKI] != null) {
      entries[_AKI] = input[_AKI];
    }
    return entries;
  };
  var se_GetCallerIdentityRequest = (input, context) => {
    const entries = {};
    return entries;
  };
  var se_GetFederationTokenRequest = (input, context) => {
    const entries = {};
    if (input[_N] != null) {
      entries[_N] = input[_N];
    }
    if (input[_P] != null) {
      entries[_P] = input[_P];
    }
    if (input[_PA] != null) {
      const memberEntries = se_policyDescriptorListType(input[_PA], context);
      if (input[_PA]?.length === 0) {
        entries.PolicyArns = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `PolicyArns.${key}`;
        entries[loc] = value;
      });
    }
    if (input[_DS] != null) {
      entries[_DS] = input[_DS];
    }
    if (input[_T] != null) {
      const memberEntries = se_tagListType(input[_T], context);
      if (input[_T]?.length === 0) {
        entries.Tags = [];
      }
      Object.entries(memberEntries).forEach(([key, value]) => {
        const loc = `Tags.${key}`;
        entries[loc] = value;
      });
    }
    return entries;
  };
  var se_GetSessionTokenRequest = (input, context) => {
    const entries = {};
    if (input[_DS] != null) {
      entries[_DS] = input[_DS];
    }
    if (input[_SN] != null) {
      entries[_SN] = input[_SN];
    }
    if (input[_TC] != null) {
      entries[_TC] = input[_TC];
    }
    return entries;
  };
  var se_policyDescriptorListType = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      const memberEntries = se_PolicyDescriptorType(entry, context);
      Object.entries(memberEntries).forEach(([key, value]) => {
        entries[`member.${counter}.${key}`] = value;
      });
      counter++;
    }
    return entries;
  };
  var se_PolicyDescriptorType = (input, context) => {
    const entries = {};
    if (input[_a] != null) {
      entries[_a] = input[_a];
    }
    return entries;
  };
  var se_ProvidedContext = (input, context) => {
    const entries = {};
    if (input[_PAro] != null) {
      entries[_PAro] = input[_PAro];
    }
    if (input[_CA] != null) {
      entries[_CA] = input[_CA];
    }
    return entries;
  };
  var se_ProvidedContextsListType = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      const memberEntries = se_ProvidedContext(entry, context);
      Object.entries(memberEntries).forEach(([key, value]) => {
        entries[`member.${counter}.${key}`] = value;
      });
      counter++;
    }
    return entries;
  };
  var se_Tag = (input, context) => {
    const entries = {};
    if (input[_K] != null) {
      entries[_K] = input[_K];
    }
    if (input[_Va] != null) {
      entries[_Va] = input[_Va];
    }
    return entries;
  };
  var se_tagKeyListType = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      entries[`member.${counter}`] = entry;
      counter++;
    }
    return entries;
  };
  var se_tagListType = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
      if (entry === null) {
        continue;
      }
      const memberEntries = se_Tag(entry, context);
      Object.entries(memberEntries).forEach(([key, value]) => {
        entries[`member.${counter}.${key}`] = value;
      });
      counter++;
    }
    return entries;
  };
  var de_AssumedRoleUser = (output, context) => {
    const contents = {};
    if (output[_ARI] != null) {
      contents[_ARI] = (0, smithy_client_1.expectString)(output[_ARI]);
    }
    if (output[_Ar] != null) {
      contents[_Ar] = (0, smithy_client_1.expectString)(output[_Ar]);
    }
    return contents;
  };
  var de_AssumeRoleResponse = (output, context) => {
    const contents = {};
    if (output[_C] != null) {
      contents[_C] = de_Credentials(output[_C], context);
    }
    if (output[_ARU] != null) {
      contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
    }
    if (output[_PPS] != null) {
      contents[_PPS] = (0, smithy_client_1.strictParseInt32)(output[_PPS]);
    }
    if (output[_SI] != null) {
      contents[_SI] = (0, smithy_client_1.expectString)(output[_SI]);
    }
    return contents;
  };
  var de_AssumeRoleWithSAMLResponse = (output, context) => {
    const contents = {};
    if (output[_C] != null) {
      contents[_C] = de_Credentials(output[_C], context);
    }
    if (output[_ARU] != null) {
      contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
    }
    if (output[_PPS] != null) {
      contents[_PPS] = (0, smithy_client_1.strictParseInt32)(output[_PPS]);
    }
    if (output[_S] != null) {
      contents[_S] = (0, smithy_client_1.expectString)(output[_S]);
    }
    if (output[_ST] != null) {
      contents[_ST] = (0, smithy_client_1.expectString)(output[_ST]);
    }
    if (output[_I] != null) {
      contents[_I] = (0, smithy_client_1.expectString)(output[_I]);
    }
    if (output[_Au] != null) {
      contents[_Au] = (0, smithy_client_1.expectString)(output[_Au]);
    }
    if (output[_NQ] != null) {
      contents[_NQ] = (0, smithy_client_1.expectString)(output[_NQ]);
    }
    if (output[_SI] != null) {
      contents[_SI] = (0, smithy_client_1.expectString)(output[_SI]);
    }
    return contents;
  };
  var de_AssumeRoleWithWebIdentityResponse = (output, context) => {
    const contents = {};
    if (output[_C] != null) {
      contents[_C] = de_Credentials(output[_C], context);
    }
    if (output[_SFWIT] != null) {
      contents[_SFWIT] = (0, smithy_client_1.expectString)(output[_SFWIT]);
    }
    if (output[_ARU] != null) {
      contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
    }
    if (output[_PPS] != null) {
      contents[_PPS] = (0, smithy_client_1.strictParseInt32)(output[_PPS]);
    }
    if (output[_Pr] != null) {
      contents[_Pr] = (0, smithy_client_1.expectString)(output[_Pr]);
    }
    if (output[_Au] != null) {
      contents[_Au] = (0, smithy_client_1.expectString)(output[_Au]);
    }
    if (output[_SI] != null) {
      contents[_SI] = (0, smithy_client_1.expectString)(output[_SI]);
    }
    return contents;
  };
  var de_Credentials = (output, context) => {
    const contents = {};
    if (output[_AKI] != null) {
      contents[_AKI] = (0, smithy_client_1.expectString)(output[_AKI]);
    }
    if (output[_SAK] != null) {
      contents[_SAK] = (0, smithy_client_1.expectString)(output[_SAK]);
    }
    if (output[_STe] != null) {
      contents[_STe] = (0, smithy_client_1.expectString)(output[_STe]);
    }
    if (output[_E] != null) {
      contents[_E] = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output[_E]));
    }
    return contents;
  };
  var de_DecodeAuthorizationMessageResponse = (output, context) => {
    const contents = {};
    if (output[_DM] != null) {
      contents[_DM] = (0, smithy_client_1.expectString)(output[_DM]);
    }
    return contents;
  };
  var de_ExpiredTokenException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, smithy_client_1.expectString)(output[_m]);
    }
    return contents;
  };
  var de_FederatedUser = (output, context) => {
    const contents = {};
    if (output[_FUI] != null) {
      contents[_FUI] = (0, smithy_client_1.expectString)(output[_FUI]);
    }
    if (output[_Ar] != null) {
      contents[_Ar] = (0, smithy_client_1.expectString)(output[_Ar]);
    }
    return contents;
  };
  var de_GetAccessKeyInfoResponse = (output, context) => {
    const contents = {};
    if (output[_Ac] != null) {
      contents[_Ac] = (0, smithy_client_1.expectString)(output[_Ac]);
    }
    return contents;
  };
  var de_GetCallerIdentityResponse = (output, context) => {
    const contents = {};
    if (output[_UI] != null) {
      contents[_UI] = (0, smithy_client_1.expectString)(output[_UI]);
    }
    if (output[_Ac] != null) {
      contents[_Ac] = (0, smithy_client_1.expectString)(output[_Ac]);
    }
    if (output[_Ar] != null) {
      contents[_Ar] = (0, smithy_client_1.expectString)(output[_Ar]);
    }
    return contents;
  };
  var de_GetFederationTokenResponse = (output, context) => {
    const contents = {};
    if (output[_C] != null) {
      contents[_C] = de_Credentials(output[_C], context);
    }
    if (output[_FU] != null) {
      contents[_FU] = de_FederatedUser(output[_FU], context);
    }
    if (output[_PPS] != null) {
      contents[_PPS] = (0, smithy_client_1.strictParseInt32)(output[_PPS]);
    }
    return contents;
  };
  var de_GetSessionTokenResponse = (output, context) => {
    const contents = {};
    if (output[_C] != null) {
      contents[_C] = de_Credentials(output[_C], context);
    }
    return contents;
  };
  var de_IDPCommunicationErrorException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, smithy_client_1.expectString)(output[_m]);
    }
    return contents;
  };
  var de_IDPRejectedClaimException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, smithy_client_1.expectString)(output[_m]);
    }
    return contents;
  };
  var de_InvalidAuthorizationMessageException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, smithy_client_1.expectString)(output[_m]);
    }
    return contents;
  };
  var de_InvalidIdentityTokenException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, smithy_client_1.expectString)(output[_m]);
    }
    return contents;
  };
  var de_MalformedPolicyDocumentException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, smithy_client_1.expectString)(output[_m]);
    }
    return contents;
  };
  var de_PackedPolicyTooLargeException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, smithy_client_1.expectString)(output[_m]);
    }
    return contents;
  };
  var de_RegionDisabledException = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
      contents[_m] = (0, smithy_client_1.expectString)(output[_m]);
    }
    return contents;
  };
  var deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  });
  var collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
  var throwDefaultError = (0, smithy_client_1.withBaseException)(STSServiceException_1.STSServiceException);
  var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
      protocol,
      hostname,
      port,
      method: "POST",
      path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
      headers
    };
    if (resolvedHostname !== undefined) {
      contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
      contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
  };
  var SHARED_HEADERS = {
    "content-type": "application/x-www-form-urlencoded"
  };
  var _ = "2011-06-15";
  var _A = "Action";
  var _AKI = "AccessKeyId";
  var _AR = "AssumeRole";
  var _ARI = "AssumedRoleId";
  var _ARU = "AssumedRoleUser";
  var _ARWSAML = "AssumeRoleWithSAML";
  var _ARWWI = "AssumeRoleWithWebIdentity";
  var _Ac = "Account";
  var _Ar = "Arn";
  var _Au = "Audience";
  var _C = "Credentials";
  var _CA = "ContextAssertion";
  var _DAM = "DecodeAuthorizationMessage";
  var _DM = "DecodedMessage";
  var _DS = "DurationSeconds";
  var _E = "Expiration";
  var _EI = "ExternalId";
  var _EM = "EncodedMessage";
  var _FU = "FederatedUser";
  var _FUI = "FederatedUserId";
  var _GAKI = "GetAccessKeyInfo";
  var _GCI = "GetCallerIdentity";
  var _GFT = "GetFederationToken";
  var _GST = "GetSessionToken";
  var _I = "Issuer";
  var _K = "Key";
  var _N = "Name";
  var _NQ = "NameQualifier";
  var _P = "Policy";
  var _PA = "PolicyArns";
  var _PAr = "PrincipalArn";
  var _PAro = "ProviderArn";
  var _PC = "ProvidedContexts";
  var _PI = "ProviderId";
  var _PPS = "PackedPolicySize";
  var _Pr = "Provider";
  var _RA = "RoleArn";
  var _RSN = "RoleSessionName";
  var _S = "Subject";
  var _SAK = "SecretAccessKey";
  var _SAMLA = "SAMLAssertion";
  var _SFWIT = "SubjectFromWebIdentityToken";
  var _SI = "SourceIdentity";
  var _SN = "SerialNumber";
  var _ST = "SubjectType";
  var _STe = "SessionToken";
  var _T = "Tags";
  var _TC = "TokenCode";
  var _TTK = "TransitiveTagKeys";
  var _UI = "UserId";
  var _V = "Version";
  var _Va = "Value";
  var _WIT = "WebIdentityToken";
  var _a = "arn";
  var _m = "message";
  var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
      const parser = new fast_xml_parser_1.XMLParser({
        attributeNamePrefix: "",
        htmlEntities: true,
        ignoreAttributes: false,
        ignoreDeclaration: true,
        parseTagValue: false,
        trimValues: false,
        tagValueProcessor: (_2, val2) => val2.trim() === "" && val2.includes("\n") ? "" : undefined
      });
      parser.addEntity("#xD", "\r");
      parser.addEntity("#10", "\n");
      const parsedObj = parser.parse(encoded);
      const textNodeName = "#text";
      const key = Object.keys(parsedObj)[0];
      const parsedObjToReturn = parsedObj[key];
      if (parsedObjToReturn[textNodeName]) {
        parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
        delete parsedObjToReturn[textNodeName];
      }
      return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
    }
    return {};
  });
  var parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    if (value.Error) {
      value.Error.message = value.Error.message ?? value.Error.Message;
    }
    return value;
  };
  var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value)).join("&");
  var loadQueryErrorCode = (output, data) => {
    if (data.Error?.Code !== undefined) {
      return data.Error.Code;
    }
    if (output.statusCode == 404) {
      return "NotFound";
    }
  };
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.jsn
var require_AssumeRoleCommand = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.AssumeRoleCommand = exports.$Command = undefined;
  var middleware_endpoint_1 = require_dist_cjs41();
  var middleware_serde_1 = require_dist_cjs40();
  var smithy_client_1 = require_dist_cjs16();
  Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
    return smithy_client_1.Command;
  } });
  var EndpointParameters_1 = require_EndpointParameters();
  var models_0_1 = require_models_0();
  var Aws_query_1 = require_Aws_query();

  class AssumeRoleCommand2 extends smithy_client_1.Command.classBuilder().ep({
    ...EndpointParameters_1.commonParams
  }).m(function(Command, cs, config, o) {
    return [
      (0, middleware_serde_1.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, middleware_endpoint_1.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSecurityTokenServiceV20110615", "AssumeRole", {}).n("STSClient", "AssumeRoleCommand").f(undefined, models_0_1.AssumeRoleResponseFilterSensitiveLog).ser(Aws_query_1.se_AssumeRoleCommand).de(Aws_query_1.de_AssumeRoleCommand).build() {
  }
  exports.AssumeRoleCommand = AssumeRoleCommand2;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.jsnode.jsjssand.js
var require_AssumeRoleWithWebIdentityCommand = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.AssumeRoleWithWebIdentityCommand = exports.$Command = undefined;
  var middleware_endpoint_1 = require_dist_cjs41();
  var middleware_serde_1 = require_dist_cjs40();
  var smithy_client_1 = require_dist_cjs16();
  Object.defineProperty(exports, "$Command", { enumerable: true, get: function() {
    return smithy_client_1.Command;
  } });
  var EndpointParameters_1 = require_EndpointParameters();
  var models_0_1 = require_models_0();
  var Aws_query_1 = require_Aws_query();

  class AssumeRoleWithWebIdentityCommand2 extends smithy_client_1.Command.classBuilder().ep({
    ...EndpointParameters_1.commonParams
  }).m(function(Command, cs, config, o) {
    return [
      (0, middleware_serde_1.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, middleware_endpoint_1.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSecurityTokenServiceV20110615", "AssumeRoleWithWebIdentity", {}).n("STSClient", "AssumeRoleWithWebIdentityCommand").f(models_0_1.AssumeRoleWithWebIdentityRequestFilterSensitiveLog, models_0_1.AssumeRoleWithWebIdentityResponseFilterSensitiveLog).ser(Aws_query_1.se_AssumeRoleWithWebIdentityCommand).de(Aws_query_1.de_AssumeRoleWithWebIdentityCommand).build() {
  }
  exports.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand2;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver
var require_defaultStsRoleAssumers = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = undefined;
  var AssumeRoleCommand_1 = require_AssumeRoleCommand();
  var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
  var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
  var decorateDefaultRegion = (region) => {
    if (typeof region !== "function") {
      return region === undefined ? ASSUME_ROLE_DEFAULT_REGION : region;
    }
    return async () => {
      try {
        return await region();
      } catch (e) {
        return ASSUME_ROLE_DEFAULT_REGION;
      }
    };
  };
  var getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {
    let stsClient;
    let closureSourceCreds;
    return async (sourceCreds, params) => {
      closureSourceCreds = sourceCreds;
      if (!stsClient) {
        const { logger: logger4, region, requestHandler } = stsOptions;
        stsClient = new stsClientCtor({
          logger: logger4,
          credentialDefaultProvider: () => async () => closureSourceCreds,
          region: decorateDefaultRegion(region || stsOptions.region),
          ...requestHandler ? { requestHandler } : {}
        });
      }
      const { Credentials } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));
      if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
        throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
      }
      return {
        accessKeyId: Credentials.AccessKeyId,
        secretAccessKey: Credentials.SecretAccessKey,
        sessionToken: Credentials.SessionToken,
        expiration: Credentials.Expiration,
        credentialScope: Credentials.CredentialScope
      };
    };
  };
  exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
  var getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {
    let stsClient;
    return async (params) => {
      if (!stsClient) {
        const { logger: logger4, region, requestHandler } = stsOptions;
        stsClient = new stsClientCtor({
          logger: logger4,
          region: decorateDefaultRegion(region || stsOptions.region),
          ...requestHandler ? { requestHandler } : {}
        });
      }
      const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params));
      if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
        throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
      }
      return {
        accessKeyId: Credentials.AccessKeyId,
        secretAccessKey: Credentials.SecretAccessKey,
        sessionToken: Credentials.SessionToken,
        expiration: Credentials.Expiration,
        credentialScope: Credentials.CredentialScope
      };
    };
  };
  exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
  var decorateDefaultCredentialProvider = (provider) => (input) => provider({
    roleAssumer: (0, exports.getDefaultRoleAssumer)(input, input.stsClientCtor),
    roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input, input.stsClientCtor),
    ...input
  });
  exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jsso
var require_dist_cjs45 = __commonJS((exports, module) => {
  var httpRequest = function(options) {
    return new Promise((resolve, reject) => {
      var _a;
      const req = (0, import_http.request)({
        method: "GET",
        ...options,
        hostname: (_a = options.hostname) == null ? undefined : _a.replace(/^\[(.+)\]$/, "$1")
      });
      req.on("error", (err) => {
        reject(Object.assign(new import_property_provider.ProviderError("Unable to connect to instance metadata service"), err));
        req.destroy();
      });
      req.on("timeout", () => {
        reject(new import_property_provider.ProviderError("TimeoutError from instance metadata service"));
        req.destroy();
      });
      req.on("response", (res) => {
        const { statusCode = 400 } = res;
        if (statusCode < 200 || 300 <= statusCode) {
          reject(Object.assign(new import_property_provider.ProviderError("Error response received from instance metadata service"), { statusCode }));
          req.destroy();
        }
        const chunks = [];
        res.on("data", (chunk) => {
          chunks.push(chunk);
        });
        res.on("end", () => {
          resolve(import_buffer.Buffer.concat(chunks));
          req.destroy();
        });
      });
      req.end();
    });
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    DEFAULT_MAX_RETRIES: () => DEFAULT_MAX_RETRIES,
    DEFAULT_TIMEOUT: () => DEFAULT_TIMEOUT,
    ENV_CMDS_AUTH_TOKEN: () => ENV_CMDS_AUTH_TOKEN,
    ENV_CMDS_FULL_URI: () => ENV_CMDS_FULL_URI,
    ENV_CMDS_RELATIVE_URI: () => ENV_CMDS_RELATIVE_URI,
    fromContainerMetadata: () => fromContainerMetadata,
    fromInstanceMetadata: () => fromInstanceMetadata,
    getInstanceMetadataEndpoint: () => getInstanceMetadataEndpoint,
    httpRequest: () => httpRequest,
    providerConfigFromInit: () => providerConfigFromInit
  });
  module.exports = __toCommonJS(src_exports);
  var import_url = __require("url");
  var import_property_provider = require_dist_cjs25();
  var import_buffer = __require("buffer");
  var import_http = __require("http");
  __name(httpRequest, "httpRequest");
  var isImdsCredentials = __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string", "isImdsCredentials");
  var fromImdsCredentials = __name((creds) => ({
    accessKeyId: creds.AccessKeyId,
    secretAccessKey: creds.SecretAccessKey,
    sessionToken: creds.Token,
    expiration: new Date(creds.Expiration)
  }), "fromImdsCredentials");
  var DEFAULT_TIMEOUT = 1000;
  var DEFAULT_MAX_RETRIES = 0;
  var providerConfigFromInit = __name(({
    maxRetries = DEFAULT_MAX_RETRIES,
    timeout = DEFAULT_TIMEOUT
  }) => ({ maxRetries, timeout }), "providerConfigFromInit");
  var retry = __name((toRetry, maxRetries) => {
    let promise = toRetry();
    for (let i = 0;i < maxRetries; i++) {
      promise = promise.catch(toRetry);
    }
    return promise;
  }, "retry");
  var ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
  var ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
  var ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
  var fromContainerMetadata = __name((init = {}) => {
    const { timeout, maxRetries } = providerConfigFromInit(init);
    return () => retry(async () => {
      const requestOptions = await getCmdsUri();
      const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
      if (!isImdsCredentials(credsResponse)) {
        throw new import_property_provider.CredentialsProviderError("Invalid response received from instance metadata service.");
      }
      return fromImdsCredentials(credsResponse);
    }, maxRetries);
  }, "fromContainerMetadata");
  var requestFromEcsImds = __name(async (timeout, options) => {
    if (process.env[ENV_CMDS_AUTH_TOKEN]) {
      options.headers = {
        ...options.headers,
        Authorization: process.env[ENV_CMDS_AUTH_TOKEN]
      };
    }
    const buffer = await httpRequest({
      ...options,
      timeout
    });
    return buffer.toString();
  }, "requestFromEcsImds");
  var CMDS_IP = "169.254.170.2";
  var GREENGRASS_HOSTS = {
    localhost: true,
    "127.0.0.1": true
  };
  var GREENGRASS_PROTOCOLS = {
    "http:": true,
    "https:": true
  };
  var getCmdsUri = __name(async () => {
    if (process.env[ENV_CMDS_RELATIVE_URI]) {
      return {
        hostname: CMDS_IP,
        path: process.env[ENV_CMDS_RELATIVE_URI]
      };
    }
    if (process.env[ENV_CMDS_FULL_URI]) {
      const parsed = (0, import_url.parse)(process.env[ENV_CMDS_FULL_URI]);
      if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
        throw new import_property_provider.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);
      }
      if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
        throw new import_property_provider.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);
      }
      return {
        ...parsed,
        port: parsed.port ? parseInt(parsed.port, 10) : undefined
      };
    }
    throw new import_property_provider.CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment variable is set`, false);
  }, "getCmdsUri");
  var _InstanceMetadataV1FallbackError = class _InstanceMetadataV1FallbackError2 extends import_property_provider.CredentialsProviderError {
    constructor(message, tryNextLink = true) {
      super(message, tryNextLink);
      this.tryNextLink = tryNextLink;
      this.name = "InstanceMetadataV1FallbackError";
      Object.setPrototypeOf(this, _InstanceMetadataV1FallbackError2.prototype);
    }
  };
  __name(_InstanceMetadataV1FallbackError, "InstanceMetadataV1FallbackError");
  var InstanceMetadataV1FallbackError = _InstanceMetadataV1FallbackError;
  var import_node_config_provider = require_dist_cjs37();
  var import_url_parser = require_dist_cjs39();
  var ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
  var CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
  var ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[ENV_ENDPOINT_NAME],
    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],
    default: undefined
  };
  var EndpointMode = ((EndpointMode2) => {
    EndpointMode2["IPv4"] = "IPv4";
    EndpointMode2["IPv6"] = "IPv6";
    return EndpointMode2;
  })(EndpointMode || {});
  var ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
  var CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
  var ENDPOINT_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[ENV_ENDPOINT_MODE_NAME],
    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],
    default: "IPv4"
  };
  var getInstanceMetadataEndpoint = __name(async () => (0, import_url_parser.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig()), "getInstanceMetadataEndpoint");
  var getFromEndpointConfig = __name(async () => (0, import_node_config_provider.loadConfig)(ENDPOINT_CONFIG_OPTIONS)(), "getFromEndpointConfig");
  var getFromEndpointModeConfig = __name(async () => {
    const endpointMode = await (0, import_node_config_provider.loadConfig)(ENDPOINT_MODE_CONFIG_OPTIONS)();
    switch (endpointMode) {
      case "IPv4":
        return "http://169.254.169.254";
      case "IPv6":
        return "http://[fd00:ec2::254]";
      default:
        throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode)}`);
    }
  }, "getFromEndpointModeConfig");
  var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
  var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
  var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
  var getExtendedInstanceMetadataCredentials = __name((credentials, logger4) => {
    const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
    const newExpiration = new Date(Date.now() + refreshInterval * 1000);
    logger4.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: " + STATIC_STABILITY_DOC_URL);
    const originalExpiration = credentials.originalExpiration ?? credentials.expiration;
    return {
      ...credentials,
      ...originalExpiration ? { originalExpiration } : {},
      expiration: newExpiration
    };
  }, "getExtendedInstanceMetadataCredentials");
  var staticStabilityProvider = __name((provider, options = {}) => {
    const logger4 = (options == null ? undefined : options.logger) || console;
    let pastCredentials;
    return async () => {
      let credentials;
      try {
        credentials = await provider();
        if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
          credentials = getExtendedInstanceMetadataCredentials(credentials, logger4);
        }
      } catch (e) {
        if (pastCredentials) {
          logger4.warn("Credential renew failed: ", e);
          credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger4);
        } else {
          throw e;
        }
      }
      pastCredentials = credentials;
      return credentials;
    };
  }, "staticStabilityProvider");
  var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
  var IMDS_TOKEN_PATH = "/latest/api/token";
  var AWS_EC2_METADATA_V1_DISABLED = "AWS_EC2_METADATA_V1_DISABLED";
  var PROFILE_AWS_EC2_METADATA_V1_DISABLED = "ec2_metadata_v1_disabled";
  var X_AWS_EC2_METADATA_TOKEN = "x-aws-ec2-metadata-token";
  var fromInstanceMetadata = __name((init = {}) => staticStabilityProvider(getInstanceImdsProvider(init), { logger: init.logger }), "fromInstanceMetadata");
  var getInstanceImdsProvider = __name((init) => {
    let disableFetchToken = false;
    const { logger: logger4, profile } = init;
    const { timeout, maxRetries } = providerConfigFromInit(init);
    const getCredentials = __name(async (maxRetries2, options) => {
      var _a;
      const isImdsV1Fallback = disableFetchToken || ((_a = options.headers) == null ? undefined : _a[X_AWS_EC2_METADATA_TOKEN]) == null;
      if (isImdsV1Fallback) {
        let fallbackBlockedFromProfile = false;
        let fallbackBlockedFromProcessEnv = false;
        const configValue = await (0, import_node_config_provider.loadConfig)({
          environmentVariableSelector: (env) => {
            const envValue = env[AWS_EC2_METADATA_V1_DISABLED];
            fallbackBlockedFromProcessEnv = !!envValue && envValue !== "false";
            if (envValue === undefined) {
              throw new import_property_provider.CredentialsProviderError(`${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`);
            }
            return fallbackBlockedFromProcessEnv;
          },
          configFileSelector: (profile2) => {
            const profileValue = profile2[PROFILE_AWS_EC2_METADATA_V1_DISABLED];
            fallbackBlockedFromProfile = !!profileValue && profileValue !== "false";
            return fallbackBlockedFromProfile;
          },
          default: false
        }, {
          profile
        })();
        if (init.ec2MetadataV1Disabled || configValue) {
          const causes = [];
          if (init.ec2MetadataV1Disabled)
            causes.push("credential provider initialization (runtime option ec2MetadataV1Disabled)");
          if (fallbackBlockedFromProfile)
            causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);
          if (fallbackBlockedFromProcessEnv)
            causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);
          throw new InstanceMetadataV1FallbackError(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(", ")}].`);
        }
      }
      const imdsProfile = (await retry(async () => {
        let profile2;
        try {
          profile2 = await getProfile(options);
        } catch (err) {
          if (err.statusCode === 401) {
            disableFetchToken = false;
          }
          throw err;
        }
        return profile2;
      }, maxRetries2)).trim();
      return retry(async () => {
        let creds;
        try {
          creds = await getCredentialsFromProfile(imdsProfile, options);
        } catch (err) {
          if (err.statusCode === 401) {
            disableFetchToken = false;
          }
          throw err;
        }
        return creds;
      }, maxRetries2);
    }, "getCredentials");
    return async () => {
      const endpoint = await getInstanceMetadataEndpoint();
      if (disableFetchToken) {
        logger4 == null || logger4.debug("AWS SDK Instance Metadata", "using v1 fallback (no token fetch)");
        return getCredentials(maxRetries, { ...endpoint, timeout });
      } else {
        let token;
        try {
          token = (await getMetadataToken({ ...endpoint, timeout })).toString();
        } catch (error) {
          if ((error == null ? undefined : error.statusCode) === 400) {
            throw Object.assign(error, {
              message: "EC2 Metadata token request returned error"
            });
          } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
            disableFetchToken = true;
          }
          logger4 == null || logger4.debug("AWS SDK Instance Metadata", "using v1 fallback (initial)");
          return getCredentials(maxRetries, { ...endpoint, timeout });
        }
        return getCredentials(maxRetries, {
          ...endpoint,
          headers: {
            [X_AWS_EC2_METADATA_TOKEN]: token
          },
          timeout
        });
      }
    };
  }, "getInstanceImdsProvider");
  var getMetadataToken = __name(async (options) => httpRequest({
    ...options,
    path: IMDS_TOKEN_PATH,
    method: "PUT",
    headers: {
      "x-aws-ec2-metadata-token-ttl-seconds": "21600"
    }
  }), "getMetadataToken");
  var getProfile = __name(async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString(), "getProfile");
  var getCredentialsFromProfile = __name(async (profile, options) => {
    const credsResponse = JSON.parse((await httpRequest({
      ...options,
      path: IMDS_PATH + profile
    })).toString());
    if (!isImdsCredentials(credsResponse)) {
      throw new import_property_provider.CredentialsProviderError("Invalid response received from instance metadata service.");
    }
    return fromImdsCredentials(credsResponse);
  }, "getCredentialsFromProfile");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jsso
var require_dist_cjs46 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    ENV_CREDENTIAL_SCOPE: () => ENV_CREDENTIAL_SCOPE,
    ENV_EXPIRATION: () => ENV_EXPIRATION,
    ENV_KEY: () => ENV_KEY,
    ENV_SECRET: () => ENV_SECRET,
    ENV_SESSION: () => ENV_SESSION,
    fromEnv: () => fromEnv
  });
  module.exports = __toCommonJS(src_exports);
  var import_property_provider = require_dist_cjs25();
  var ENV_KEY = "AWS_ACCESS_KEY_ID";
  var ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
  var ENV_SESSION = "AWS_SESSION_TOKEN";
  var ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
  var ENV_CREDENTIAL_SCOPE = "AWS_CREDENTIAL_SCOPE";
  var fromEnv = __name(() => async () => {
    const accessKeyId = process.env[ENV_KEY];
    const secretAccessKey = process.env[ENV_SECRET];
    const sessionToken = process.env[ENV_SESSION];
    const expiry = process.env[ENV_EXPIRATION];
    const credentialScope = process.env[ENV_CREDENTIAL_SCOPE];
    if (accessKeyId && secretAccessKey) {
      return {
        accessKeyId,
        secretAccessKey,
        ...sessionToken && { sessionToken },
        ...expiry && { expiration: new Date(expiry) },
        ...credentialScope && { credentialScope }
      };
    }
    throw new import_property_provider.CredentialsProviderError("Unable to find environment variable credentials.");
  }, "fromEnv");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/end
var require_package4 = __commonJS((exports, module) => {
  module.exports = {
    name: "@aws-sdk/client-sso",
    description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
    version: "3.496.0",
    scripts: {
      build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
      "build:cjs": "node ../../scripts/compilation/inline client-sso",
      "build:es": "tsc -p tsconfig.es.json",
      "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
      "build:types": "tsc -p tsconfig.types.json",
      "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
      clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
      "extract:docs": "api-extractor run --local",
      "generate:client": "node ../../scripts/generate-clients/single-service --solo sso"
    },
    main: "./dist-cjs/index.js",
    types: "./dist-types/index.d.ts",
    module: "./dist-es/index.js",
    sideEffects: false,
    dependencies: {
      "@aws-crypto/sha256-browser": "3.0.0",
      "@aws-crypto/sha256-js": "3.0.0",
      "@aws-sdk/core": "3.496.0",
      "@aws-sdk/middleware-host-header": "3.496.0",
      "@aws-sdk/middleware-logger": "3.496.0",
      "@aws-sdk/middleware-recursion-detection": "3.496.0",
      "@aws-sdk/middleware-user-agent": "3.496.0",
      "@aws-sdk/region-config-resolver": "3.496.0",
      "@aws-sdk/types": "3.496.0",
      "@aws-sdk/util-endpoints": "3.496.0",
      "@aws-sdk/util-user-agent-browser": "3.496.0",
      "@aws-sdk/util-user-agent-node": "3.496.0",
      "@smithy/config-resolver": "^2.1.1",
      "@smithy/core": "^1.3.1",
      "@smithy/fetch-http-handler": "^2.4.1",
      "@smithy/hash-node": "^2.1.1",
      "@smithy/invalid-dependency": "^2.1.1",
      "@smithy/middleware-content-length": "^2.1.1",
      "@smithy/middleware-endpoint": "^2.4.1",
      "@smithy/middleware-retry": "^2.1.1",
      "@smithy/middleware-serde": "^2.1.1",
      "@smithy/middleware-stack": "^2.1.1",
      "@smithy/node-config-provider": "^2.2.1",
      "@smithy/node-http-handler": "^2.3.1",
      "@smithy/protocol-http": "^3.1.1",
      "@smithy/smithy-client": "^2.3.1",
      "@smithy/types": "^2.9.1",
      "@smithy/url-parser": "^2.1.1",
      "@smithy/util-base64": "^2.1.1",
      "@smithy/util-body-length-browser": "^2.1.1",
      "@smithy/util-body-length-node": "^2.2.1",
      "@smithy/util-defaults-mode-browser": "^2.1.1",
      "@smithy/util-defaults-mode-node": "^2.1.1",
      "@smithy/util-endpoints": "^1.1.1",
      "@smithy/util-retry": "^2.1.1",
      "@smithy/util-utf8": "^2.1.1",
      tslib: "^2.5.0"
    },
    devDependencies: {
      "@smithy/service-client-documentation-generator": "^2.1.1",
      "@tsconfig/node14": "1.0.3",
      "@types/node": "^14.14.31",
      concurrently: "7.0.0",
      "downlevel-dts": "0.10.1",
      rimraf: "3.0.2",
      typescript: "~4.9.5"
    },
    engines: {
      node: ">=14.0.0"
    },
    typesVersions: {
      "<4.0": {
        "dist-types/*": [
          "dist-types/ts3.4/*"
        ]
      }
    },
    files: [
      "dist-*/**"
    ],
    author: {
      name: "AWS SDK for JavaScript Team",
      url: "https://aws.amazon.com/javascript/"
    },
    license: "Apache-2.0",
    browser: {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
    },
    "react-native": {
      "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
    },
    homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
    repository: {
      type: "git",
      url: "https://github.com/aws/aws-sdk-js-v3.git",
      directory: "clients/client-sso"
    }
  };
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.j
var require_dist_cjs47 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    UA_APP_ID_ENV_NAME: () => UA_APP_ID_ENV_NAME,
    UA_APP_ID_INI_NAME: () => UA_APP_ID_INI_NAME,
    crtAvailability: () => crtAvailability,
    defaultUserAgent: () => defaultUserAgent
  });
  module.exports = __toCommonJS(src_exports);
  var import_node_config_provider = require_dist_cjs37();
  var import_os = __require("os");
  var import_process = __require("process");
  var crtAvailability = {
    isCrtAvailable: false
  };
  var isCrtAvailable = __name(() => {
    if (crtAvailability.isCrtAvailable) {
      return ["md/crt-avail"];
    }
    return null;
  }, "isCrtAvailable");
  var UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
  var UA_APP_ID_INI_NAME = "sdk-ua-app-id";
  var defaultUserAgent = __name(({ serviceId, clientVersion }) => {
    const sections = [
      ["aws-sdk-js", clientVersion],
      ["ua", "2.0"],
      [`os/${(0, import_os.platform)()}`, (0, import_os.release)()],
      ["lang/js"],
      ["md/nodejs", `${import_process.versions.node}`]
    ];
    const crtAvailable = isCrtAvailable();
    if (crtAvailable) {
      sections.push(crtAvailable);
    }
    if (serviceId) {
      sections.push([`api/${serviceId}`, clientVersion]);
    }
    if (import_process.env.AWS_EXECUTION_ENV) {
      sections.push([`exec-env/${import_process.env.AWS_EXECUTION_ENV}`]);
    }
    const appIdPromise = (0, import_node_config_provider.loadConfig)({
      environmentVariableSelector: (env2) => env2[UA_APP_ID_ENV_NAME],
      configFileSelector: (profile) => profile[UA_APP_ID_INI_NAME],
      default: undefined
    })();
    let resolvedUserAgent = undefined;
    return async () => {
      if (!resolvedUserAgent) {
        const appId = await appIdPromise;
        resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
      }
      return resolvedUserAgent;
    };
  }, "defaultUserAgent");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoi
var require_dist_cjs48 = __commonJS((exports, module) => {
  var castSourceData = function(toCast, encoding) {
    if (import_buffer.Buffer.isBuffer(toCast)) {
      return toCast;
    }
    if (typeof toCast === "string") {
      return (0, import_util_buffer_from.fromString)(toCast, encoding);
    }
    if (ArrayBuffer.isView(toCast)) {
      return (0, import_util_buffer_from.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
    }
    return (0, import_util_buffer_from.fromArrayBuffer)(toCast);
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    Hash: () => Hash
  });
  module.exports = __toCommonJS(src_exports);
  var import_util_buffer_from = require_dist_cjs9();
  var import_util_utf8 = require_dist_cjs11();
  var import_buffer = __require("buffer");
  var import_crypto = __require("crypto");
  var _Hash = class _Hash2 {
    constructor(algorithmIdentifier, secret) {
      this.algorithmIdentifier = algorithmIdentifier;
      this.secret = secret;
      this.reset();
    }
    update(toHash, encoding) {
      this.hash.update((0, import_util_utf8.toUint8Array)(castSourceData(toHash, encoding)));
    }
    digest() {
      return Promise.resolve(this.hash.digest());
    }
    reset() {
      this.hash = this.secret ? (0, import_crypto.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, import_crypto.createHash)(this.algorithmIdentifier);
    }
  };
  __name(_Hash, "Hash");
  var Hash = _Hash;
  __name(castSourceData, "castSourceData");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.j
var require_dist_cjs49 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    calculateBodyLength: () => calculateBodyLength
  });
  module.exports = __toCommonJS(src_exports);
  var import_fs = __require("fs");
  var calculateBodyLength = __name((body) => {
    if (!body) {
      return 0;
    }
    if (typeof body === "string") {
      return Buffer.from(body).length;
    } else if (typeof body.byteLength === "number") {
      return body.byteLength;
    } else if (typeof body.size === "number") {
      return body.size;
    } else if (typeof body.start === "number" && typeof body.end === "number") {
      return body.end + 1 - body.start;
    } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
      return (0, import_fs.lstatSync)(body.path).size;
    } else if (typeof body.fd === "number") {
      return (0, import_fs.fstatSync)(body.fd).size;
    }
    throw new Error(`Body Length computation failed for ${body}`);
  }, "calculateBodyLength");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_ruleset = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ruleSet = undefined;
  var u = "required";
  var v = "fn";
  var w = "argv";
  var x = "ref";
  var a = true;
  var b = "isSet";
  var c = "booleanEquals";
  var d = "error";
  var e = "endpoint";
  var f = "tree";
  var g = "PartitionResult";
  var h = "getAttr";
  var i = { [u]: false, type: "String" };
  var j = { [u]: true, default: false, type: "Boolean" };
  var k = { [x]: "Endpoint" };
  var l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
  var m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
  var n = {};
  var o = { [v]: h, [w]: [{ [x]: g }, "supportsFIPS"] };
  var p = { [x]: g };
  var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, "supportsDualStack"] }] };
  var r = [l];
  var s = [m];
  var t = [{ [x]: "Region" }];
  var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, o] }, q], rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [o, a] }], rules: [{ conditions: [{ [v]: "stringEquals", [w]: [{ [v]: h, [w]: [p, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://portal.sso.{Region}.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
  exports.ruleSet = _data;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.js
var require_endpointResolver = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.defaultEndpointResolver = undefined;
  var util_endpoints_1 = require_dist_cjs27();
  var ruleset_1 = require_ruleset();
  var defaultEndpointResolver = (endpointParams, context = {}) => {
    return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
      endpointParams,
      logger: context.logger
    });
  };
  exports.defaultEndpointResolver = defaultEndpointResolver;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolv
var require_runtimeConfig_shared = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var smithy_client_1 = require_dist_cjs16();
  var url_parser_1 = require_dist_cjs39();
  var util_base64_1 = require_dist_cjs10();
  var util_utf8_1 = require_dist_cjs11();
  var endpointResolver_1 = require_endpointResolver();
  var getRuntimeConfig = (config) => {
    return {
      apiVersion: "2019-06-10",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      extensions: config?.extensions ?? [],
      logger: config?.logger ?? new smithy_client_1.NoOpLogger,
      serviceId: config?.serviceId ?? "SSO",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jss
var require_dist_cjs50 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    resolveDefaultsModeConfig: () => resolveDefaultsModeConfig
  });
  module.exports = __toCommonJS(src_exports);
  var import_config_resolver = require_dist_cjs30();
  var import_credential_provider_imds = require_dist_cjs45();
  var import_node_config_provider = require_dist_cjs37();
  var import_property_provider = require_dist_cjs25();
  var AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
  var AWS_REGION_ENV = "AWS_REGION";
  var AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
  var ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
  var DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
  var IMDS_REGION_PATH = "/latest/meta-data/placement/region";
  var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
  var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
  var NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => {
      return env[AWS_DEFAULTS_MODE_ENV];
    },
    configFileSelector: (profile) => {
      return profile[AWS_DEFAULTS_MODE_CONFIG];
    },
    default: "legacy"
  };
  var resolveDefaultsModeConfig = __name(({
    region = (0, import_node_config_provider.loadConfig)(import_config_resolver.NODE_REGION_CONFIG_OPTIONS),
    defaultsMode = (0, import_node_config_provider.loadConfig)(NODE_DEFAULTS_MODE_CONFIG_OPTIONS)
  } = {}) => (0, import_property_provider.memoize)(async () => {
    const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
    switch (mode == null ? undefined : mode.toLowerCase()) {
      case "auto":
        return resolveNodeDefaultsModeAuto(region);
      case "in-region":
      case "cross-region":
      case "mobile":
      case "standard":
      case "legacy":
        return Promise.resolve(mode == null ? undefined : mode.toLocaleLowerCase());
      case undefined:
        return Promise.resolve("legacy");
      default:
        throw new Error(`Invalid parameter for "defaultsMode", expect ${DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
    }
  }), "resolveDefaultsModeConfig");
  var resolveNodeDefaultsModeAuto = __name(async (clientRegion) => {
    if (clientRegion) {
      const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
      const inferredRegion = await inferPhysicalRegion();
      if (!inferredRegion) {
        return "standard";
      }
      if (resolvedRegion === inferredRegion) {
        return "in-region";
      } else {
        return "cross-region";
      }
    }
    return "standard";
  }, "resolveNodeDefaultsModeAuto");
  var inferPhysicalRegion = __name(async () => {
    if (process.env[AWS_EXECUTION_ENV] && (process.env[AWS_REGION_ENV] || process.env[AWS_DEFAULT_REGION_ENV])) {
      return process.env[AWS_REGION_ENV] ?? process.env[AWS_DEFAULT_REGION_ENV];
    }
    if (!process.env[ENV_IMDS_DISABLED]) {
      try {
        const endpoint = await (0, import_credential_provider_imds.getInstanceMetadataEndpoint)();
        return (await (0, import_credential_provider_imds.httpRequest)({ ...endpoint, path: IMDS_REGION_PATH })).toString();
      } catch (e) {
      }
    }
  }, "inferPhysicalRegion");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset
var require_runtimeConfig = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var tslib_1 = require_tslib2();
  var package_json_1 = tslib_1.__importDefault(require_package4());
  var core_1 = require_dist_cjs44();
  var util_user_agent_node_1 = require_dist_cjs47();
  var config_resolver_1 = require_dist_cjs30();
  var hash_node_1 = require_dist_cjs48();
  var middleware_retry_1 = require_dist_cjs35();
  var node_config_provider_1 = require_dist_cjs37();
  var node_http_handler_1 = require_dist_cjs14();
  var util_body_length_node_1 = require_dist_cjs49();
  var util_retry_1 = require_dist_cjs34();
  var runtimeConfig_shared_1 = require_runtimeConfig_shared();
  var smithy_client_1 = require_dist_cjs16();
  var util_defaults_mode_node_1 = require_dist_cjs50();
  var smithy_client_2 = require_dist_cjs16();
  var getRuntimeConfig = (config) => {
    (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
    const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
    (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
    return {
      ...clientSharedValues,
      ...config,
      runtime: "node",
      defaultsMode,
      bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
      defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
      maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
      region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
      requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
      retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
        ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
        default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
      }),
      sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
      streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
      useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
      useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jss
var require_dist_cjs51 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    NODE_REGION_CONFIG_FILE_OPTIONS: () => NODE_REGION_CONFIG_FILE_OPTIONS,
    NODE_REGION_CONFIG_OPTIONS: () => NODE_REGION_CONFIG_OPTIONS,
    REGION_ENV_NAME: () => REGION_ENV_NAME,
    REGION_INI_NAME: () => REGION_INI_NAME,
    getAwsRegionExtensionConfiguration: () => getAwsRegionExtensionConfiguration,
    resolveAwsRegionExtensionConfiguration: () => resolveAwsRegionExtensionConfiguration,
    resolveRegionConfig: () => resolveRegionConfig
  });
  module.exports = __toCommonJS(src_exports);
  var getAwsRegionExtensionConfiguration = __name((runtimeConfig) => {
    let runtimeConfigRegion = __name(async () => {
      if (runtimeConfig.region === undefined) {
        throw new Error("Region is missing from runtimeConfig");
      }
      const region = runtimeConfig.region;
      if (typeof region === "string") {
        return region;
      }
      return region();
    }, "runtimeConfigRegion");
    return {
      setRegion(region) {
        runtimeConfigRegion = region;
      },
      region() {
        return runtimeConfigRegion;
      }
    };
  }, "getAwsRegionExtensionConfiguration");
  var resolveAwsRegionExtensionConfiguration = __name((awsRegionExtensionConfiguration) => {
    return {
      region: awsRegionExtensionConfiguration.region()
    };
  }, "resolveAwsRegionExtensionConfiguration");
  var REGION_ENV_NAME = "AWS_REGION";
  var REGION_INI_NAME = "region";
  var NODE_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[REGION_ENV_NAME],
    configFileSelector: (profile) => profile[REGION_INI_NAME],
    default: () => {
      throw new Error("Region is missing");
    }
  };
  var NODE_REGION_CONFIG_FILE_OPTIONS = {
    preferredFile: "credentials"
  };
  var isFipsRegion = __name((region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips")), "isFipsRegion");
  var getRealRegion = __name((region) => isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region, "getRealRegion");
  var resolveRegionConfig = __name((input) => {
    const { region, useFipsEndpoint } = input;
    if (!region) {
      throw new Error("Region is missing");
    }
    return {
      ...input,
      region: async () => {
        if (typeof region === "string") {
          return getRealRegion(region);
        }
        const providedRegion = await region();
        return getRealRegion(providedRegion);
      },
      useFipsEndpoint: async () => {
        const providedRegion = typeof region === "string" ? region : await region();
        if (isFipsRegion(providedRegion)) {
          return true;
        }
        return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
      }
    };
  }, "resolveRegionConfig");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint
var require_dist_cjs52 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    GetRoleCredentialsCommand: () => GetRoleCredentialsCommand,
    GetRoleCredentialsRequestFilterSensitiveLog: () => GetRoleCredentialsRequestFilterSensitiveLog,
    GetRoleCredentialsResponseFilterSensitiveLog: () => GetRoleCredentialsResponseFilterSensitiveLog,
    InvalidRequestException: () => InvalidRequestException2,
    ListAccountRolesCommand: () => ListAccountRolesCommand,
    ListAccountRolesRequestFilterSensitiveLog: () => ListAccountRolesRequestFilterSensitiveLog,
    ListAccountsCommand: () => ListAccountsCommand,
    ListAccountsRequestFilterSensitiveLog: () => ListAccountsRequestFilterSensitiveLog,
    LogoutCommand: () => LogoutCommand,
    LogoutRequestFilterSensitiveLog: () => LogoutRequestFilterSensitiveLog,
    ResourceNotFoundException: () => ResourceNotFoundException,
    RoleCredentialsFilterSensitiveLog: () => RoleCredentialsFilterSensitiveLog,
    SSO: () => SSO,
    SSOClient: () => SSOClient,
    SSOServiceException: () => SSOServiceException,
    TooManyRequestsException: () => TooManyRequestsException,
    UnauthorizedException: () => UnauthorizedException,
    __Client: () => import_smithy_client.Client,
    paginateListAccountRoles: () => paginateListAccountRoles,
    paginateListAccounts: () => paginateListAccounts
  });
  module.exports = __toCommonJS(src_exports);
  var import_middleware_host_header = require_dist_cjs4();
  var import_middleware_logger = require_dist_cjs5();
  var import_middleware_recursion_detection = require_dist_cjs6();
  var import_middleware_user_agent = require_dist_cjs29();
  var import_config_resolver = require_dist_cjs30();
  var import_middleware_content_length = require_dist_cjs32();
  var import_middleware_endpoint = require_dist_cjs41();
  var import_middleware_retry = require_dist_cjs35();
  var resolveClientEndpointParameters = __name((options) => {
    return {
      ...options,
      useDualstackEndpoint: options.useDualstackEndpoint ?? false,
      useFipsEndpoint: options.useFipsEndpoint ?? false,
      defaultSigningName: "awsssoportal"
    };
  }, "resolveClientEndpointParameters");
  var commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
  };
  var import_runtimeConfig = require_runtimeConfig();
  var import_region_config_resolver = require_dist_cjs51();
  var import_protocol_http = require_dist_cjs2();
  var import_smithy_client = require_dist_cjs16();
  var asPartial = __name((t) => t, "asPartial");
  var resolveRuntimeExtensions = __name((runtimeConfig, extensions) => {
    const extensionConfiguration = {
      ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
      ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
      ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig))
    };
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return {
      ...runtimeConfig,
      ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
      ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
      ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration)
    };
  }, "resolveRuntimeExtensions");
  var _SSOClient = class _SSOClient2 extends import_smithy_client.Client {
    constructor(...[configuration]) {
      const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
      const _config_1 = resolveClientEndpointParameters(_config_0);
      const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
      const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
      const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
      const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
      const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
      const _config_7 = resolveRuntimeExtensions(_config_6, (configuration == null ? undefined : configuration.extensions) || []);
      super(_config_7);
      this.config = _config_7;
      this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    }
    destroy() {
      super.destroy();
    }
  };
  __name(_SSOClient, "SSOClient");
  var SSOClient = _SSOClient;
  var import_middleware_serde = require_dist_cjs40();
  var import_types = require_dist_cjs();
  var _SSOServiceException = class _SSOServiceException2 extends import_smithy_client.ServiceException {
    constructor(options) {
      super(options);
      Object.setPrototypeOf(this, _SSOServiceException2.prototype);
    }
  };
  __name(_SSOServiceException, "SSOServiceException");
  var SSOServiceException = _SSOServiceException;
  var _InvalidRequestException = class _InvalidRequestException2 extends SSOServiceException {
    constructor(opts) {
      super({
        name: "InvalidRequestException",
        $fault: "client",
        ...opts
      });
      this.name = "InvalidRequestException";
      this.$fault = "client";
      Object.setPrototypeOf(this, _InvalidRequestException2.prototype);
    }
  };
  __name(_InvalidRequestException, "InvalidRequestException");
  var InvalidRequestException2 = _InvalidRequestException;
  var _ResourceNotFoundException = class _ResourceNotFoundException2 extends SSOServiceException {
    constructor(opts) {
      super({
        name: "ResourceNotFoundException",
        $fault: "client",
        ...opts
      });
      this.name = "ResourceNotFoundException";
      this.$fault = "client";
      Object.setPrototypeOf(this, _ResourceNotFoundException2.prototype);
    }
  };
  __name(_ResourceNotFoundException, "ResourceNotFoundException");
  var ResourceNotFoundException = _ResourceNotFoundException;
  var _TooManyRequestsException = class _TooManyRequestsException2 extends SSOServiceException {
    constructor(opts) {
      super({
        name: "TooManyRequestsException",
        $fault: "client",
        ...opts
      });
      this.name = "TooManyRequestsException";
      this.$fault = "client";
      Object.setPrototypeOf(this, _TooManyRequestsException2.prototype);
    }
  };
  __name(_TooManyRequestsException, "TooManyRequestsException");
  var TooManyRequestsException = _TooManyRequestsException;
  var _UnauthorizedException = class _UnauthorizedException2 extends SSOServiceException {
    constructor(opts) {
      super({
        name: "UnauthorizedException",
        $fault: "client",
        ...opts
      });
      this.name = "UnauthorizedException";
      this.$fault = "client";
      Object.setPrototypeOf(this, _UnauthorizedException2.prototype);
    }
  };
  __name(_UnauthorizedException, "UnauthorizedException");
  var UnauthorizedException = _UnauthorizedException;
  var GetRoleCredentialsRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.accessToken && { accessToken: import_smithy_client.SENSITIVE_STRING }
  }), "GetRoleCredentialsRequestFilterSensitiveLog");
  var RoleCredentialsFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.secretAccessKey && { secretAccessKey: import_smithy_client.SENSITIVE_STRING },
    ...obj.sessionToken && { sessionToken: import_smithy_client.SENSITIVE_STRING }
  }), "RoleCredentialsFilterSensitiveLog");
  var GetRoleCredentialsResponseFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.roleCredentials && { roleCredentials: RoleCredentialsFilterSensitiveLog(obj.roleCredentials) }
  }), "GetRoleCredentialsResponseFilterSensitiveLog");
  var ListAccountRolesRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.accessToken && { accessToken: import_smithy_client.SENSITIVE_STRING }
  }), "ListAccountRolesRequestFilterSensitiveLog");
  var ListAccountsRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.accessToken && { accessToken: import_smithy_client.SENSITIVE_STRING }
  }), "ListAccountsRequestFilterSensitiveLog");
  var LogoutRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.accessToken && { accessToken: import_smithy_client.SENSITIVE_STRING }
  }), "LogoutRequestFilterSensitiveLog");
  var import_core = require_dist_cjs43();
  var se_GetRoleCredentialsCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xasbt]: input[_aT]
    });
    b.bp("/federation/credentials");
    const query = (0, import_smithy_client.map)({
      [_rn]: [, (0, import_smithy_client.expectNonNull)(input[_rN], `roleName`)],
      [_ai]: [, (0, import_smithy_client.expectNonNull)(input[_aI], `accountId`)]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetRoleCredentialsCommand");
  var se_ListAccountRolesCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xasbt]: input[_aT]
    });
    b.bp("/assignment/roles");
    const query = (0, import_smithy_client.map)({
      [_nt]: [, input[_nT]],
      [_mr]: [() => input.maxResults !== undefined, () => input[_mR].toString()],
      [_ai]: [, (0, import_smithy_client.expectNonNull)(input[_aI], `accountId`)]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListAccountRolesCommand");
  var se_ListAccountsCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xasbt]: input[_aT]
    });
    b.bp("/assignment/accounts");
    const query = (0, import_smithy_client.map)({
      [_nt]: [, input[_nT]],
      [_mr]: [() => input.maxResults !== undefined, () => input[_mR].toString()]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListAccountsCommand");
  var se_LogoutCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xasbt]: input[_aT]
    });
    b.bp("/logout");
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
  }, "se_LogoutCommand");
  var de_GetRoleCredentialsCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetRoleCredentialsCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      roleCredentials: import_smithy_client._json
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_GetRoleCredentialsCommand");
  var de_GetRoleCredentialsCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "InvalidRequestException":
      case "com.amazonaws.sso#InvalidRequestException":
        throw await de_InvalidRequestExceptionRes(parsedOutput, context);
      case "ResourceNotFoundException":
      case "com.amazonaws.sso#ResourceNotFoundException":
        throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
      case "TooManyRequestsException":
      case "com.amazonaws.sso#TooManyRequestsException":
        throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
      case "UnauthorizedException":
      case "com.amazonaws.sso#UnauthorizedException":
        throw await de_UnauthorizedExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_GetRoleCredentialsCommandError");
  var de_ListAccountRolesCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListAccountRolesCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      nextToken: import_smithy_client.expectString,
      roleList: import_smithy_client._json
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_ListAccountRolesCommand");
  var de_ListAccountRolesCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "InvalidRequestException":
      case "com.amazonaws.sso#InvalidRequestException":
        throw await de_InvalidRequestExceptionRes(parsedOutput, context);
      case "ResourceNotFoundException":
      case "com.amazonaws.sso#ResourceNotFoundException":
        throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
      case "TooManyRequestsException":
      case "com.amazonaws.sso#TooManyRequestsException":
        throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
      case "UnauthorizedException":
      case "com.amazonaws.sso#UnauthorizedException":
        throw await de_UnauthorizedExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_ListAccountRolesCommandError");
  var de_ListAccountsCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListAccountsCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, import_smithy_client.take)(data, {
      accountList: import_smithy_client._json,
      nextToken: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    return contents;
  }, "de_ListAccountsCommand");
  var de_ListAccountsCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "InvalidRequestException":
      case "com.amazonaws.sso#InvalidRequestException":
        throw await de_InvalidRequestExceptionRes(parsedOutput, context);
      case "ResourceNotFoundException":
      case "com.amazonaws.sso#ResourceNotFoundException":
        throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
      case "TooManyRequestsException":
      case "com.amazonaws.sso#TooManyRequestsException":
        throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
      case "UnauthorizedException":
      case "com.amazonaws.sso#UnauthorizedException":
        throw await de_UnauthorizedExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_ListAccountsCommandError");
  var de_LogoutCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_LogoutCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_LogoutCommand");
  var de_LogoutCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "InvalidRequestException":
      case "com.amazonaws.sso#InvalidRequestException":
        throw await de_InvalidRequestExceptionRes(parsedOutput, context);
      case "TooManyRequestsException":
      case "com.amazonaws.sso#TooManyRequestsException":
        throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
      case "UnauthorizedException":
      case "com.amazonaws.sso#UnauthorizedException":
        throw await de_UnauthorizedExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_LogoutCommandError");
  var throwDefaultError = (0, import_smithy_client.withBaseException)(SSOServiceException);
  var de_InvalidRequestExceptionRes = __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      message: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidRequestException2({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_InvalidRequestExceptionRes");
  var de_ResourceNotFoundExceptionRes = __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      message: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_ResourceNotFoundExceptionRes");
  var de_TooManyRequestsExceptionRes = __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      message: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new TooManyRequestsException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_TooManyRequestsExceptionRes");
  var de_UnauthorizedExceptionRes = __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const doc = (0, import_smithy_client.take)(data, {
      message: import_smithy_client.expectString
    });
    Object.assign(contents, doc);
    const exception = new UnauthorizedException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_UnauthorizedExceptionRes");
  var deserializeMetadata = __name((output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  }), "deserializeMetadata");
  var collectBodyString = __name((streamBody, context) => (0, import_smithy_client.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body)), "collectBodyString");
  var isSerializableHeaderValue = __name((value) => value !== undefined && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0), "isSerializableHeaderValue");
  var _aI = "accountId";
  var _aT = "accessToken";
  var _ai = "account_id";
  var _mR = "maxResults";
  var _mr = "max_result";
  var _nT = "nextToken";
  var _nt = "next_token";
  var _rN = "roleName";
  var _rn = "role_name";
  var _xasbt = "x-amz-sso_bearer_token";
  var parseBody = __name((streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
      return JSON.parse(encoded);
    }
    return {};
  }), "parseBody");
  var parseErrorBody = __name(async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
  }, "parseErrorBody");
  var loadRestJsonErrorCode = __name((output, data) => {
    const findKey = __name((object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase()), "findKey");
    const sanitizeErrorCode = __name((rawValue) => {
      let cleanValue = rawValue;
      if (typeof cleanValue === "number") {
        cleanValue = cleanValue.toString();
      }
      if (cleanValue.indexOf(",") >= 0) {
        cleanValue = cleanValue.split(",")[0];
      }
      if (cleanValue.indexOf(":") >= 0) {
        cleanValue = cleanValue.split(":")[0];
      }
      if (cleanValue.indexOf("#") >= 0) {
        cleanValue = cleanValue.split("#")[1];
      }
      return cleanValue;
    }, "sanitizeErrorCode");
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
      return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
      return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
      return sanitizeErrorCode(data["__type"]);
    }
  }, "loadRestJsonErrorCode");
  var _GetRoleCredentialsCommand = class _GetRoleCredentialsCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("SWBPortalService", "GetRoleCredentials", {}).n("SSOClient", "GetRoleCredentialsCommand").f(GetRoleCredentialsRequestFilterSensitiveLog, GetRoleCredentialsResponseFilterSensitiveLog).ser(se_GetRoleCredentialsCommand).de(de_GetRoleCredentialsCommand).build() {
  };
  __name(_GetRoleCredentialsCommand, "GetRoleCredentialsCommand");
  var GetRoleCredentialsCommand = _GetRoleCredentialsCommand;
  var _ListAccountRolesCommand = class _ListAccountRolesCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("SWBPortalService", "ListAccountRoles", {}).n("SSOClient", "ListAccountRolesCommand").f(ListAccountRolesRequestFilterSensitiveLog, undefined).ser(se_ListAccountRolesCommand).de(de_ListAccountRolesCommand).build() {
  };
  __name(_ListAccountRolesCommand, "ListAccountRolesCommand");
  var ListAccountRolesCommand = _ListAccountRolesCommand;
  var _ListAccountsCommand = class _ListAccountsCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("SWBPortalService", "ListAccounts", {}).n("SSOClient", "ListAccountsCommand").f(ListAccountsRequestFilterSensitiveLog, undefined).ser(se_ListAccountsCommand).de(de_ListAccountsCommand).build() {
  };
  __name(_ListAccountsCommand, "ListAccountsCommand");
  var ListAccountsCommand = _ListAccountsCommand;
  var _LogoutCommand = class _LogoutCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("SWBPortalService", "Logout", {}).n("SSOClient", "LogoutCommand").f(LogoutRequestFilterSensitiveLog, undefined).ser(se_LogoutCommand).de(de_LogoutCommand).build() {
  };
  __name(_LogoutCommand, "LogoutCommand");
  var LogoutCommand = _LogoutCommand;
  var commands = {
    GetRoleCredentialsCommand,
    ListAccountRolesCommand,
    ListAccountsCommand,
    LogoutCommand
  };
  var _SSO = class _SSO2 extends SSOClient {
  };
  __name(_SSO, "SSO");
  var SSO = _SSO;
  (0, import_smithy_client.createAggregatedClient)(commands, SSO);
  var paginateListAccountRoles = (0, import_core.createPaginator)(SSOClient, ListAccountRolesCommand, "nextToken", "nextToken", "maxResults");
  var paginateListAccounts = (0, import_core.createPaginator)(SSOClient, ListAccountsCommand, "nextToken", "nextToken", "maxResults");
  var import_util_endpoints = require_dist_cjs28();
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.jsnode.js
var require_client_sso_oidc_node = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.UnsupportedGrantTypeException = exports.UnauthorizedClientException = exports.SlowDownException = exports.SSOOIDCClient = exports.InvalidScopeException = exports.InvalidRequestException = exports.InvalidClientException = exports.InternalServerException = exports.ExpiredTokenException = exports.CreateTokenCommand = exports.AuthorizationPendingException = exports.AccessDeniedException = undefined;
  var middleware_host_header_1 = require_dist_cjs4();
  var middleware_logger_1 = require_dist_cjs5();
  var middleware_recursion_detection_1 = require_dist_cjs6();
  var middleware_user_agent_1 = require_dist_cjs29();
  var config_resolver_1 = require_dist_cjs30();
  var middleware_content_length_1 = require_dist_cjs32();
  var middleware_endpoint_1 = require_dist_cjs41();
  var middleware_retry_1 = require_dist_cjs35();
  var smithy_client_1 = require_dist_cjs16();
  var resolveClientEndpointParameters = (options) => {
    var _a, _b;
    return {
      ...options,
      useDualstackEndpoint: (_a = options.useDualstackEndpoint) !== null && _a !== undefined ? _a : false,
      useFipsEndpoint: (_b = options.useFipsEndpoint) !== null && _b !== undefined ? _b : false,
      defaultSigningName: "awsssooidc"
    };
  };
  var package_default = { version: "3.429.0" };
  var util_user_agent_node_1 = require_dist_cjs47();
  var config_resolver_2 = require_dist_cjs30();
  var hash_node_1 = require_dist_cjs48();
  var middleware_retry_2 = require_dist_cjs35();
  var node_config_provider_1 = require_dist_cjs37();
  var node_http_handler_1 = require_dist_cjs14();
  var util_body_length_node_1 = require_dist_cjs49();
  var util_retry_1 = require_dist_cjs34();
  var smithy_client_2 = require_dist_cjs16();
  var url_parser_1 = require_dist_cjs39();
  var util_base64_1 = require_dist_cjs10();
  var util_utf8_1 = require_dist_cjs11();
  var util_endpoints_1 = require_dist_cjs27();
  var s = "required";
  var t = "fn";
  var u = "argv";
  var v = "ref";
  var a = "isSet";
  var b = "tree";
  var c = "error";
  var d = "endpoint";
  var e = "PartitionResult";
  var f = "getAttr";
  var g = { [s]: false, type: "String" };
  var h = { [s]: true, default: false, type: "Boolean" };
  var i = { [v]: "Endpoint" };
  var j = { [t]: "booleanEquals", [u]: [{ [v]: "UseFIPS" }, true] };
  var k = { [t]: "booleanEquals", [u]: [{ [v]: "UseDualStack" }, true] };
  var l = {};
  var m = { [t]: "booleanEquals", [u]: [true, { [t]: f, [u]: [{ [v]: e }, "supportsFIPS"] }] };
  var n = { [v]: e };
  var o = { [t]: "booleanEquals", [u]: [true, { [t]: f, [u]: [n, "supportsDualStack"] }] };
  var p = [j];
  var q = [k];
  var r = [{ [v]: "Region" }];
  var _data = {
    version: "1.0",
    parameters: { Region: g, UseDualStack: h, UseFIPS: h, Endpoint: g },
    rules: [
      {
        conditions: [{ [t]: a, [u]: [i] }],
        type: b,
        rules: [
          { conditions: p, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c },
          { conditions: q, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c },
          { endpoint: { url: i, properties: l, headers: l }, type: d }
        ]
      },
      {
        conditions: [{ [t]: a, [u]: r }],
        type: b,
        rules: [
          {
            conditions: [{ [t]: "aws.partition", [u]: r, assign: e }],
            type: b,
            rules: [
              {
                conditions: [j, k],
                type: b,
                rules: [
                  {
                    conditions: [m, o],
                    type: b,
                    rules: [
                      {
                        endpoint: {
                          url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                          properties: l,
                          headers: l
                        },
                        type: d
                      }
                    ]
                  },
                  { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }
                ]
              },
              {
                conditions: p,
                type: b,
                rules: [
                  {
                    conditions: [m],
                    type: b,
                    rules: [
                      {
                        conditions: [{ [t]: "stringEquals", [u]: ["aws-us-gov", { [t]: f, [u]: [n, "name"] }] }],
                        endpoint: { url: "https://oidc.{Region}.amazonaws.com", properties: l, headers: l },
                        type: d
                      },
                      {
                        endpoint: {
                          url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}",
                          properties: l,
                          headers: l
                        },
                        type: d
                      }
                    ]
                  },
                  { error: "FIPS is enabled but this partition does not support FIPS", type: c }
                ]
              },
              {
                conditions: q,
                type: b,
                rules: [
                  {
                    conditions: [o],
                    type: b,
                    rules: [
                      {
                        endpoint: {
                          url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}",
                          properties: l,
                          headers: l
                        },
                        type: d
                      }
                    ]
                  },
                  { error: "DualStack is enabled but this partition does not support DualStack", type: c }
                ]
              },
              {
                endpoint: { url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}", properties: l, headers: l },
                type: d
              }
            ]
          }
        ]
      },
      { error: "Invalid Configuration: Missing Region", type: c }
    ]
  };
  var ruleSet = _data;
  var defaultEndpointResolver = (endpointParams, context = {}) => {
    return (0, util_endpoints_1.resolveEndpoint)(ruleSet, {
      endpointParams,
      logger: context.logger
    });
  };
  var getRuntimeConfig = (config) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    return {
      apiVersion: "2019-06-10",
      base64Decoder: (_a = config === null || config === undefined ? undefined : config.base64Decoder) !== null && _a !== undefined ? _a : util_base64_1.fromBase64,
      base64Encoder: (_b = config === null || config === undefined ? undefined : config.base64Encoder) !== null && _b !== undefined ? _b : util_base64_1.toBase64,
      disableHostPrefix: (_c = config === null || config === undefined ? undefined : config.disableHostPrefix) !== null && _c !== undefined ? _c : false,
      endpointProvider: (_d = config === null || config === undefined ? undefined : config.endpointProvider) !== null && _d !== undefined ? _d : defaultEndpointResolver,
      extensions: (_e = config === null || config === undefined ? undefined : config.extensions) !== null && _e !== undefined ? _e : [],
      logger: (_f = config === null || config === undefined ? undefined : config.logger) !== null && _f !== undefined ? _f : new smithy_client_2.NoOpLogger,
      serviceId: (_g = config === null || config === undefined ? undefined : config.serviceId) !== null && _g !== undefined ? _g : "SSO OIDC",
      urlParser: (_h = config === null || config === undefined ? undefined : config.urlParser) !== null && _h !== undefined ? _h : url_parser_1.parseUrl,
      utf8Decoder: (_j = config === null || config === undefined ? undefined : config.utf8Decoder) !== null && _j !== undefined ? _j : util_utf8_1.fromUtf8,
      utf8Encoder: (_k = config === null || config === undefined ? undefined : config.utf8Encoder) !== null && _k !== undefined ? _k : util_utf8_1.toUtf8
    };
  };
  var smithy_client_3 = require_dist_cjs16();
  var util_defaults_mode_node_1 = require_dist_cjs50();
  var smithy_client_4 = require_dist_cjs16();
  var getRuntimeConfig2 = (config) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    (0, smithy_client_4.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = () => defaultsMode().then(smithy_client_3.loadConfigsForDefaultMode);
    const clientSharedValues = getRuntimeConfig(config);
    return {
      ...clientSharedValues,
      ...config,
      runtime: "node",
      defaultsMode,
      bodyLengthChecker: (_a = config === null || config === undefined ? undefined : config.bodyLengthChecker) !== null && _a !== undefined ? _a : util_body_length_node_1.calculateBodyLength,
      defaultUserAgentProvider: (_b = config === null || config === undefined ? undefined : config.defaultUserAgentProvider) !== null && _b !== undefined ? _b : (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
      maxAttempts: (_c = config === null || config === undefined ? undefined : config.maxAttempts) !== null && _c !== undefined ? _c : (0, node_config_provider_1.loadConfig)(middleware_retry_2.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
      region: (_d = config === null || config === undefined ? undefined : config.region) !== null && _d !== undefined ? _d : (0, node_config_provider_1.loadConfig)(config_resolver_2.NODE_REGION_CONFIG_OPTIONS, config_resolver_2.NODE_REGION_CONFIG_FILE_OPTIONS),
      requestHandler: (_e = config === null || config === undefined ? undefined : config.requestHandler) !== null && _e !== undefined ? _e : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
      retryMode: (_f = config === null || config === undefined ? undefined : config.retryMode) !== null && _f !== undefined ? _f : (0, node_config_provider_1.loadConfig)({
        ...middleware_retry_2.NODE_RETRY_MODE_CONFIG_OPTIONS,
        default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
      }),
      sha256: (_g = config === null || config === undefined ? undefined : config.sha256) !== null && _g !== undefined ? _g : hash_node_1.Hash.bind(null, "sha256"),
      streamCollector: (_h = config === null || config === undefined ? undefined : config.streamCollector) !== null && _h !== undefined ? _h : node_http_handler_1.streamCollector,
      useDualstackEndpoint: (_j = config === null || config === undefined ? undefined : config.useDualstackEndpoint) !== null && _j !== undefined ? _j : (0, node_config_provider_1.loadConfig)(config_resolver_2.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
      useFipsEndpoint: (_k = config === null || config === undefined ? undefined : config.useFipsEndpoint) !== null && _k !== undefined ? _k : (0, node_config_provider_1.loadConfig)(config_resolver_2.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
    };
  };
  var region_config_resolver_1 = require_dist_cjs51();
  var protocol_http_1 = require_dist_cjs2();
  var smithy_client_5 = require_dist_cjs16();
  var asPartial = (t2) => t2;
  var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = {
      ...asPartial((0, region_config_resolver_1.getAwsRegionExtensionConfiguration)(runtimeConfig)),
      ...asPartial((0, smithy_client_5.getDefaultExtensionConfiguration)(runtimeConfig)),
      ...asPartial((0, protocol_http_1.getHttpHandlerExtensionConfiguration)(runtimeConfig))
    };
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return {
      ...runtimeConfig,
      ...(0, region_config_resolver_1.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
      ...(0, smithy_client_5.resolveDefaultRuntimeConfig)(extensionConfiguration),
      ...(0, protocol_http_1.resolveHttpHandlerRuntimeConfig)(extensionConfiguration)
    };
  };
  var SSOOIDCClient2 = class extends smithy_client_1.Client {
    constructor(...[configuration]) {
      const _config_0 = getRuntimeConfig2(configuration || {});
      const _config_1 = resolveClientEndpointParameters(_config_0);
      const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
      const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
      const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
      const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
      const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
      const _config_7 = resolveRuntimeExtensions(_config_6, (configuration === null || configuration === undefined ? undefined : configuration.extensions) || []);
      super(_config_7);
      this.config = _config_7;
      this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
      this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
      this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
      this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
      this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
      this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
    }
    destroy() {
      super.destroy();
    }
  };
  exports.SSOOIDCClient = SSOOIDCClient2;
  var smithy_client_6 = require_dist_cjs16();
  var middleware_endpoint_2 = require_dist_cjs41();
  var middleware_serde_1 = require_dist_cjs40();
  var smithy_client_7 = require_dist_cjs16();
  var types_1 = require_dist_cjs();
  var protocol_http_2 = require_dist_cjs2();
  var smithy_client_8 = require_dist_cjs16();
  var smithy_client_9 = require_dist_cjs16();
  var SSOOIDCServiceException = class _SSOOIDCServiceException extends smithy_client_9.ServiceException {
    constructor(options) {
      super(options);
      Object.setPrototypeOf(this, _SSOOIDCServiceException.prototype);
    }
  };
  var AccessDeniedException2 = class _AccessDeniedException extends SSOOIDCServiceException {
    constructor(opts) {
      super({
        name: "AccessDeniedException",
        $fault: "client",
        ...opts
      });
      this.name = "AccessDeniedException";
      this.$fault = "client";
      Object.setPrototypeOf(this, _AccessDeniedException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  exports.AccessDeniedException = AccessDeniedException2;
  var AuthorizationPendingException2 = class _AuthorizationPendingException extends SSOOIDCServiceException {
    constructor(opts) {
      super({
        name: "AuthorizationPendingException",
        $fault: "client",
        ...opts
      });
      this.name = "AuthorizationPendingException";
      this.$fault = "client";
      Object.setPrototypeOf(this, _AuthorizationPendingException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  exports.AuthorizationPendingException = AuthorizationPendingException2;
  var ExpiredTokenException2 = class _ExpiredTokenException extends SSOOIDCServiceException {
    constructor(opts) {
      super({
        name: "ExpiredTokenException",
        $fault: "client",
        ...opts
      });
      this.name = "ExpiredTokenException";
      this.$fault = "client";
      Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  exports.ExpiredTokenException = ExpiredTokenException2;
  var InternalServerException2 = class _InternalServerException extends SSOOIDCServiceException {
    constructor(opts) {
      super({
        name: "InternalServerException",
        $fault: "server",
        ...opts
      });
      this.name = "InternalServerException";
      this.$fault = "server";
      Object.setPrototypeOf(this, _InternalServerException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  exports.InternalServerException = InternalServerException2;
  var InvalidClientException2 = class _InvalidClientException extends SSOOIDCServiceException {
    constructor(opts) {
      super({
        name: "InvalidClientException",
        $fault: "client",
        ...opts
      });
      this.name = "InvalidClientException";
      this.$fault = "client";
      Object.setPrototypeOf(this, _InvalidClientException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  exports.InvalidClientException = InvalidClientException2;
  var InvalidGrantException = class _InvalidGrantException extends SSOOIDCServiceException {
    constructor(opts) {
      super({
        name: "InvalidGrantException",
        $fault: "client",
        ...opts
      });
      this.name = "InvalidGrantException";
      this.$fault = "client";
      Object.setPrototypeOf(this, _InvalidGrantException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  var InvalidRequestException2 = class _InvalidRequestException extends SSOOIDCServiceException {
    constructor(opts) {
      super({
        name: "InvalidRequestException",
        $fault: "client",
        ...opts
      });
      this.name = "InvalidRequestException";
      this.$fault = "client";
      Object.setPrototypeOf(this, _InvalidRequestException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  exports.InvalidRequestException = InvalidRequestException2;
  var InvalidScopeException2 = class _InvalidScopeException extends SSOOIDCServiceException {
    constructor(opts) {
      super({
        name: "InvalidScopeException",
        $fault: "client",
        ...opts
      });
      this.name = "InvalidScopeException";
      this.$fault = "client";
      Object.setPrototypeOf(this, _InvalidScopeException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  exports.InvalidScopeException = InvalidScopeException2;
  var SlowDownException2 = class _SlowDownException extends SSOOIDCServiceException {
    constructor(opts) {
      super({
        name: "SlowDownException",
        $fault: "client",
        ...opts
      });
      this.name = "SlowDownException";
      this.$fault = "client";
      Object.setPrototypeOf(this, _SlowDownException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  exports.SlowDownException = SlowDownException2;
  var UnauthorizedClientException2 = class _UnauthorizedClientException extends SSOOIDCServiceException {
    constructor(opts) {
      super({
        name: "UnauthorizedClientException",
        $fault: "client",
        ...opts
      });
      this.name = "UnauthorizedClientException";
      this.$fault = "client";
      Object.setPrototypeOf(this, _UnauthorizedClientException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  exports.UnauthorizedClientException = UnauthorizedClientException2;
  var UnsupportedGrantTypeException2 = class _UnsupportedGrantTypeException extends SSOOIDCServiceException {
    constructor(opts) {
      super({
        name: "UnsupportedGrantTypeException",
        $fault: "client",
        ...opts
      });
      this.name = "UnsupportedGrantTypeException";
      this.$fault = "client";
      Object.setPrototypeOf(this, _UnsupportedGrantTypeException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  exports.UnsupportedGrantTypeException = UnsupportedGrantTypeException2;
  var InvalidClientMetadataException = class _InvalidClientMetadataException extends SSOOIDCServiceException {
    constructor(opts) {
      super({
        name: "InvalidClientMetadataException",
        $fault: "client",
        ...opts
      });
      this.name = "InvalidClientMetadataException";
      this.$fault = "client";
      Object.setPrototypeOf(this, _InvalidClientMetadataException.prototype);
      this.error = opts.error;
      this.error_description = opts.error_description;
    }
  };
  var se_CreateTokenCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
      "content-type": "application/json"
    };
    const resolvedPath = `${(basePath === null || basePath === undefined ? undefined : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/token`;
    let body;
    body = JSON.stringify((0, smithy_client_8.take)(input, {
      clientId: [],
      clientSecret: [],
      code: [],
      deviceCode: [],
      grantType: [],
      redirectUri: [],
      refreshToken: [],
      scope: (_) => (0, smithy_client_8._json)(_)
    }));
    return new protocol_http_2.HttpRequest({
      protocol,
      hostname,
      port,
      method: "POST",
      headers,
      path: resolvedPath,
      body
    });
  };
  var se_RegisterClientCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
      "content-type": "application/json"
    };
    const resolvedPath = `${(basePath === null || basePath === undefined ? undefined : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/client/register`;
    let body;
    body = JSON.stringify((0, smithy_client_8.take)(input, {
      clientName: [],
      clientType: [],
      scopes: (_) => (0, smithy_client_8._json)(_)
    }));
    return new protocol_http_2.HttpRequest({
      protocol,
      hostname,
      port,
      method: "POST",
      headers,
      path: resolvedPath,
      body
    });
  };
  var se_StartDeviceAuthorizationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
      "content-type": "application/json"
    };
    const resolvedPath = `${(basePath === null || basePath === undefined ? undefined : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/device_authorization`;
    let body;
    body = JSON.stringify((0, smithy_client_8.take)(input, {
      clientId: [],
      clientSecret: [],
      startUrl: []
    }));
    return new protocol_http_2.HttpRequest({
      protocol,
      hostname,
      port,
      method: "POST",
      headers,
      path: resolvedPath,
      body
    });
  };
  var de_CreateTokenCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CreateTokenCommandError(output, context);
    }
    const contents = (0, smithy_client_8.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, smithy_client_8.expectNonNull)((0, smithy_client_8.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_8.take)(data, {
      accessToken: smithy_client_8.expectString,
      expiresIn: smithy_client_8.expectInt32,
      idToken: smithy_client_8.expectString,
      refreshToken: smithy_client_8.expectString,
      tokenType: smithy_client_8.expectString
    });
    Object.assign(contents, doc);
    return contents;
  };
  var de_CreateTokenCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "AccessDeniedException":
      case "com.amazonaws.ssooidc#AccessDeniedException":
        throw await de_AccessDeniedExceptionRes(parsedOutput, context);
      case "AuthorizationPendingException":
      case "com.amazonaws.ssooidc#AuthorizationPendingException":
        throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);
      case "ExpiredTokenException":
      case "com.amazonaws.ssooidc#ExpiredTokenException":
        throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
      case "InternalServerException":
      case "com.amazonaws.ssooidc#InternalServerException":
        throw await de_InternalServerExceptionRes(parsedOutput, context);
      case "InvalidClientException":
      case "com.amazonaws.ssooidc#InvalidClientException":
        throw await de_InvalidClientExceptionRes(parsedOutput, context);
      case "InvalidGrantException":
      case "com.amazonaws.ssooidc#InvalidGrantException":
        throw await de_InvalidGrantExceptionRes(parsedOutput, context);
      case "InvalidRequestException":
      case "com.amazonaws.ssooidc#InvalidRequestException":
        throw await de_InvalidRequestExceptionRes(parsedOutput, context);
      case "InvalidScopeException":
      case "com.amazonaws.ssooidc#InvalidScopeException":
        throw await de_InvalidScopeExceptionRes(parsedOutput, context);
      case "SlowDownException":
      case "com.amazonaws.ssooidc#SlowDownException":
        throw await de_SlowDownExceptionRes(parsedOutput, context);
      case "UnauthorizedClientException":
      case "com.amazonaws.ssooidc#UnauthorizedClientException":
        throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
      case "UnsupportedGrantTypeException":
      case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
        throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  };
  var de_RegisterClientCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_RegisterClientCommandError(output, context);
    }
    const contents = (0, smithy_client_8.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, smithy_client_8.expectNonNull)((0, smithy_client_8.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_8.take)(data, {
      authorizationEndpoint: smithy_client_8.expectString,
      clientId: smithy_client_8.expectString,
      clientIdIssuedAt: smithy_client_8.expectLong,
      clientSecret: smithy_client_8.expectString,
      clientSecretExpiresAt: smithy_client_8.expectLong,
      tokenEndpoint: smithy_client_8.expectString
    });
    Object.assign(contents, doc);
    return contents;
  };
  var de_RegisterClientCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "InternalServerException":
      case "com.amazonaws.ssooidc#InternalServerException":
        throw await de_InternalServerExceptionRes(parsedOutput, context);
      case "InvalidClientMetadataException":
      case "com.amazonaws.ssooidc#InvalidClientMetadataException":
        throw await de_InvalidClientMetadataExceptionRes(parsedOutput, context);
      case "InvalidRequestException":
      case "com.amazonaws.ssooidc#InvalidRequestException":
        throw await de_InvalidRequestExceptionRes(parsedOutput, context);
      case "InvalidScopeException":
      case "com.amazonaws.ssooidc#InvalidScopeException":
        throw await de_InvalidScopeExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  };
  var de_StartDeviceAuthorizationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_StartDeviceAuthorizationCommandError(output, context);
    }
    const contents = (0, smithy_client_8.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, smithy_client_8.expectNonNull)((0, smithy_client_8.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_8.take)(data, {
      deviceCode: smithy_client_8.expectString,
      expiresIn: smithy_client_8.expectInt32,
      interval: smithy_client_8.expectInt32,
      userCode: smithy_client_8.expectString,
      verificationUri: smithy_client_8.expectString,
      verificationUriComplete: smithy_client_8.expectString
    });
    Object.assign(contents, doc);
    return contents;
  };
  var de_StartDeviceAuthorizationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "InternalServerException":
      case "com.amazonaws.ssooidc#InternalServerException":
        throw await de_InternalServerExceptionRes(parsedOutput, context);
      case "InvalidClientException":
      case "com.amazonaws.ssooidc#InvalidClientException":
        throw await de_InvalidClientExceptionRes(parsedOutput, context);
      case "InvalidRequestException":
      case "com.amazonaws.ssooidc#InvalidRequestException":
        throw await de_InvalidRequestExceptionRes(parsedOutput, context);
      case "SlowDownException":
      case "com.amazonaws.ssooidc#SlowDownException":
        throw await de_SlowDownExceptionRes(parsedOutput, context);
      case "UnauthorizedClientException":
      case "com.amazonaws.ssooidc#UnauthorizedClientException":
        throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  };
  var throwDefaultError = (0, smithy_client_8.withBaseException)(SSOOIDCServiceException);
  var de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_8.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_8.take)(data, {
      error: smithy_client_8.expectString,
      error_description: smithy_client_8.expectString
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException2({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, smithy_client_8.decorateServiceException)(exception, parsedOutput.body);
  };
  var de_AuthorizationPendingExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_8.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_8.take)(data, {
      error: smithy_client_8.expectString,
      error_description: smithy_client_8.expectString
    });
    Object.assign(contents, doc);
    const exception = new AuthorizationPendingException2({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, smithy_client_8.decorateServiceException)(exception, parsedOutput.body);
  };
  var de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_8.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_8.take)(data, {
      error: smithy_client_8.expectString,
      error_description: smithy_client_8.expectString
    });
    Object.assign(contents, doc);
    const exception = new ExpiredTokenException2({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, smithy_client_8.decorateServiceException)(exception, parsedOutput.body);
  };
  var de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_8.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_8.take)(data, {
      error: smithy_client_8.expectString,
      error_description: smithy_client_8.expectString
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException2({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, smithy_client_8.decorateServiceException)(exception, parsedOutput.body);
  };
  var de_InvalidClientExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_8.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_8.take)(data, {
      error: smithy_client_8.expectString,
      error_description: smithy_client_8.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidClientException2({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, smithy_client_8.decorateServiceException)(exception, parsedOutput.body);
  };
  var de_InvalidClientMetadataExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_8.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_8.take)(data, {
      error: smithy_client_8.expectString,
      error_description: smithy_client_8.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidClientMetadataException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, smithy_client_8.decorateServiceException)(exception, parsedOutput.body);
  };
  var de_InvalidGrantExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_8.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_8.take)(data, {
      error: smithy_client_8.expectString,
      error_description: smithy_client_8.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidGrantException({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, smithy_client_8.decorateServiceException)(exception, parsedOutput.body);
  };
  var de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_8.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_8.take)(data, {
      error: smithy_client_8.expectString,
      error_description: smithy_client_8.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidRequestException2({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, smithy_client_8.decorateServiceException)(exception, parsedOutput.body);
  };
  var de_InvalidScopeExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_8.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_8.take)(data, {
      error: smithy_client_8.expectString,
      error_description: smithy_client_8.expectString
    });
    Object.assign(contents, doc);
    const exception = new InvalidScopeException2({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, smithy_client_8.decorateServiceException)(exception, parsedOutput.body);
  };
  var de_SlowDownExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_8.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_8.take)(data, {
      error: smithy_client_8.expectString,
      error_description: smithy_client_8.expectString
    });
    Object.assign(contents, doc);
    const exception = new SlowDownException2({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, smithy_client_8.decorateServiceException)(exception, parsedOutput.body);
  };
  var de_UnauthorizedClientExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_8.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_8.take)(data, {
      error: smithy_client_8.expectString,
      error_description: smithy_client_8.expectString
    });
    Object.assign(contents, doc);
    const exception = new UnauthorizedClientException2({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, smithy_client_8.decorateServiceException)(exception, parsedOutput.body);
  };
  var de_UnsupportedGrantTypeExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_8.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_8.take)(data, {
      error: smithy_client_8.expectString,
      error_description: smithy_client_8.expectString
    });
    Object.assign(contents, doc);
    const exception = new UnsupportedGrantTypeException2({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, smithy_client_8.decorateServiceException)(exception, parsedOutput.body);
  };
  var deserializeMetadata = (output) => {
    var _a, _b;
    return {
      httpStatusCode: output.statusCode,
      requestId: (_b = (_a = output.headers["x-amzn-requestid"]) !== null && _a !== undefined ? _a : output.headers["x-amzn-request-id"]) !== null && _b !== undefined ? _b : output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    };
  };
  var collectBodyString = (streamBody, context) => (0, smithy_client_8.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
  var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
      return JSON.parse(encoded);
    }
    return {};
  });
  var parseErrorBody = async (errorBody, context) => {
    var _a;
    const value = await parseBody(errorBody, context);
    value.message = (_a = value.message) !== null && _a !== undefined ? _a : value.Message;
    return value;
  };
  var loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k2) => k2.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
      let cleanValue = rawValue;
      if (typeof cleanValue === "number") {
        cleanValue = cleanValue.toString();
      }
      if (cleanValue.indexOf(",") >= 0) {
        cleanValue = cleanValue.split(",")[0];
      }
      if (cleanValue.indexOf(":") >= 0) {
        cleanValue = cleanValue.split(":")[0];
      }
      if (cleanValue.indexOf("#") >= 0) {
        cleanValue = cleanValue.split("#")[1];
      }
      return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
      return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
      return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
      return sanitizeErrorCode(data["__type"]);
    }
  };

  class CreateTokenCommand2 extends smithy_client_7.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    static getEndpointParameterInstructions() {
      return {
        UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
        Endpoint: { type: "builtInParams", name: "endpoint" },
        Region: { type: "builtInParams", name: "region" },
        UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
      };
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use((0, middleware_endpoint_2.getEndpointPlugin)(configuration, _CreateTokenCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const { logger: logger4 } = configuration;
      const clientName = "SSOOIDCClient";
      const commandName = "CreateTokenCommand";
      const handlerExecutionContext = {
        logger: logger4,
        clientName,
        commandName,
        inputFilterSensitiveLog: (_) => _,
        outputFilterSensitiveLog: (_) => _,
        [types_1.SMITHY_CONTEXT_KEY]: {
          service: "AWSSSOOIDCService",
          operation: "CreateToken"
        }
      };
      const { requestHandler } = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_CreateTokenCommand(input, context);
    }
    deserialize(output, context) {
      return de_CreateTokenCommand(output, context);
    }
  }
  exports.CreateTokenCommand = CreateTokenCommand2;
  var middleware_endpoint_3 = require_dist_cjs41();
  var middleware_serde_2 = require_dist_cjs40();
  var smithy_client_10 = require_dist_cjs16();
  var types_2 = require_dist_cjs();

  class RegisterClientCommand extends smithy_client_10.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    static getEndpointParameterInstructions() {
      return {
        UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
        Endpoint: { type: "builtInParams", name: "endpoint" },
        Region: { type: "builtInParams", name: "region" },
        UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
      };
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use((0, middleware_serde_2.getSerdePlugin)(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use((0, middleware_endpoint_3.getEndpointPlugin)(configuration, _RegisterClientCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const { logger: logger4 } = configuration;
      const clientName = "SSOOIDCClient";
      const commandName = "RegisterClientCommand";
      const handlerExecutionContext = {
        logger: logger4,
        clientName,
        commandName,
        inputFilterSensitiveLog: (_) => _,
        outputFilterSensitiveLog: (_) => _,
        [types_2.SMITHY_CONTEXT_KEY]: {
          service: "AWSSSOOIDCService",
          operation: "RegisterClient"
        }
      };
      const { requestHandler } = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_RegisterClientCommand(input, context);
    }
    deserialize(output, context) {
      return de_RegisterClientCommand(output, context);
    }
  }
  var middleware_endpoint_4 = require_dist_cjs41();
  var middleware_serde_3 = require_dist_cjs40();
  var smithy_client_11 = require_dist_cjs16();
  var types_3 = require_dist_cjs();

  class StartDeviceAuthorizationCommand extends smithy_client_11.Command {
    constructor(input) {
      super();
      this.input = input;
    }
    static getEndpointParameterInstructions() {
      return {
        UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
        Endpoint: { type: "builtInParams", name: "endpoint" },
        Region: { type: "builtInParams", name: "region" },
        UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
      };
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use((0, middleware_serde_3.getSerdePlugin)(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use((0, middleware_endpoint_4.getEndpointPlugin)(configuration, _StartDeviceAuthorizationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const { logger: logger4 } = configuration;
      const clientName = "SSOOIDCClient";
      const commandName = "StartDeviceAuthorizationCommand";
      const handlerExecutionContext = {
        logger: logger4,
        clientName,
        commandName,
        inputFilterSensitiveLog: (_) => _,
        outputFilterSensitiveLog: (_) => _,
        [types_3.SMITHY_CONTEXT_KEY]: {
          service: "AWSSSOOIDCService",
          operation: "StartDeviceAuthorization"
        }
      };
      const { requestHandler } = configuration;
      return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_StartDeviceAuthorizationCommand(input, context);
    }
    deserialize(output, context) {
      return de_StartDeviceAuthorizationCommand(output, context);
    }
  }
  var commands = {
    CreateTokenCommand: CreateTokenCommand2,
    RegisterClientCommand,
    StartDeviceAuthorizationCommand
  };
  var SSOOIDC = class extends SSOOIDCClient2 {
  };
  (0, smithy_client_6.createAggregatedClient)(commands, SSOOIDC);
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rule
var require_dist_cjs53 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    fromSso: () => fromSso,
    fromStatic: () => fromStatic,
    nodeProvider: () => nodeProvider
  });
  module.exports = __toCommonJS(src_exports);
  __reExport(src_exports, require_client_sso_oidc_node(), module.exports);
  var EXPIRE_WINDOW_MS = 5 * 60 * 1000;
  var REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
  var import_client_sso_oidc_node2 = require_client_sso_oidc_node();
  var import_client_sso_oidc_node = require_client_sso_oidc_node();
  var ssoOidcClientsHash = {};
  var getSsoOidcClient = __name((ssoRegion) => {
    if (ssoOidcClientsHash[ssoRegion]) {
      return ssoOidcClientsHash[ssoRegion];
    }
    const ssoOidcClient = new import_client_sso_oidc_node.SSOOIDCClient({ region: ssoRegion });
    ssoOidcClientsHash[ssoRegion] = ssoOidcClient;
    return ssoOidcClient;
  }, "getSsoOidcClient");
  var getNewSsoOidcToken = __name((ssoToken, ssoRegion) => {
    const ssoOidcClient = getSsoOidcClient(ssoRegion);
    return ssoOidcClient.send(new import_client_sso_oidc_node2.CreateTokenCommand({
      clientId: ssoToken.clientId,
      clientSecret: ssoToken.clientSecret,
      refreshToken: ssoToken.refreshToken,
      grantType: "refresh_token"
    }));
  }, "getNewSsoOidcToken");
  var import_property_provider = require_dist_cjs25();
  var validateTokenExpiry = __name((token) => {
    if (token.expiration && token.expiration.getTime() < Date.now()) {
      throw new import_property_provider.TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);
    }
  }, "validateTokenExpiry");
  var validateTokenKey = __name((key, value, forRefresh = false) => {
    if (typeof value === "undefined") {
      throw new import_property_provider.TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${REFRESH_MESSAGE}`, false);
    }
  }, "validateTokenKey");
  var import_shared_ini_file_loader = require_dist_cjs36();
  var import_fs = __require("fs");
  var { writeFile } = import_fs.promises;
  var writeSSOTokenToFile = __name((id, ssoToken) => {
    const tokenFilepath = (0, import_shared_ini_file_loader.getSSOTokenFilepath)(id);
    const tokenString = JSON.stringify(ssoToken, null, 2);
    return writeFile(tokenFilepath, tokenString);
  }, "writeSSOTokenToFile");
  var lastRefreshAttemptTime = new Date(0);
  var fromSso = __name((init = {}) => async () => {
    const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
    const profileName = (0, import_shared_ini_file_loader.getProfileName)(init);
    const profile = profiles[profileName];
    if (!profile) {
      throw new import_property_provider.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
    } else if (!profile["sso_session"]) {
      throw new import_property_provider.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
    }
    const ssoSessionName = profile["sso_session"];
    const ssoSessions = await (0, import_shared_ini_file_loader.loadSsoSessionData)(init);
    const ssoSession = ssoSessions[ssoSessionName];
    if (!ssoSession) {
      throw new import_property_provider.TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);
    }
    for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {
      if (!ssoSession[ssoSessionRequiredKey]) {
        throw new import_property_provider.TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);
      }
    }
    const ssoStartUrl = ssoSession["sso_start_url"];
    const ssoRegion = ssoSession["sso_region"];
    let ssoToken;
    try {
      ssoToken = await (0, import_shared_ini_file_loader.getSSOTokenFromFile)(ssoSessionName);
    } catch (e) {
      throw new import_property_provider.TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);
    }
    validateTokenKey("accessToken", ssoToken.accessToken);
    validateTokenKey("expiresAt", ssoToken.expiresAt);
    const { accessToken, expiresAt } = ssoToken;
    const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
    if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {
      return existingToken;
    }
    if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {
      validateTokenExpiry(existingToken);
      return existingToken;
    }
    validateTokenKey("clientId", ssoToken.clientId, true);
    validateTokenKey("clientSecret", ssoToken.clientSecret, true);
    validateTokenKey("refreshToken", ssoToken.refreshToken, true);
    try {
      lastRefreshAttemptTime.setTime(Date.now());
      const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion);
      validateTokenKey("accessToken", newSsoOidcToken.accessToken);
      validateTokenKey("expiresIn", newSsoOidcToken.expiresIn);
      const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);
      try {
        await writeSSOTokenToFile(ssoSessionName, {
          ...ssoToken,
          accessToken: newSsoOidcToken.accessToken,
          expiresAt: newTokenExpiration.toISOString(),
          refreshToken: newSsoOidcToken.refreshToken
        });
      } catch (error) {
      }
      return {
        token: newSsoOidcToken.accessToken,
        expiration: newTokenExpiration
      };
    } catch (error) {
      validateTokenExpiry(existingToken);
      return existingToken;
    }
  }, "fromSso");
  var fromStatic = __name(({ token }) => async () => {
    if (!token || !token.token) {
      throw new import_property_provider.TokenProviderError(`Please pass a valid token to fromStatic`, false);
    }
    return token;
  }, "fromStatic");
  var nodeProvider = __name((init = {}) => (0, import_property_provider.memoize)((0, import_property_provider.chain)(fromSso(init), async () => {
    throw new import_property_provider.TokenProviderError("Could not load token from any providers", false);
  }), (token) => token.expiration !== undefined && token.expiration.getTime() - Date.now() < 300000, (token) => token.expiration !== undefined), "nodeProvider");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jsso
var require_dist_cjs54 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    fromSSO: () => fromSSO,
    isSsoProfile: () => isSsoProfile,
    validateSsoProfile: () => validateSsoProfile
  });
  module.exports = __toCommonJS(src_exports);
  var isSsoProfile = __name((arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string"), "isSsoProfile");
  var import_client_sso = require_dist_cjs52();
  var import_token_providers = require_dist_cjs53();
  var import_property_provider = require_dist_cjs25();
  var import_shared_ini_file_loader = require_dist_cjs36();
  var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
  var resolveSSOCredentials = __name(async ({
    ssoStartUrl,
    ssoSession,
    ssoAccountId,
    ssoRegion,
    ssoRoleName,
    ssoClient,
    profile
  }) => {
    var _a;
    let token;
    const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
    if (ssoSession) {
      try {
        const _token = await (0, import_token_providers.fromSso)({ profile })();
        token = {
          accessToken: _token.token,
          expiresAt: new Date(_token.expiration).toISOString()
        };
      } catch (e) {
        throw new import_property_provider.CredentialsProviderError(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
    } else {
      try {
        token = await (0, import_shared_ini_file_loader.getSSOTokenFromFile)(ssoStartUrl);
      } catch (e) {
        throw new import_property_provider.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
    }
    if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {
      throw new import_property_provider.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
    }
    const { accessToken } = token;
    const sso = ssoClient || new import_client_sso.SSOClient({ region: ssoRegion });
    let ssoResp;
    try {
      ssoResp = await sso.send(new import_client_sso.GetRoleCredentialsCommand({
        accountId: ssoAccountId,
        roleName: ssoRoleName,
        accessToken
      }));
    } catch (e) {
      throw import_property_provider.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);
    }
    const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
    const credentialScope = (_a = ssoResp == null ? undefined : ssoResp.roleCredentials) == null ? undefined : _a.credentialScope;
    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
      throw new import_property_provider.CredentialsProviderError("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);
    }
    return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration), credentialScope };
  }, "resolveSSOCredentials");
  var validateSsoProfile = __name((profile) => {
    const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
    if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
      throw new import_property_provider.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);
    }
    return profile;
  }, "validateSsoProfile");
  var fromSSO = __name((init = {}) => async () => {
    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, ssoSession } = init;
    const profileName = (0, import_shared_ini_file_loader.getProfileName)(init);
    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
      const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
      const profile = profiles[profileName];
      if (!profile) {
        throw new import_property_provider.CredentialsProviderError(`Profile ${profileName} was not found.`);
      }
      if (!isSsoProfile(profile)) {
        throw new import_property_provider.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);
      }
      if (profile == null ? undefined : profile.sso_session) {
        const ssoSessions = await (0, import_shared_ini_file_loader.loadSsoSessionData)(init);
        const session = ssoSessions[profile.sso_session];
        const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
        if (ssoRegion && ssoRegion !== session.sso_region) {
          throw new import_property_provider.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);
        }
        if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
          throw new import_property_provider.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);
        }
        profile.sso_region = session.sso_region;
        profile.sso_start_url = session.sso_start_url;
      }
      const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(profile);
      return resolveSSOCredentials({
        ssoStartUrl: sso_start_url,
        ssoSession: sso_session,
        ssoAccountId: sso_account_id,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name,
        ssoClient,
        profile: profileName
      });
    } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
      throw new import_property_provider.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');
    } else {
      return resolveSSOCredentials({
        ssoStartUrl,
        ssoSession,
        ssoAccountId,
        ssoRegion,
        ssoRoleName,
        ssoClient,
        profile: profileName
      });
    }
  }, "fromSSO");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver
var require_dist_cjs55 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    fromProcess: () => fromProcess
  });
  module.exports = __toCommonJS(src_exports);
  var import_shared_ini_file_loader = require_dist_cjs36();
  var import_property_provider = require_dist_cjs25();
  var import_child_process = __require("child_process");
  var import_util = __require("util");
  var getValidatedProcessCredentials = __name((profileName, data) => {
    if (data.Version !== 1) {
      throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
    }
    if (data.AccessKeyId === undefined || data.SecretAccessKey === undefined) {
      throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
    }
    if (data.Expiration) {
      const currentTime = new Date;
      const expireTime = new Date(data.Expiration);
      if (expireTime < currentTime) {
        throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
      }
    }
    return {
      accessKeyId: data.AccessKeyId,
      secretAccessKey: data.SecretAccessKey,
      ...data.SessionToken && { sessionToken: data.SessionToken },
      ...data.Expiration && { expiration: new Date(data.Expiration) },
      ...data.CredentialScope && { credentialScope: data.CredentialScope }
    };
  }, "getValidatedProcessCredentials");
  var resolveProcessCredentials = __name(async (profileName, profiles) => {
    const profile = profiles[profileName];
    if (profiles[profileName]) {
      const credentialProcess = profile["credential_process"];
      if (credentialProcess !== undefined) {
        const execPromise = (0, import_util.promisify)(import_child_process.exec);
        try {
          const { stdout } = await execPromise(credentialProcess);
          let data;
          try {
            data = JSON.parse(stdout.trim());
          } catch {
            throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
          }
          return getValidatedProcessCredentials(profileName, data);
        } catch (error) {
          throw new import_property_provider.CredentialsProviderError(error.message);
        }
      } else {
        throw new import_property_provider.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);
      }
    } else {
      throw new import_property_provider.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);
    }
  }, "resolveProcessCredentials");
  var fromProcess = __name((init = {}) => async () => {
    const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
    return resolveProcessCredentials((0, import_shared_ini_file_loader.getProfileName)(init), profiles);
  }, "fromProcess");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.jsnode.jsjs
var require_fromWebToken = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.fromWebToken = undefined;
  var property_provider_1 = require_dist_cjs25();
  var fromWebToken2 = (init) => () => {
    const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity } = init;
    if (!roleAssumerWithWebIdentity) {
      throw new property_provider_1.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity,` + ` but no role assumption callback was provided.`, false);
    }
    return roleAssumerWithWebIdentity({
      RoleArn: roleArn,
      RoleSessionName: roleSessionName !== null && roleSessionName !== undefined ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,
      WebIdentityToken: webIdentityToken,
      ProviderId: providerId,
      PolicyArns: policyArns,
      Policy: policy,
      DurationSeconds: durationSeconds
    });
  };
  exports.fromWebToken = fromWebToken2;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.jsnode.jsjss
var require_fromTokenFile = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.fromTokenFile = undefined;
  var property_provider_1 = require_dist_cjs25();
  var fs_1 = __require("fs");
  var fromWebToken_1 = require_fromWebToken();
  var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
  var ENV_ROLE_ARN = "AWS_ROLE_ARN";
  var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
  var fromTokenFile2 = (init = {}) => async () => {
    var _a, _b, _c;
    const webIdentityTokenFile = (_a = init === null || init === undefined ? undefined : init.webIdentityTokenFile) !== null && _a !== undefined ? _a : process.env[ENV_TOKEN_FILE];
    const roleArn = (_b = init === null || init === undefined ? undefined : init.roleArn) !== null && _b !== undefined ? _b : process.env[ENV_ROLE_ARN];
    const roleSessionName = (_c = init === null || init === undefined ? undefined : init.roleSessionName) !== null && _c !== undefined ? _c : process.env[ENV_ROLE_SESSION_NAME];
    if (!webIdentityTokenFile || !roleArn) {
      throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified");
    }
    return (0, fromWebToken_1.fromWebToken)({
      ...init,
      webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
      roleArn,
      roleSessionName
    })();
  };
  exports.fromTokenFile = fromTokenFile2;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.jsno
var require_dist_cjs56 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  module.exports = __toCommonJS(src_exports);
  __reExport(src_exports, require_fromTokenFile(), module.exports);
  __reExport(src_exports, require_fromWebToken(), module.exports);
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jsso
var require_dist_cjs57 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    fromIni: () => fromIni
  });
  module.exports = __toCommonJS(src_exports);
  var import_shared_ini_file_loader = require_dist_cjs36();
  var import_credential_provider_env = require_dist_cjs46();
  var import_credential_provider_imds = require_dist_cjs45();
  var import_property_provider = require_dist_cjs25();
  var resolveCredentialSource = __name((credentialSource, profileName) => {
    const sourceProvidersMap = {
      EcsContainer: import_credential_provider_imds.fromContainerMetadata,
      Ec2InstanceMetadata: import_credential_provider_imds.fromInstanceMetadata,
      Environment: import_credential_provider_env.fromEnv
    };
    if (credentialSource in sourceProvidersMap) {
      return sourceProvidersMap[credentialSource]();
    } else {
      throw new import_property_provider.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`);
    }
  }, "resolveCredentialSource");
  var isAssumeRoleProfile = __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg)), "isAssumeRoleProfile");
  var isAssumeRoleWithSourceProfile = __name((arg) => typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined", "isAssumeRoleWithSourceProfile");
  var isAssumeRoleWithProviderProfile = __name((arg) => typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined", "isAssumeRoleWithProviderProfile");
  var resolveAssumeRoleCredentials = __name(async (profileName, profiles, options, visitedProfiles = {}) => {
    const data = profiles[profileName];
    if (!options.roleAssumer) {
      throw new import_property_provider.CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);
    }
    const { source_profile } = data;
    if (source_profile && source_profile in visitedProfiles) {
      throw new import_property_provider.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${(0, import_shared_ini_file_loader.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), false);
    }
    const sourceCredsProvider = source_profile ? resolveProfileData(source_profile, profiles, options, {
      ...visitedProfiles,
      [source_profile]: true
    }) : resolveCredentialSource(data.credential_source, profileName)();
    const params = {
      RoleArn: data.role_arn,
      RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
      ExternalId: data.external_id,
      DurationSeconds: parseInt(data.duration_seconds || "3600", 10)
    };
    const { mfa_serial } = data;
    if (mfa_serial) {
      if (!options.mfaCodeProvider) {
        throw new import_property_provider.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);
      }
      params.SerialNumber = mfa_serial;
      params.TokenCode = await options.mfaCodeProvider(mfa_serial);
    }
    const sourceCreds = await sourceCredsProvider;
    return options.roleAssumer(sourceCreds, params);
  }, "resolveAssumeRoleCredentials");
  var import_credential_provider_process = require_dist_cjs55();
  var isProcessProfile = __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string", "isProcessProfile");
  var resolveProcessCredentials = __name(async (options, profile) => (0, import_credential_provider_process.fromProcess)({
    ...options,
    profile
  })(), "resolveProcessCredentials");
  var import_credential_provider_sso = require_dist_cjs54();
  var resolveSsoCredentials = __name((data) => {
    const { sso_start_url, sso_account_id, sso_session, sso_region, sso_role_name } = (0, import_credential_provider_sso.validateSsoProfile)(data);
    return (0, import_credential_provider_sso.fromSSO)({
      ssoStartUrl: sso_start_url,
      ssoAccountId: sso_account_id,
      ssoSession: sso_session,
      ssoRegion: sso_region,
      ssoRoleName: sso_role_name
    })();
  }, "resolveSsoCredentials");
  var isStaticCredsProfile = __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1, "isStaticCredsProfile");
  var resolveStaticCredentials = __name((profile) => Promise.resolve({
    accessKeyId: profile.aws_access_key_id,
    secretAccessKey: profile.aws_secret_access_key,
    sessionToken: profile.aws_session_token,
    credentialScope: profile.aws_credential_scope
  }), "resolveStaticCredentials");
  var import_credential_provider_web_identity = require_dist_cjs56();
  var isWebIdentityProfile = __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1, "isWebIdentityProfile");
  var resolveWebIdentityCredentials = __name(async (profile, options) => (0, import_credential_provider_web_identity.fromTokenFile)({
    webIdentityTokenFile: profile.web_identity_token_file,
    roleArn: profile.role_arn,
    roleSessionName: profile.role_session_name,
    roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity
  })(), "resolveWebIdentityCredentials");
  var resolveProfileData = __name(async (profileName, profiles, options, visitedProfiles = {}) => {
    const data = profiles[profileName];
    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {
      return resolveStaticCredentials(data);
    }
    if (isAssumeRoleProfile(data)) {
      return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);
    }
    if (isStaticCredsProfile(data)) {
      return resolveStaticCredentials(data);
    }
    if (isWebIdentityProfile(data)) {
      return resolveWebIdentityCredentials(data, options);
    }
    if (isProcessProfile(data)) {
      return resolveProcessCredentials(options, profileName);
    }
    if ((0, import_credential_provider_sso.isSsoProfile)(data)) {
      return resolveSsoCredentials(data);
    }
    throw new import_property_provider.CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);
  }, "resolveProfileData");
  var fromIni = __name((init = {}) => async () => {
    const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
    return resolveProfileData((0, import_shared_ini_file_loader.getProfileName)(init), profiles, init);
  }, "fromIni");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssol
var require_dist_cjs58 = __commonJS((exports, module) => {
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    credentialsTreatedAsExpired: () => credentialsTreatedAsExpired,
    credentialsWillNeedRefresh: () => credentialsWillNeedRefresh,
    defaultProvider: () => defaultProvider
  });
  module.exports = __toCommonJS(src_exports);
  var import_shared_ini_file_loader = require_dist_cjs36();
  var import_property_provider = require_dist_cjs25();
  var ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
  var remoteProvider = __name(async (init) => {
    const { ENV_CMDS_FULL_URI, ENV_CMDS_RELATIVE_URI, fromContainerMetadata, fromInstanceMetadata } = await Promise.resolve().then(() => __toESM2(require_dist_cjs45()));
    if (process.env[ENV_CMDS_RELATIVE_URI] || process.env[ENV_CMDS_FULL_URI]) {
      return fromContainerMetadata(init);
    }
    if (process.env[ENV_IMDS_DISABLED]) {
      return async () => {
        throw new import_property_provider.CredentialsProviderError("EC2 Instance Metadata Service access disabled");
      };
    }
    return fromInstanceMetadata(init);
  }, "remoteProvider");
  var defaultProvider = __name((init = {}) => (0, import_property_provider.memoize)((0, import_property_provider.chain)(...init.profile || process.env[import_shared_ini_file_loader.ENV_PROFILE] ? [] : [
    async () => {
      const { fromEnv } = await Promise.resolve().then(() => __toESM2(require_dist_cjs46()));
      return fromEnv()();
    }
  ], async () => {
    const { fromSSO } = await Promise.resolve().then(() => __toESM2(require_dist_cjs54()));
    return fromSSO(init)();
  }, async () => {
    const { fromIni } = await Promise.resolve().then(() => __toESM2(require_dist_cjs57()));
    return fromIni(init)();
  }, async () => {
    const { fromProcess } = await Promise.resolve().then(() => __toESM2(require_dist_cjs55()));
    return fromProcess(init)();
  }, async () => {
    const { fromTokenFile: fromTokenFile2 } = await Promise.resolve().then(() => __toESM2(require_dist_cjs56()));
    return fromTokenFile2(init)();
  }, async () => {
    return (await remoteProvider(init))();
  }, async () => {
    throw new import_property_provider.CredentialsProviderError("Could not load credentials from any providers", false);
  }), credentialsTreatedAsExpired, credentialsWillNeedRefresh), "defaultProvider");
  var credentialsWillNeedRefresh = __name((credentials) => (credentials == null ? undefined : credentials.expiration) !== undefined, "credentialsWillNeedRefresh");
  var credentialsTreatedAsExpired = __name((credentials) => (credentials == null ? undefined : credentials.expiration) !== undefined && credentials.expiration.getTime() - Date.now() < 300000, "credentialsTreatedAsExpired");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_ruleset2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ruleSet = undefined;
  var F = "required";
  var G = "type";
  var H = "fn";
  var I = "argv";
  var J = "ref";
  var a = false;
  var b = true;
  var c = "booleanEquals";
  var d = "stringEquals";
  var e = "sigv4";
  var f = "sts";
  var g = "us-east-1";
  var h = "endpoint";
  var i = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
  var j = "tree";
  var k = "error";
  var l = "getAttr";
  var m = { [F]: false, [G]: "String" };
  var n = { [F]: true, default: false, [G]: "Boolean" };
  var o = { [J]: "Endpoint" };
  var p = { [H]: "isSet", [I]: [{ [J]: "Region" }] };
  var q = { [J]: "Region" };
  var r = { [H]: "aws.partition", [I]: [q], assign: "PartitionResult" };
  var s = { [J]: "UseFIPS" };
  var t = { [J]: "UseDualStack" };
  var u = { url: "https://sts.amazonaws.com", properties: { authSchemes: [{ name: e, signingName: f, signingRegion: g }] }, headers: {} };
  var v = {};
  var w = { conditions: [{ [H]: d, [I]: [q, "aws-global"] }], [h]: u, [G]: h };
  var x = { [H]: c, [I]: [s, true] };
  var y = { [H]: c, [I]: [t, true] };
  var z = { [H]: l, [I]: [{ [J]: "PartitionResult" }, "supportsFIPS"] };
  var A = { [J]: "PartitionResult" };
  var B = { [H]: c, [I]: [true, { [H]: l, [I]: [A, "supportsDualStack"] }] };
  var C = [{ [H]: "isSet", [I]: [o] }];
  var D = [x];
  var E = [y];
  var _data = { version: "1.0", parameters: { Region: m, UseDualStack: n, UseFIPS: n, Endpoint: m, UseGlobalEndpoint: n }, rules: [{ conditions: [{ [H]: c, [I]: [{ [J]: "UseGlobalEndpoint" }, b] }, { [H]: "not", [I]: C }, p, r, { [H]: c, [I]: [s, a] }, { [H]: c, [I]: [t, a] }], rules: [{ conditions: [{ [H]: d, [I]: [q, "ap-northeast-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-south-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-southeast-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-southeast-2"] }], endpoint: u, [G]: h }, w, { conditions: [{ [H]: d, [I]: [q, "ca-central-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-central-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-north-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-2"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-3"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "sa-east-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, g] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-east-2"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-west-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-west-2"] }], endpoint: u, [G]: h }, { endpoint: { url: i, properties: { authSchemes: [{ name: e, signingName: f, signingRegion: "{Region}" }] }, headers: v }, [G]: h }], [G]: j }, { conditions: C, rules: [{ conditions: D, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [G]: k }, { conditions: E, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [G]: k }, { endpoint: { url: o, properties: v, headers: v }, [G]: h }], [G]: j }, { conditions: [p], rules: [{ conditions: [r], rules: [{ conditions: [x, y], rules: [{ conditions: [{ [H]: c, [I]: [b, z] }, B], rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [G]: k }], [G]: j }, { conditions: D, rules: [{ conditions: [{ [H]: c, [I]: [z, b] }], rules: [{ conditions: [{ [H]: d, [I]: [{ [H]: l, [I]: [A, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://sts.{Region}.amazonaws.com", properties: v, headers: v }, [G]: h }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "FIPS is enabled but this partition does not support FIPS", [G]: k }], [G]: j }, { conditions: E, rules: [{ conditions: [B], rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "DualStack is enabled but this partition does not support DualStack", [G]: k }], [G]: j }, w, { endpoint: { url: i, properties: v, headers: v }, [G]: h }], [G]: j }], [G]: j }, { error: "Invalid Configuration: Missing Region", [G]: k }] };
  exports.ruleSet = _data;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.js
var require_endpointResolver2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.defaultEndpointResolver = undefined;
  var util_endpoints_1 = require_dist_cjs27();
  var ruleset_1 = require_ruleset2();
  var defaultEndpointResolver = (endpointParams, context = {}) => {
    return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
      endpointParams,
      logger: context.logger
    });
  };
  exports.defaultEndpointResolver = defaultEndpointResolver;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolv
var require_runtimeConfig_shared2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var core_1 = require_dist_cjs44();
  var core_2 = require_dist_cjs43();
  var smithy_client_1 = require_dist_cjs16();
  var url_parser_1 = require_dist_cjs39();
  var util_base64_1 = require_dist_cjs10();
  var util_utf8_1 = require_dist_cjs11();
  var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider();
  var endpointResolver_1 = require_endpointResolver2();
  var getRuntimeConfig = (config) => {
    return {
      apiVersion: "2011-06-15",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      extensions: config?.extensions ?? [],
      httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSTSHttpAuthSchemeProvider,
      httpAuthSchemes: config?.httpAuthSchemes ?? [
        {
          schemeId: "aws.auth#sigv4",
          identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
          signer: new core_1.AwsSdkSigV4Signer
        },
        {
          schemeId: "smithy.api#noAuth",
          identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
          signer: new core_2.NoAuthSigner
        }
      ],
      logger: config?.logger ?? new smithy_client_1.NoOpLogger,
      serviceId: config?.serviceId ?? "STS",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset
var require_runtimeConfig2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var tslib_1 = require_tslib2();
  var package_json_1 = tslib_1.__importDefault(require_package3());
  var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
  var core_1 = require_dist_cjs44();
  var credential_provider_node_1 = require_dist_cjs58();
  var util_user_agent_node_1 = require_dist_cjs47();
  var config_resolver_1 = require_dist_cjs30();
  var core_2 = require_dist_cjs43();
  var hash_node_1 = require_dist_cjs48();
  var middleware_retry_1 = require_dist_cjs35();
  var node_config_provider_1 = require_dist_cjs37();
  var node_http_handler_1 = require_dist_cjs14();
  var util_body_length_node_1 = require_dist_cjs49();
  var util_retry_1 = require_dist_cjs34();
  var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
  var smithy_client_1 = require_dist_cjs16();
  var util_defaults_mode_node_1 = require_dist_cjs50();
  var smithy_client_2 = require_dist_cjs16();
  var getRuntimeConfig = (config) => {
    (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
    const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
    (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
    return {
      ...clientSharedValues,
      ...config,
      runtime: "node",
      defaultsMode,
      bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
      credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, defaultStsRoleAssumers_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
      defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
      httpAuthSchemes: config?.httpAuthSchemes ?? [
        {
          schemeId: "aws.auth#sigv4",
          identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4") || (async (idProps) => await (0, defaultStsRoleAssumers_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider)(idProps?.__config || {})()),
          signer: new core_1.AwsSdkSigV4Signer
        },
        {
          schemeId: "smithy.api#noAuth",
          identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
          signer: new core_2.NoAuthSigner
        }
      ],
      maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
      region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
      requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
      retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
        ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
        default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
      }),
      sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
      streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
      useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
      useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.jsnode.jsjss
var require_httpAuthExtensionConfiguration = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.resolveHttpAuthRuntimeConfig = exports.getHttpAuthExtensionConfiguration = undefined;
  var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
      setHttpAuthScheme(httpAuthScheme) {
        const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
        if (index === -1) {
          _httpAuthSchemes.push(httpAuthScheme);
        } else {
          _httpAuthSchemes.splice(index, 1, httpAuthScheme);
        }
      },
      httpAuthSchemes() {
        return _httpAuthSchemes;
      },
      setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
        _httpAuthSchemeProvider = httpAuthSchemeProvider;
      },
      httpAuthSchemeProvider() {
        return _httpAuthSchemeProvider;
      },
      setCredentials(credentials) {
        _credentials = credentials;
      },
      credentials() {
        return _credentials;
      }
    };
  };
  exports.getHttpAuthExtensionConfiguration = getHttpAuthExtensionConfiguration;
  var resolveHttpAuthRuntimeConfig = (config) => {
    return {
      httpAuthSchemes: config.httpAuthSchemes(),
      httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
      credentials: config.credentials()
    };
  };
  exports.resolveHttpAuthRuntimeConfig = resolveHttpAuthRuntimeConfig;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jss
var require_runtimeExtensions = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.resolveRuntimeExtensions = undefined;
  var region_config_resolver_1 = require_dist_cjs51();
  var protocol_http_1 = require_dist_cjs2();
  var smithy_client_1 = require_dist_cjs16();
  var httpAuthExtensionConfiguration_1 = require_httpAuthExtensionConfiguration();
  var asPartial = (t) => t;
  var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = {
      ...asPartial((0, region_config_resolver_1.getAwsRegionExtensionConfiguration)(runtimeConfig)),
      ...asPartial((0, smithy_client_1.getDefaultExtensionConfiguration)(runtimeConfig)),
      ...asPartial((0, protocol_http_1.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
      ...asPartial((0, httpAuthExtensionConfiguration_1.getHttpAuthExtensionConfiguration)(runtimeConfig))
    };
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return {
      ...runtimeConfig,
      ...(0, region_config_resolver_1.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
      ...(0, smithy_client_1.resolveDefaultRuntimeConfig)(extensionConfiguration),
      ...(0, protocol_http_1.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
      ...(0, httpAuthExtensionConfiguration_1.resolveHttpAuthRuntimeConfig)(extensionConfiguration)
    };
  };
  exports.resolveRuntimeExtensions = resolveRuntimeExtensions;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rul
var require_STSClient = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.STSClient = exports.__Client = undefined;
  var middleware_host_header_1 = require_dist_cjs4();
  var middleware_logger_1 = require_dist_cjs5();
  var middleware_recursion_detection_1 = require_dist_cjs6();
  var middleware_user_agent_1 = require_dist_cjs29();
  var config_resolver_1 = require_dist_cjs30();
  var core_1 = require_dist_cjs43();
  var middleware_content_length_1 = require_dist_cjs32();
  var middleware_endpoint_1 = require_dist_cjs41();
  var middleware_retry_1 = require_dist_cjs35();
  var smithy_client_1 = require_dist_cjs16();
  Object.defineProperty(exports, "__Client", { enumerable: true, get: function() {
    return smithy_client_1.Client;
  } });
  var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider();
  var EndpointParameters_1 = require_EndpointParameters();
  var runtimeConfig_1 = require_runtimeConfig2();
  var runtimeExtensions_1 = require_runtimeExtensions();

  class STSClient2 extends smithy_client_1.Client {
    constructor(...[configuration]) {
      const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});
      const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
      const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
      const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
      const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
      const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
      const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
      const _config_7 = (0, httpAuthSchemeProvider_1.resolveHttpAuthSchemeConfig)(_config_6);
      const _config_8 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_7, configuration?.extensions || []);
      super(_config_8);
      this.config = _config_8;
      this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
      this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
      this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
      this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
      this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
      this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      this.middlewareStack.use((0, core_1.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      }));
      this.middlewareStack.use((0, core_1.getHttpSigningPlugin)(this.config));
    }
    destroy() {
      super.destroy();
    }
    getDefaultHttpAuthSchemeParametersProvider() {
      return httpAuthSchemeProvider_1.defaultSTSHttpAuthSchemeParametersProvider;
    }
    getIdentityProviderConfigProvider() {
      return async (config) => new core_1.DefaultIdentityProviderConfig({
        "aws.auth#sigv4": config.credentials
      });
    }
  }
  exports.STSClient = STSClient2;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint
var require_dist_cjs59 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    AssumeRoleWithSAMLCommand: () => AssumeRoleWithSAMLCommand,
    ClientInputEndpointParameters: () => import_EndpointParameters7.ClientInputEndpointParameters,
    DecodeAuthorizationMessageCommand: () => DecodeAuthorizationMessageCommand,
    GetAccessKeyInfoCommand: () => GetAccessKeyInfoCommand,
    GetCallerIdentityCommand: () => GetCallerIdentityCommand,
    GetFederationTokenCommand: () => GetFederationTokenCommand,
    GetSessionTokenCommand: () => GetSessionTokenCommand,
    RuntimeExtension: () => import_runtimeExtensions.RuntimeExtension,
    STS: () => STS,
    STSServiceException: () => import_STSServiceException.STSServiceException,
    decorateDefaultCredentialProvider: () => decorateDefaultCredentialProvider,
    getDefaultRoleAssumer: () => getDefaultRoleAssumer,
    getDefaultRoleAssumerWithWebIdentity: () => getDefaultRoleAssumerWithWebIdentity
  });
  module.exports = __toCommonJS(src_exports);
  __reExport(src_exports, require_STSClient(), module.exports);
  var import_AssumeRoleCommand = require_AssumeRoleCommand();
  var import_middleware_endpoint = require_dist_cjs41();
  var import_middleware_serde = require_dist_cjs40();
  var import_smithy_client = require_dist_cjs16();
  var import_types = require_dist_cjs();
  var import_EndpointParameters = require_EndpointParameters();
  var import_models_0 = require_models_0();
  var import_Aws_query = require_Aws_query();
  var _AssumeRoleWithSAMLCommand = class _AssumeRoleWithSAMLCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...import_EndpointParameters.commonParams
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSecurityTokenServiceV20110615", "AssumeRoleWithSAML", {}).n("STSClient", "AssumeRoleWithSAMLCommand").f(import_models_0.AssumeRoleWithSAMLRequestFilterSensitiveLog, import_models_0.AssumeRoleWithSAMLResponseFilterSensitiveLog).ser(import_Aws_query.se_AssumeRoleWithSAMLCommand).de(import_Aws_query.de_AssumeRoleWithSAMLCommand).build() {
  };
  __name(_AssumeRoleWithSAMLCommand, "AssumeRoleWithSAMLCommand");
  var AssumeRoleWithSAMLCommand = _AssumeRoleWithSAMLCommand;
  var import_AssumeRoleWithWebIdentityCommand = require_AssumeRoleWithWebIdentityCommand();
  var import_EndpointParameters2 = require_EndpointParameters();
  var import_Aws_query2 = require_Aws_query();
  var _DecodeAuthorizationMessageCommand = class _DecodeAuthorizationMessageCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...import_EndpointParameters2.commonParams
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSecurityTokenServiceV20110615", "DecodeAuthorizationMessage", {}).n("STSClient", "DecodeAuthorizationMessageCommand").f(undefined, undefined).ser(import_Aws_query2.se_DecodeAuthorizationMessageCommand).de(import_Aws_query2.de_DecodeAuthorizationMessageCommand).build() {
  };
  __name(_DecodeAuthorizationMessageCommand, "DecodeAuthorizationMessageCommand");
  var DecodeAuthorizationMessageCommand = _DecodeAuthorizationMessageCommand;
  var import_EndpointParameters3 = require_EndpointParameters();
  var import_Aws_query3 = require_Aws_query();
  var _GetAccessKeyInfoCommand = class _GetAccessKeyInfoCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...import_EndpointParameters3.commonParams
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSecurityTokenServiceV20110615", "GetAccessKeyInfo", {}).n("STSClient", "GetAccessKeyInfoCommand").f(undefined, undefined).ser(import_Aws_query3.se_GetAccessKeyInfoCommand).de(import_Aws_query3.de_GetAccessKeyInfoCommand).build() {
  };
  __name(_GetAccessKeyInfoCommand, "GetAccessKeyInfoCommand");
  var GetAccessKeyInfoCommand = _GetAccessKeyInfoCommand;
  var import_EndpointParameters4 = require_EndpointParameters();
  var import_Aws_query4 = require_Aws_query();
  var _GetCallerIdentityCommand = class _GetCallerIdentityCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...import_EndpointParameters4.commonParams
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSecurityTokenServiceV20110615", "GetCallerIdentity", {}).n("STSClient", "GetCallerIdentityCommand").f(undefined, undefined).ser(import_Aws_query4.se_GetCallerIdentityCommand).de(import_Aws_query4.de_GetCallerIdentityCommand).build() {
  };
  __name(_GetCallerIdentityCommand, "GetCallerIdentityCommand");
  var GetCallerIdentityCommand = _GetCallerIdentityCommand;
  var import_EndpointParameters5 = require_EndpointParameters();
  var import_models_02 = require_models_0();
  var import_Aws_query5 = require_Aws_query();
  var _GetFederationTokenCommand = class _GetFederationTokenCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...import_EndpointParameters5.commonParams
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSecurityTokenServiceV20110615", "GetFederationToken", {}).n("STSClient", "GetFederationTokenCommand").f(undefined, import_models_02.GetFederationTokenResponseFilterSensitiveLog).ser(import_Aws_query5.se_GetFederationTokenCommand).de(import_Aws_query5.de_GetFederationTokenCommand).build() {
  };
  __name(_GetFederationTokenCommand, "GetFederationTokenCommand");
  var GetFederationTokenCommand = _GetFederationTokenCommand;
  var import_EndpointParameters6 = require_EndpointParameters();
  var import_models_03 = require_models_0();
  var import_Aws_query6 = require_Aws_query();
  var _GetSessionTokenCommand = class _GetSessionTokenCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...import_EndpointParameters6.commonParams
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AWSSecurityTokenServiceV20110615", "GetSessionToken", {}).n("STSClient", "GetSessionTokenCommand").f(undefined, import_models_03.GetSessionTokenResponseFilterSensitiveLog).ser(import_Aws_query6.se_GetSessionTokenCommand).de(import_Aws_query6.de_GetSessionTokenCommand).build() {
  };
  __name(_GetSessionTokenCommand, "GetSessionTokenCommand");
  var GetSessionTokenCommand = _GetSessionTokenCommand;
  var import_STSClient = require_STSClient();
  var commands = {
    AssumeRoleCommand: import_AssumeRoleCommand.AssumeRoleCommand,
    AssumeRoleWithSAMLCommand,
    AssumeRoleWithWebIdentityCommand: import_AssumeRoleWithWebIdentityCommand.AssumeRoleWithWebIdentityCommand,
    DecodeAuthorizationMessageCommand,
    GetAccessKeyInfoCommand,
    GetCallerIdentityCommand,
    GetFederationTokenCommand,
    GetSessionTokenCommand
  };
  var _STS = class _STS2 extends import_STSClient.STSClient {
  };
  __name(_STS, "STS");
  var STS = _STS;
  (0, import_smithy_client.createAggregatedClient)(commands, STS);
  var import_EndpointParameters7 = require_EndpointParameters();
  var import_runtimeExtensions = require_runtimeExtensions();
  var commands_exports = {};
  __export2(commands_exports, {
    AssumeRoleWithSAMLCommand: () => AssumeRoleWithSAMLCommand,
    DecodeAuthorizationMessageCommand: () => DecodeAuthorizationMessageCommand,
    GetAccessKeyInfoCommand: () => GetAccessKeyInfoCommand,
    GetCallerIdentityCommand: () => GetCallerIdentityCommand,
    GetFederationTokenCommand: () => GetFederationTokenCommand,
    GetSessionTokenCommand: () => GetSessionTokenCommand
  });
  __reExport(commands_exports, require_AssumeRoleCommand());
  __reExport(commands_exports, require_AssumeRoleWithWebIdentityCommand());
  __reExport(src_exports, commands_exports, module.exports);
  var models_exports = {};
  __reExport(models_exports, require_models_0());
  __reExport(src_exports, models_exports, module.exports);
  var import_util_endpoints = require_dist_cjs28();
  var import_defaultStsRoleAssumers = require_defaultStsRoleAssumers();
  var import_STSClient2 = require_STSClient();
  var getCustomizableStsClientCtor = __name((baseCtor, customizations) => {
    var _a;
    if (!customizations)
      return baseCtor;
    else
      return _a = class extends baseCtor {
        constructor(config) {
          super(config);
          for (const customization of customizations) {
            this.middlewareStack.use(customization);
          }
        }
      }, __name(_a, "CustomizableSTSClient"), _a;
  }, "getCustomizableStsClientCtor");
  var getDefaultRoleAssumer = __name((stsOptions = {}, stsPlugins) => (0, import_defaultStsRoleAssumers.getDefaultRoleAssumer)(stsOptions, getCustomizableStsClientCtor(import_STSClient2.STSClient, stsPlugins)), "getDefaultRoleAssumer");
  var getDefaultRoleAssumerWithWebIdentity = __name((stsOptions = {}, stsPlugins) => (0, import_defaultStsRoleAssumers.getDefaultRoleAssumerWithWebIdentity)(stsOptions, getCustomizableStsClientCtor(import_STSClient2.STSClient, stsPlugins)), "getDefaultRoleAssumerWithWebIdentity");
  var decorateDefaultCredentialProvider = __name((provider) => (input) => provider({
    roleAssumer: getDefaultRoleAssumer(input),
    roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input),
    ...input
  }), "decorateDefaultCredentialProvider");
  var import_STSServiceException = require_STSServiceException();
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolve
var require_dist_cjs60 = __commonJS((exports, module) => {
  var resolveBucketEndpointConfig = function(input) {
    const {
      bucketEndpoint = false,
      forcePathStyle = false,
      useAccelerateEndpoint = false,
      useArnRegion = false,
      disableMultiregionAccessPoints = false
    } = input;
    return {
      ...input,
      bucketEndpoint,
      forcePathStyle,
      useAccelerateEndpoint,
      useArnRegion: typeof useArnRegion === "function" ? useArnRegion : () => Promise.resolve(useArnRegion),
      disableMultiregionAccessPoints: typeof disableMultiregionAccessPoints === "function" ? disableMultiregionAccessPoints : () => Promise.resolve(disableMultiregionAccessPoints)
    };
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS: () => NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS,
    NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME: () => NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME,
    NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME: () => NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME,
    NODE_USE_ARN_REGION_CONFIG_OPTIONS: () => NODE_USE_ARN_REGION_CONFIG_OPTIONS,
    NODE_USE_ARN_REGION_ENV_NAME: () => NODE_USE_ARN_REGION_ENV_NAME,
    NODE_USE_ARN_REGION_INI_NAME: () => NODE_USE_ARN_REGION_INI_NAME,
    bucketEndpointMiddleware: () => bucketEndpointMiddleware,
    bucketEndpointMiddlewareOptions: () => bucketEndpointMiddlewareOptions,
    bucketHostname: () => bucketHostname,
    getArnResources: () => getArnResources,
    getBucketEndpointPlugin: () => getBucketEndpointPlugin,
    getSuffixForArnEndpoint: () => getSuffixForArnEndpoint,
    resolveBucketEndpointConfig: () => resolveBucketEndpointConfig,
    validateAccountId: () => validateAccountId,
    validateDNSHostLabel: () => validateDNSHostLabel,
    validateNoDualstack: () => validateNoDualstack,
    validateNoFIPS: () => validateNoFIPS,
    validateOutpostService: () => validateOutpostService,
    validatePartition: () => validatePartition,
    validateRegion: () => validateRegion
  });
  module.exports = __toCommonJS(src_exports);
  var import_util_config_provider = require_dist_cjs22();
  var NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME = "AWS_S3_DISABLE_MULTIREGION_ACCESS_POINTS";
  var NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME = "s3_disable_multiregion_access_points";
  var NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => (0, import_util_config_provider.booleanSelector)(env, NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME, import_util_config_provider.SelectorType.ENV),
    configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME, import_util_config_provider.SelectorType.CONFIG),
    default: false
  };
  var NODE_USE_ARN_REGION_ENV_NAME = "AWS_S3_USE_ARN_REGION";
  var NODE_USE_ARN_REGION_INI_NAME = "s3_use_arn_region";
  var NODE_USE_ARN_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => (0, import_util_config_provider.booleanSelector)(env, NODE_USE_ARN_REGION_ENV_NAME, import_util_config_provider.SelectorType.ENV),
    configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, NODE_USE_ARN_REGION_INI_NAME, import_util_config_provider.SelectorType.CONFIG),
    default: false
  };
  var import_util_arn_parser = require_dist_cjs23();
  var import_protocol_http = require_dist_cjs2();
  var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
  var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
  var DOTS_PATTERN = /\.\./;
  var DOT_PATTERN = /\./;
  var S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
  var S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\.amazonaws\.com$/;
  var AWS_PARTITION_SUFFIX = "amazonaws.com";
  var isBucketNameOptions = __name((options) => typeof options.bucketName === "string", "isBucketNameOptions");
  var isDnsCompatibleBucketName = __name((bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName), "isDnsCompatibleBucketName");
  var getRegionalSuffix = __name((hostname) => {
    const parts = hostname.match(S3_HOSTNAME_PATTERN);
    return [parts[4], hostname.replace(new RegExp(`^${parts[0]}`), "")];
  }, "getRegionalSuffix");
  var getSuffix = __name((hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? ["us-east-1", AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname), "getSuffix");
  var getSuffixForArnEndpoint = __name((hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [hostname.replace(`.${AWS_PARTITION_SUFFIX}`, ""), AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname), "getSuffixForArnEndpoint");
  var validateArnEndpointOptions = __name((options) => {
    if (options.pathStyleEndpoint) {
      throw new Error("Path-style S3 endpoint is not supported when bucket is an ARN");
    }
    if (options.accelerateEndpoint) {
      throw new Error("Accelerate endpoint is not supported when bucket is an ARN");
    }
    if (!options.tlsCompatible) {
      throw new Error("HTTPS is required when bucket is an ARN");
    }
  }, "validateArnEndpointOptions");
  var validateService = __name((service) => {
    if (service !== "s3" && service !== "s3-outposts" && service !== "s3-object-lambda") {
      throw new Error("Expect 's3' or 's3-outposts' or 's3-object-lambda' in ARN service component");
    }
  }, "validateService");
  var validateS3Service = __name((service) => {
    if (service !== "s3") {
      throw new Error("Expect 's3' in Accesspoint ARN service component");
    }
  }, "validateS3Service");
  var validateOutpostService = __name((service) => {
    if (service !== "s3-outposts") {
      throw new Error("Expect 's3-posts' in Outpost ARN service component");
    }
  }, "validateOutpostService");
  var validatePartition = __name((partition, options) => {
    if (partition !== options.clientPartition) {
      throw new Error(`Partition in ARN is incompatible, got "${partition}" but expected "${options.clientPartition}"`);
    }
  }, "validatePartition");
  var validateRegion = __name((region, options) => {
    if (region === "") {
      throw new Error("ARN region is empty");
    }
    if (options.useFipsEndpoint) {
      if (!options.allowFipsRegion) {
        throw new Error("FIPS region is not supported");
      } else if (!isEqualRegions(region, options.clientRegion)) {
        throw new Error(`Client FIPS region ${options.clientRegion} doesn't match region ${region} in ARN`);
      }
    }
    if (!options.useArnRegion && !isEqualRegions(region, options.clientRegion || "") && !isEqualRegions(region, options.clientSigningRegion || "")) {
      throw new Error(`Region in ARN is incompatible, got ${region} but expected ${options.clientRegion}`);
    }
  }, "validateRegion");
  var validateRegionalClient = __name((region) => {
    if (["s3-external-1", "aws-global"].includes(region)) {
      throw new Error(`Client region ${region} is not regional`);
    }
  }, "validateRegionalClient");
  var isEqualRegions = __name((regionA, regionB) => regionA === regionB, "isEqualRegions");
  var validateAccountId = __name((accountId) => {
    if (!/[0-9]{12}/.exec(accountId)) {
      throw new Error("Access point ARN accountID does not match regex '[0-9]{12}'");
    }
  }, "validateAccountId");
  var validateDNSHostLabel = __name((label, options = { tlsCompatible: true }) => {
    if (label.length >= 64 || !/^[a-z0-9][a-z0-9.-]*[a-z0-9]$/.test(label) || /(\d+\.){3}\d+/.test(label) || /[.-]{2}/.test(label) || (options == null ? undefined : options.tlsCompatible) && DOT_PATTERN.test(label)) {
      throw new Error(`Invalid DNS label ${label}`);
    }
  }, "validateDNSHostLabel");
  var validateCustomEndpoint = __name((options) => {
    if (options.isCustomEndpoint) {
      if (options.dualstackEndpoint)
        throw new Error("Dualstack endpoint is not supported with custom endpoint");
      if (options.accelerateEndpoint)
        throw new Error("Accelerate endpoint is not supported with custom endpoint");
    }
  }, "validateCustomEndpoint");
  var getArnResources = __name((resource) => {
    const delimiter = resource.includes(":") ? ":" : "/";
    const [resourceType, ...rest] = resource.split(delimiter);
    if (resourceType === "accesspoint") {
      if (rest.length !== 1 || rest[0] === "") {
        throw new Error(`Access Point ARN should have one resource accesspoint${delimiter}{accesspointname}`);
      }
      return { accesspointName: rest[0] };
    } else if (resourceType === "outpost") {
      if (!rest[0] || rest[1] !== "accesspoint" || !rest[2] || rest.length !== 3) {
        throw new Error(`Outpost ARN should have resource outpost${delimiter}{outpostId}${delimiter}accesspoint${delimiter}{accesspointName}`);
      }
      const [outpostId, _, accesspointName] = rest;
      return { outpostId, accesspointName };
    } else {
      throw new Error(`ARN resource should begin with 'accesspoint${delimiter}' or 'outpost${delimiter}'`);
    }
  }, "getArnResources");
  var validateNoDualstack = __name((dualstackEndpoint) => {
    if (dualstackEndpoint)
      throw new Error("Dualstack endpoint is not supported with Outpost or Multi-region Access Point ARN.");
  }, "validateNoDualstack");
  var validateNoFIPS = __name((useFipsEndpoint) => {
    if (useFipsEndpoint)
      throw new Error(`FIPS region is not supported with Outpost.`);
  }, "validateNoFIPS");
  var validateMrapAlias = __name((name) => {
    try {
      name.split(".").forEach((label) => {
        validateDNSHostLabel(label);
      });
    } catch (e) {
      throw new Error(`"${name}" is not a DNS compatible name.`);
    }
  }, "validateMrapAlias");
  var bucketHostname = __name((options) => {
    validateCustomEndpoint(options);
    return isBucketNameOptions(options) ? getEndpointFromBucketName(options) : getEndpointFromArn(options);
  }, "bucketHostname");
  var getEndpointFromBucketName = __name(({
    accelerateEndpoint = false,
    clientRegion: region,
    baseHostname,
    bucketName,
    dualstackEndpoint = false,
    fipsEndpoint = false,
    pathStyleEndpoint = false,
    tlsCompatible = true,
    isCustomEndpoint = false
  }) => {
    const [clientRegion, hostnameSuffix] = isCustomEndpoint ? [region, baseHostname] : getSuffix(baseHostname);
    if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || tlsCompatible && DOT_PATTERN.test(bucketName)) {
      return {
        bucketEndpoint: false,
        hostname: dualstackEndpoint ? `s3.dualstack.${clientRegion}.${hostnameSuffix}` : baseHostname
      };
    }
    if (accelerateEndpoint) {
      baseHostname = `s3-accelerate${dualstackEndpoint ? ".dualstack" : ""}.${hostnameSuffix}`;
    } else if (dualstackEndpoint) {
      baseHostname = `s3.dualstack.${clientRegion}.${hostnameSuffix}`;
    }
    return {
      bucketEndpoint: true,
      hostname: `${bucketName}.${baseHostname}`
    };
  }, "getEndpointFromBucketName");
  var getEndpointFromArn = __name((options) => {
    const { isCustomEndpoint, baseHostname, clientRegion } = options;
    const hostnameSuffix = isCustomEndpoint ? baseHostname : getSuffixForArnEndpoint(baseHostname)[1];
    const {
      pathStyleEndpoint,
      accelerateEndpoint = false,
      fipsEndpoint = false,
      tlsCompatible = true,
      bucketName,
      clientPartition = "aws"
    } = options;
    validateArnEndpointOptions({ pathStyleEndpoint, accelerateEndpoint, tlsCompatible });
    const { service, partition, accountId, region, resource } = bucketName;
    validateService(service);
    validatePartition(partition, { clientPartition });
    validateAccountId(accountId);
    const { accesspointName, outpostId } = getArnResources(resource);
    if (service === "s3-object-lambda") {
      return getEndpointFromObjectLambdaArn({ ...options, tlsCompatible, bucketName, accesspointName, hostnameSuffix });
    }
    if (region === "") {
      return getEndpointFromMRAPArn({ ...options, clientRegion, mrapAlias: accesspointName, hostnameSuffix });
    }
    if (outpostId) {
      return getEndpointFromOutpostArn({ ...options, clientRegion, outpostId, accesspointName, hostnameSuffix });
    }
    return getEndpointFromAccessPointArn({ ...options, clientRegion, accesspointName, hostnameSuffix });
  }, "getEndpointFromArn");
  var getEndpointFromObjectLambdaArn = __name(({
    dualstackEndpoint = false,
    fipsEndpoint = false,
    tlsCompatible = true,
    useArnRegion,
    clientRegion,
    clientSigningRegion = clientRegion,
    accesspointName,
    bucketName,
    hostnameSuffix
  }) => {
    const { accountId, region, service } = bucketName;
    validateRegionalClient(clientRegion);
    validateRegion(region, {
      useArnRegion,
      clientRegion,
      clientSigningRegion,
      allowFipsRegion: true,
      useFipsEndpoint: fipsEndpoint
    });
    validateNoDualstack(dualstackEndpoint);
    const DNSHostLabel = `${accesspointName}-${accountId}`;
    validateDNSHostLabel(DNSHostLabel, { tlsCompatible });
    const endpointRegion = useArnRegion ? region : clientRegion;
    const signingRegion = useArnRegion ? region : clientSigningRegion;
    return {
      bucketEndpoint: true,
      hostname: `${DNSHostLabel}.${service}${fipsEndpoint ? "-fips" : ""}.${endpointRegion}.${hostnameSuffix}`,
      signingRegion,
      signingService: service
    };
  }, "getEndpointFromObjectLambdaArn");
  var getEndpointFromMRAPArn = __name(({
    disableMultiregionAccessPoints,
    dualstackEndpoint = false,
    isCustomEndpoint,
    mrapAlias,
    hostnameSuffix
  }) => {
    if (disableMultiregionAccessPoints === true) {
      throw new Error("SDK is attempting to use a MRAP ARN. Please enable to feature.");
    }
    validateMrapAlias(mrapAlias);
    validateNoDualstack(dualstackEndpoint);
    return {
      bucketEndpoint: true,
      hostname: `${mrapAlias}${isCustomEndpoint ? "" : `.accesspoint.s3-global`}.${hostnameSuffix}`,
      signingRegion: "*"
    };
  }, "getEndpointFromMRAPArn");
  var getEndpointFromOutpostArn = __name(({
    useArnRegion,
    clientRegion,
    clientSigningRegion = clientRegion,
    bucketName,
    outpostId,
    dualstackEndpoint = false,
    fipsEndpoint = false,
    tlsCompatible = true,
    accesspointName,
    isCustomEndpoint,
    hostnameSuffix
  }) => {
    validateRegionalClient(clientRegion);
    validateRegion(bucketName.region, { useArnRegion, clientRegion, clientSigningRegion, useFipsEndpoint: fipsEndpoint });
    const DNSHostLabel = `${accesspointName}-${bucketName.accountId}`;
    validateDNSHostLabel(DNSHostLabel, { tlsCompatible });
    const endpointRegion = useArnRegion ? bucketName.region : clientRegion;
    const signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;
    validateOutpostService(bucketName.service);
    validateDNSHostLabel(outpostId, { tlsCompatible });
    validateNoDualstack(dualstackEndpoint);
    validateNoFIPS(fipsEndpoint);
    const hostnamePrefix = `${DNSHostLabel}.${outpostId}`;
    return {
      bucketEndpoint: true,
      hostname: `${hostnamePrefix}${isCustomEndpoint ? "" : `.s3-outposts.${endpointRegion}`}.${hostnameSuffix}`,
      signingRegion,
      signingService: "s3-outposts"
    };
  }, "getEndpointFromOutpostArn");
  var getEndpointFromAccessPointArn = __name(({
    useArnRegion,
    clientRegion,
    clientSigningRegion = clientRegion,
    bucketName,
    dualstackEndpoint = false,
    fipsEndpoint = false,
    tlsCompatible = true,
    accesspointName,
    isCustomEndpoint,
    hostnameSuffix
  }) => {
    validateRegionalClient(clientRegion);
    validateRegion(bucketName.region, {
      useArnRegion,
      clientRegion,
      clientSigningRegion,
      allowFipsRegion: true,
      useFipsEndpoint: fipsEndpoint
    });
    const hostnamePrefix = `${accesspointName}-${bucketName.accountId}`;
    validateDNSHostLabel(hostnamePrefix, { tlsCompatible });
    const endpointRegion = useArnRegion ? bucketName.region : clientRegion;
    const signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;
    validateS3Service(bucketName.service);
    return {
      bucketEndpoint: true,
      hostname: `${hostnamePrefix}${isCustomEndpoint ? "" : `.s3-accesspoint${fipsEndpoint ? "-fips" : ""}${dualstackEndpoint ? ".dualstack" : ""}.${endpointRegion}`}.${hostnameSuffix}`,
      signingRegion
    };
  }, "getEndpointFromAccessPointArn");
  var bucketEndpointMiddleware = __name((options) => (next, context) => async (args) => {
    const { Bucket: bucketName } = args.input;
    let replaceBucketInPath = options.bucketEndpoint;
    const request = args.request;
    if (import_protocol_http.HttpRequest.isInstance(request)) {
      if (options.bucketEndpoint) {
        request.hostname = bucketName;
      } else if ((0, import_util_arn_parser.validate)(bucketName)) {
        const bucketArn = (0, import_util_arn_parser.parse)(bucketName);
        const clientRegion = await options.region();
        const useDualstackEndpoint = await options.useDualstackEndpoint();
        const useFipsEndpoint = await options.useFipsEndpoint();
        const { partition, signingRegion = clientRegion } = await options.regionInfoProvider(clientRegion, { useDualstackEndpoint, useFipsEndpoint }) || {};
        const useArnRegion = await options.useArnRegion();
        const {
          hostname,
          bucketEndpoint,
          signingRegion: modifiedSigningRegion,
          signingService
        } = bucketHostname({
          bucketName: bucketArn,
          baseHostname: request.hostname,
          accelerateEndpoint: options.useAccelerateEndpoint,
          dualstackEndpoint: useDualstackEndpoint,
          fipsEndpoint: useFipsEndpoint,
          pathStyleEndpoint: options.forcePathStyle,
          tlsCompatible: request.protocol === "https:",
          useArnRegion,
          clientPartition: partition,
          clientSigningRegion: signingRegion,
          clientRegion,
          isCustomEndpoint: options.isCustomEndpoint,
          disableMultiregionAccessPoints: await options.disableMultiregionAccessPoints()
        });
        if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {
          context["signing_region"] = modifiedSigningRegion;
        }
        if (signingService && signingService !== "s3") {
          context["signing_service"] = signingService;
        }
        request.hostname = hostname;
        replaceBucketInPath = bucketEndpoint;
      } else {
        const clientRegion = await options.region();
        const dualstackEndpoint = await options.useDualstackEndpoint();
        const fipsEndpoint = await options.useFipsEndpoint();
        const { hostname, bucketEndpoint } = bucketHostname({
          bucketName,
          clientRegion,
          baseHostname: request.hostname,
          accelerateEndpoint: options.useAccelerateEndpoint,
          dualstackEndpoint,
          fipsEndpoint,
          pathStyleEndpoint: options.forcePathStyle,
          tlsCompatible: request.protocol === "https:",
          isCustomEndpoint: options.isCustomEndpoint
        });
        request.hostname = hostname;
        replaceBucketInPath = bucketEndpoint;
      }
      if (replaceBucketInPath) {
        request.path = request.path.replace(/^(\/)?[^\/]+/, "");
        if (request.path === "") {
          request.path = "/";
        }
      }
    }
    return next({ ...args, request });
  }, "bucketEndpointMiddleware");
  var bucketEndpointMiddlewareOptions = {
    tags: ["BUCKET_ENDPOINT"],
    name: "bucketEndpointMiddleware",
    relation: "before",
    toMiddleware: "hostHeaderMiddleware",
    override: true
  };
  var getBucketEndpointPlugin = __name((options) => ({
    applyToStack: (clientStack) => {
      clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);
    }
  }), "getBucketEndpointPlugin");
  __name(resolveBucketEndpointConfig, "resolveBucketEndpointConfig");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolve
var require_dist_cjs61 = __commonJS((exports, module) => {
  var getChunkedStream = function(source) {
    let currentMessageTotalLength = 0;
    let currentMessagePendingLength = 0;
    let currentMessage = null;
    let messageLengthBuffer = null;
    const allocateMessage = __name((size) => {
      if (typeof size !== "number") {
        throw new Error("Attempted to allocate an event message where size was not a number: " + size);
      }
      currentMessageTotalLength = size;
      currentMessagePendingLength = 4;
      currentMessage = new Uint8Array(size);
      const currentMessageView = new DataView(currentMessage.buffer);
      currentMessageView.setUint32(0, size, false);
    }, "allocateMessage");
    const iterator = __name(async function* () {
      const sourceIterator = source[Symbol.asyncIterator]();
      while (true) {
        const { value, done } = await sourceIterator.next();
        if (done) {
          if (!currentMessageTotalLength) {
            return;
          } else if (currentMessageTotalLength === currentMessagePendingLength) {
            yield currentMessage;
          } else {
            throw new Error("Truncated event message received.");
          }
          return;
        }
        const chunkLength = value.length;
        let currentOffset = 0;
        while (currentOffset < chunkLength) {
          if (!currentMessage) {
            const bytesRemaining = chunkLength - currentOffset;
            if (!messageLengthBuffer) {
              messageLengthBuffer = new Uint8Array(4);
            }
            const numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);
            messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);
            currentMessagePendingLength += numBytesForTotal;
            currentOffset += numBytesForTotal;
            if (currentMessagePendingLength < 4) {
              break;
            }
            allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));
            messageLengthBuffer = null;
          }
          const numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);
          currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);
          currentMessagePendingLength += numBytesToWrite;
          currentOffset += numBytesToWrite;
          if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {
            yield currentMessage;
            currentMessage = null;
            currentMessageTotalLength = 0;
            currentMessagePendingLength = 0;
          }
        }
      }
    }, "iterator");
    return {
      [Symbol.asyncIterator]: iterator
    };
  };
  var getMessageUnmarshaller = function(deserializer, toUtf8) {
    return async function(message) {
      const { value: messageType } = message.headers[":message-type"];
      if (messageType === "error") {
        const unmodeledError = new Error(message.headers[":error-message"].value || "UnknownError");
        unmodeledError.name = message.headers[":error-code"].value;
        throw unmodeledError;
      } else if (messageType === "exception") {
        const code = message.headers[":exception-type"].value;
        const exception = { [code]: message };
        const deserializedException = await deserializer(exception);
        if (deserializedException.$unknown) {
          const error = new Error(toUtf8(message.body));
          error.name = code;
          throw error;
        }
        throw deserializedException[code];
      } else if (messageType === "event") {
        const event = {
          [message.headers[":event-type"].value]: message
        };
        const deserialized = await deserializer(event);
        if (deserialized.$unknown)
          return;
        return deserialized;
      } else {
        throw Error(`Unrecognizable event type: ${message.headers[":event-type"].value}`);
      }
    };
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    EventStreamMarshaller: () => EventStreamMarshaller,
    eventStreamSerdeProvider: () => eventStreamSerdeProvider
  });
  module.exports = __toCommonJS(src_exports);
  var import_eventstream_codec = require_dist_cjs19();
  __name(getChunkedStream, "getChunkedStream");
  __name(getMessageUnmarshaller, "getMessageUnmarshaller");
  var _EventStreamMarshaller = class _EventStreamMarshaller2 {
    constructor({ utf8Encoder, utf8Decoder }) {
      this.eventStreamCodec = new import_eventstream_codec.EventStreamCodec(utf8Encoder, utf8Decoder);
      this.utfEncoder = utf8Encoder;
    }
    deserialize(body, deserializer) {
      const inputStream = getChunkedStream(body);
      return new import_eventstream_codec.SmithyMessageDecoderStream({
        messageStream: new import_eventstream_codec.MessageDecoderStream({ inputStream, decoder: this.eventStreamCodec }),
        deserializer: getMessageUnmarshaller(deserializer, this.utfEncoder)
      });
    }
    serialize(inputStream, serializer) {
      return new import_eventstream_codec.MessageEncoderStream({
        messageStream: new import_eventstream_codec.SmithyMessageEncoderStream({ inputStream, serializer }),
        encoder: this.eventStreamCodec,
        includeEndFrame: true
      });
    }
  };
  __name(_EventStreamMarshaller, "EventStreamMarshaller");
  var EventStreamMarshaller = _EventStreamMarshaller;
  var eventStreamSerdeProvider = __name((options) => new EventStreamMarshaller(options), "eventStreamSerdeProvider");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_dist_cjs62 = __commonJS((exports, module) => {
  async function* readabletoIterable(readStream) {
    let streamEnded = false;
    let generationEnded = false;
    const records = new Array;
    readStream.on("error", (err) => {
      if (!streamEnded) {
        streamEnded = true;
      }
      if (err) {
        throw err;
      }
    });
    readStream.on("data", (data) => {
      records.push(data);
    });
    readStream.on("end", () => {
      streamEnded = true;
    });
    while (!generationEnded) {
      const value = await new Promise((resolve) => setTimeout(() => resolve(records.shift()), 0));
      if (value) {
        yield value;
      }
      generationEnded = streamEnded && records.length === 0;
    }
  }
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    EventStreamMarshaller: () => EventStreamMarshaller,
    eventStreamSerdeProvider: () => eventStreamSerdeProvider
  });
  module.exports = __toCommonJS(src_exports);
  var import_eventstream_serde_universal = require_dist_cjs61();
  var import_stream = __require("stream");
  __name(readabletoIterable, "readabletoIterable");
  var _EventStreamMarshaller = class _EventStreamMarshaller2 {
    constructor({ utf8Encoder, utf8Decoder }) {
      this.universalMarshaller = new import_eventstream_serde_universal.EventStreamMarshaller({
        utf8Decoder,
        utf8Encoder
      });
    }
    deserialize(body, deserializer) {
      const bodyIterable = typeof body[Symbol.asyncIterator] === "function" ? body : readabletoIterable(body);
      return this.universalMarshaller.deserialize(bodyIterable, deserializer);
    }
    serialize(input, serializer) {
      return import_stream.Readable.from(this.universalMarshaller.serialize(input, serializer));
    }
  };
  __name(_EventStreamMarshaller, "EventStreamMarshaller");
  var EventStreamMarshaller = _EventStreamMarshaller;
  var eventStreamSerdeProvider = __name((options) => new EventStreamMarshaller(options), "eventStreamSerdeProvider");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rule
var require_dist_cjs63 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    fileStreamHasher: () => fileStreamHasher,
    readableStreamHasher: () => readableStreamHasher
  });
  module.exports = __toCommonJS(src_exports);
  var import_fs = __require("fs");
  var import_util_utf8 = require_dist_cjs11();
  var import_stream = __require("stream");
  var _HashCalculator = class _HashCalculator2 extends import_stream.Writable {
    constructor(hash, options) {
      super(options);
      this.hash = hash;
    }
    _write(chunk, encoding, callback) {
      try {
        this.hash.update((0, import_util_utf8.toUint8Array)(chunk));
      } catch (err) {
        return callback(err);
      }
      callback();
    }
  };
  __name(_HashCalculator, "HashCalculator");
  var HashCalculator = _HashCalculator;
  var fileStreamHasher = __name((hashCtor, fileStream) => new Promise((resolve, reject) => {
    if (!isReadStream(fileStream)) {
      reject(new Error("Unable to calculate hash for non-file streams."));
      return;
    }
    const fileStreamTee = (0, import_fs.createReadStream)(fileStream.path, {
      start: fileStream.start,
      end: fileStream.end
    });
    const hash = new hashCtor;
    const hashCalculator = new HashCalculator(hash);
    fileStreamTee.pipe(hashCalculator);
    fileStreamTee.on("error", (err) => {
      hashCalculator.end();
      reject(err);
    });
    hashCalculator.on("error", reject);
    hashCalculator.on("finish", function() {
      hash.digest().then(resolve).catch(reject);
    });
  }), "fileStreamHasher");
  var isReadStream = __name((stream) => typeof stream.path === "string", "isReadStream");
  var readableStreamHasher = __name((hashCtor, readableStream) => {
    if (readableStream.readableFlowing !== null) {
      throw new Error("Unable to calculate hash for flowing readable stream");
    }
    const hash = new hashCtor;
    const hashCalculator = new HashCalculator(hash);
    readableStream.pipe(hashCalculator);
    return new Promise((resolve, reject) => {
      readableStream.on("error", (err) => {
        hashCalculator.end();
        reject(err);
      });
      hashCalculator.on("error", reject);
      hashCalculator.on("finish", () => {
        hash.digest().then(resolve).catch(reject);
      });
    });
  }, "readableStreamHasher");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolv
var require_dist_cjs64 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    SignatureV4MultiRegion: () => SignatureV4MultiRegion,
    signatureV4CrtContainer: () => signatureV4CrtContainer
  });
  module.exports = __toCommonJS(src_exports);
  var import_middleware_sdk_s3 = require_dist_cjs24();
  var signatureV4CrtContainer = {
    CrtSignerV4: null
  };
  var _SignatureV4MultiRegion = class _SignatureV4MultiRegion2 {
    constructor(options) {
      this.sigv4Signer = new import_middleware_sdk_s3.SignatureV4S3Express(options);
      this.signerOptions = options;
    }
    async sign(requestToSign, options = {}) {
      if (options.signingRegion === "*") {
        if (this.signerOptions.runtime !== "node")
          throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
        return this.getSigv4aSigner().sign(requestToSign, options);
      }
      return this.sigv4Signer.sign(requestToSign, options);
    }
    async signWithCredentials(requestToSign, credentials, options = {}) {
      if (options.signingRegion === "*") {
        if (this.signerOptions.runtime !== "node")
          throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
        return this.getSigv4aSigner().signWithCredentials(requestToSign, credentials, options);
      }
      return this.sigv4Signer.signWithCredentials(requestToSign, credentials, options);
    }
    async presign(originalRequest, options = {}) {
      if (options.signingRegion === "*") {
        if (this.signerOptions.runtime !== "node")
          throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
        return this.getSigv4aSigner().presign(originalRequest, options);
      }
      return this.sigv4Signer.presign(originalRequest, options);
    }
    async presignWithCredentials(originalRequest, credentials, options = {}) {
      if (options.signingRegion === "*") {
        throw new Error("Method presignWithCredentials is not supported for [signingRegion=*].");
      }
      return this.sigv4Signer.presignWithCredentials(originalRequest, credentials, options);
    }
    getSigv4aSigner() {
      if (!this.sigv4aSigner) {
        let CrtSignerV4 = null;
        try {
          CrtSignerV4 = signatureV4CrtContainer.CrtSignerV4;
          if (typeof CrtSignerV4 !== "function")
            throw new Error;
        } catch (e) {
          e.message = `${e.message}
Please check whether you have installed the "@aws-sdk/signature-v4-crt" package explicitly. 
You must also register the package by calling [require("@aws-sdk/signature-v4-crt");] or an ESM equivalent such as [import "@aws-sdk/signature-v4-crt";]. 
For more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt`;
          throw e;
        }
        this.sigv4aSigner = new CrtSignerV4({
          ...this.signerOptions,
          signingAlgorithm: 1
        });
      }
      return this.sigv4aSigner;
    }
  };
  __name(_SignatureV4MultiRegion, "SignatureV4MultiRegion");
  var SignatureV4MultiRegion = _SignatureV4MultiRegion;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.j
var require_ruleset3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ruleSet = undefined;
  var cc = "required";
  var cd = "type";
  var ce = "conditions";
  var cf = "fn";
  var cg = "argv";
  var ch = "ref";
  var ci = "assign";
  var cj = "url";
  var ck = "properties";
  var cl = "backend";
  var cm = "authSchemes";
  var cn = "disableDoubleEncoding";
  var co = "signingName";
  var cp = "signingRegion";
  var cq = "headers";
  var a = false;
  var b = true;
  var c = "isSet";
  var d = "booleanEquals";
  var e = "error";
  var f = "aws.partition";
  var g = "stringEquals";
  var h = "getAttr";
  var i = "name";
  var j = "substring";
  var k = "bucketSuffix";
  var l = "parseURL";
  var m = "{url#scheme}://{url#authority}/{uri_encoded_bucket}{url#path}";
  var n = "endpoint";
  var o = "tree";
  var p = "aws.isVirtualHostableS3Bucket";
  var q = "{url#scheme}://{Bucket}.{url#authority}{url#path}";
  var r = "not";
  var s = "{url#scheme}://{url#authority}{url#path}";
  var t = "hardwareType";
  var u = "regionPrefix";
  var v = "bucketAliasSuffix";
  var w = "outpostId";
  var x = "isValidHostLabel";
  var y = "s3-outposts";
  var z = "s3";
  var A = "{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}";
  var B = "https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}";
  var C = "https://{Bucket}.s3.{partitionResult#dnsSuffix}";
  var D = "aws.parseArn";
  var E = "bucketArn";
  var F = "arnType";
  var G = "";
  var H = "s3-object-lambda";
  var I = "accesspoint";
  var J = "accessPointName";
  var K = "{url#scheme}://{accessPointName}-{bucketArn#accountId}.{url#authority}{url#path}";
  var L = "mrapPartition";
  var M = "outpostType";
  var N = "arnPrefix";
  var O = "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}";
  var P = "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}";
  var Q = "https://s3.{partitionResult#dnsSuffix}";
  var R = { [cc]: false, [cd]: "String" };
  var S = { [cc]: true, default: false, [cd]: "Boolean" };
  var T = { [cc]: false, [cd]: "Boolean" };
  var U = { [cf]: d, [cg]: [{ [ch]: "Accelerate" }, true] };
  var V = { [cf]: d, [cg]: [{ [ch]: "UseFIPS" }, true] };
  var W = { [cf]: d, [cg]: [{ [ch]: "UseDualStack" }, true] };
  var X = { [cf]: c, [cg]: [{ [ch]: "Endpoint" }] };
  var Y = { [cf]: f, [cg]: [{ [ch]: "Region" }], [ci]: "partitionResult" };
  var Z = { [cf]: g, [cg]: [{ [cf]: h, [cg]: [{ [ch]: "partitionResult" }, i] }, "aws-cn"] };
  var aa = { [cf]: c, [cg]: [{ [ch]: "Bucket" }] };
  var ab = { [ch]: "Bucket" };
  var ac = { [cf]: l, [cg]: [{ [ch]: "Endpoint" }], [ci]: "url" };
  var ad = { [cf]: d, [cg]: [{ [cf]: h, [cg]: [{ [ch]: "url" }, "isIp"] }, true] };
  var ae = { [ch]: "url" };
  var af = { [cf]: "uriEncode", [cg]: [ab], [ci]: "uri_encoded_bucket" };
  var ag = { [cl]: "S3Express", [cm]: [{ [cn]: true, [i]: "sigv4", [co]: "s3express", [cp]: "{Region}" }] };
  var ah = {};
  var ai = { [cf]: p, [cg]: [ab, false] };
  var aj = { [e]: "S3Express bucket name is not a valid virtual hostable name.", [cd]: e };
  var ak = { [cl]: "S3Express", [cm]: [{ [cn]: true, [i]: "sigv4-s3express", [co]: "s3express", [cp]: "{Region}" }] };
  var al = { [cf]: c, [cg]: [{ [ch]: "UseS3ExpressControlEndpoint" }] };
  var am = { [cf]: d, [cg]: [{ [ch]: "UseS3ExpressControlEndpoint" }, true] };
  var an = { [cf]: r, [cg]: [X] };
  var ao = { [e]: "Unrecognized S3Express bucket name format.", [cd]: e };
  var ap = { [cf]: r, [cg]: [aa] };
  var aq = { [ch]: t };
  var ar = { [ce]: [an], [e]: "Expected a endpoint to be specified but no endpoint was found", [cd]: e };
  var as = { [cm]: [{ [cn]: true, [i]: "sigv4", [co]: y, [cp]: "{Region}" }] };
  var at = { [cf]: d, [cg]: [{ [ch]: "ForcePathStyle" }, false] };
  var au = { [ch]: "ForcePathStyle" };
  var av = { [cf]: d, [cg]: [{ [ch]: "Accelerate" }, false] };
  var aw = { [cf]: g, [cg]: [{ [ch]: "Region" }, "aws-global"] };
  var ax = { [cm]: [{ [cn]: true, [i]: "sigv4", [co]: z, [cp]: "us-east-1" }] };
  var ay = { [cf]: r, [cg]: [aw] };
  var az = { [cf]: d, [cg]: [{ [ch]: "UseGlobalEndpoint" }, true] };
  var aA = { [cj]: "https://{Bucket}.s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}", [ck]: { [cm]: [{ [cn]: true, [i]: "sigv4", [co]: z, [cp]: "{Region}" }] }, [cq]: {} };
  var aB = { [cm]: [{ [cn]: true, [i]: "sigv4", [co]: z, [cp]: "{Region}" }] };
  var aC = { [cf]: d, [cg]: [{ [ch]: "UseGlobalEndpoint" }, false] };
  var aD = { [cf]: d, [cg]: [{ [ch]: "UseDualStack" }, false] };
  var aE = { [cj]: "https://{Bucket}.s3-fips.{Region}.{partitionResult#dnsSuffix}", [ck]: aB, [cq]: {} };
  var aF = { [cf]: d, [cg]: [{ [ch]: "UseFIPS" }, false] };
  var aG = { [cj]: "https://{Bucket}.s3-accelerate.dualstack.{partitionResult#dnsSuffix}", [ck]: aB, [cq]: {} };
  var aH = { [cj]: "https://{Bucket}.s3.dualstack.{Region}.{partitionResult#dnsSuffix}", [ck]: aB, [cq]: {} };
  var aI = { [cf]: d, [cg]: [{ [cf]: h, [cg]: [ae, "isIp"] }, false] };
  var aJ = { [cj]: A, [ck]: aB, [cq]: {} };
  var aK = { [cj]: q, [ck]: aB, [cq]: {} };
  var aL = { [n]: aK, [cd]: n };
  var aM = { [cj]: B, [ck]: aB, [cq]: {} };
  var aN = { [cj]: "https://{Bucket}.s3.{Region}.{partitionResult#dnsSuffix}", [ck]: aB, [cq]: {} };
  var aO = { [e]: "Invalid region: region was not a valid DNS name.", [cd]: e };
  var aP = { [ch]: E };
  var aQ = { [ch]: F };
  var aR = { [cf]: h, [cg]: [aP, "service"] };
  var aS = { [ch]: J };
  var aT = { [ce]: [W], [e]: "S3 Object Lambda does not support Dual-stack", [cd]: e };
  var aU = { [ce]: [U], [e]: "S3 Object Lambda does not support S3 Accelerate", [cd]: e };
  var aV = { [ce]: [{ [cf]: c, [cg]: [{ [ch]: "DisableAccessPoints" }] }, { [cf]: d, [cg]: [{ [ch]: "DisableAccessPoints" }, true] }], [e]: "Access points are not supported for this operation", [cd]: e };
  var aW = { [ce]: [{ [cf]: c, [cg]: [{ [ch]: "UseArnRegion" }] }, { [cf]: d, [cg]: [{ [ch]: "UseArnRegion" }, false] }, { [cf]: r, [cg]: [{ [cf]: g, [cg]: [{ [cf]: h, [cg]: [aP, "region"] }, "{Region}"] }] }], [e]: "Invalid configuration: region from ARN `{bucketArn#region}` does not match client region `{Region}` and UseArnRegion is `false`", [cd]: e };
  var aX = { [cf]: h, [cg]: [{ [ch]: "bucketPartition" }, i] };
  var aY = { [cf]: h, [cg]: [aP, "accountId"] };
  var aZ = { [cm]: [{ [cn]: true, [i]: "sigv4", [co]: H, [cp]: "{bucketArn#region}" }] };
  var ba = { [e]: "Invalid ARN: The access point name may only contain a-z, A-Z, 0-9 and `-`. Found: `{accessPointName}`", [cd]: e };
  var bb = { [e]: "Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `{bucketArn#accountId}`", [cd]: e };
  var bc = { [e]: "Invalid region in ARN: `{bucketArn#region}` (invalid DNS name)", [cd]: e };
  var bd = { [e]: "Client was configured for partition `{partitionResult#name}` but ARN (`{Bucket}`) has `{bucketPartition#name}`", [cd]: e };
  var be = { [e]: "Invalid ARN: The ARN may only contain a single resource component after `accesspoint`.", [cd]: e };
  var bf = { [e]: "Invalid ARN: Expected a resource of the format `accesspoint:<accesspoint name>` but no name was provided", [cd]: e };
  var bg = { [cm]: [{ [cn]: true, [i]: "sigv4", [co]: z, [cp]: "{bucketArn#region}" }] };
  var bh = { [cm]: [{ [cn]: true, [i]: "sigv4", [co]: y, [cp]: "{bucketArn#region}" }] };
  var bi = { [cf]: D, [cg]: [ab] };
  var bj = { [cj]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [ck]: aB, [cq]: {} };
  var bk = { [cj]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [ck]: aB, [cq]: {} };
  var bl = { [cj]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [ck]: aB, [cq]: {} };
  var bm = { [cj]: O, [ck]: aB, [cq]: {} };
  var bn = { [cj]: "https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [ck]: aB, [cq]: {} };
  var bo = { [ch]: "UseObjectLambdaEndpoint" };
  var bp = { [cm]: [{ [cn]: true, [i]: "sigv4", [co]: H, [cp]: "{Region}" }] };
  var bq = { [cj]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}", [ck]: aB, [cq]: {} };
  var br = { [cj]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}", [ck]: aB, [cq]: {} };
  var bs = { [cj]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}", [ck]: aB, [cq]: {} };
  var bt = { [cj]: s, [ck]: aB, [cq]: {} };
  var bu = { [cj]: "https://s3.{Region}.{partitionResult#dnsSuffix}", [ck]: aB, [cq]: {} };
  var bv = [{ [ch]: "Region" }];
  var bw = [{ [ch]: "Endpoint" }];
  var bx = [ab];
  var by = [W];
  var bz = [U];
  var bA = [X, ac];
  var bB = [{ [cf]: c, [cg]: [{ [ch]: "DisableS3ExpressSessionAuth" }] }, { [cf]: d, [cg]: [{ [ch]: "DisableS3ExpressSessionAuth" }, true] }];
  var bC = [ad];
  var bD = [af];
  var bE = [ai];
  var bF = [V];
  var bG = [{ [cf]: j, [cg]: [ab, 6, 14, true], [ci]: "s3expressAvailabilityZoneId" }, { [cf]: j, [cg]: [ab, 14, 16, true], [ci]: "s3expressAvailabilityZoneDelim" }, { [cf]: g, [cg]: [{ [ch]: "s3expressAvailabilityZoneDelim" }, "--"] }];
  var bH = [{ [ce]: [V], [n]: { [cj]: "https://{Bucket}.s3express-fips-{s3expressAvailabilityZoneId}.{Region}.amazonaws.com", [ck]: ag, [cq]: {} }, [cd]: n }, { [n]: { [cj]: "https://{Bucket}.s3express-{s3expressAvailabilityZoneId}.{Region}.amazonaws.com", [ck]: ag, [cq]: {} }, [cd]: n }];
  var bI = [{ [cf]: j, [cg]: [ab, 6, 15, true], [ci]: "s3expressAvailabilityZoneId" }, { [cf]: j, [cg]: [ab, 15, 17, true], [ci]: "s3expressAvailabilityZoneDelim" }, { [cf]: g, [cg]: [{ [ch]: "s3expressAvailabilityZoneDelim" }, "--"] }];
  var bJ = [{ [ce]: [V], [n]: { [cj]: "https://{Bucket}.s3express-fips-{s3expressAvailabilityZoneId}.{Region}.amazonaws.com", [ck]: ak, [cq]: {} }, [cd]: n }, { [n]: { [cj]: "https://{Bucket}.s3express-{s3expressAvailabilityZoneId}.{Region}.amazonaws.com", [ck]: ak, [cq]: {} }, [cd]: n }];
  var bK = [aa];
  var bL = [{ [cf]: x, [cg]: [{ [ch]: w }, false] }];
  var bM = [{ [cf]: g, [cg]: [{ [ch]: u }, "beta"] }];
  var bN = [Y];
  var bO = [{ [cf]: x, [cg]: [{ [ch]: "Region" }, false] }];
  var bP = [{ [cf]: g, [cg]: [{ [ch]: "Region" }, "us-east-1"] }];
  var bQ = [{ [cf]: g, [cg]: [aQ, I] }];
  var bR = [{ [cf]: h, [cg]: [aP, "resourceId[1]"], [ci]: J }, { [cf]: r, [cg]: [{ [cf]: g, [cg]: [aS, G] }] }];
  var bS = [aP, "resourceId[1]"];
  var bT = [{ [cf]: r, [cg]: [{ [cf]: g, [cg]: [{ [cf]: h, [cg]: [aP, "region"] }, G] }] }];
  var bU = [{ [cf]: r, [cg]: [{ [cf]: c, [cg]: [{ [cf]: h, [cg]: [aP, "resourceId[2]"] }] }] }];
  var bV = [aP, "resourceId[2]"];
  var bW = [{ [cf]: f, [cg]: [{ [cf]: h, [cg]: [aP, "region"] }], [ci]: "bucketPartition" }];
  var bX = [{ [cf]: g, [cg]: [aX, { [cf]: h, [cg]: [{ [ch]: "partitionResult" }, i] }] }];
  var bY = [{ [cf]: x, [cg]: [{ [cf]: h, [cg]: [aP, "region"] }, true] }];
  var bZ = [{ [cf]: x, [cg]: [aY, false] }];
  var ca = [{ [cf]: x, [cg]: [aS, false] }];
  var cb = [{ [cf]: x, [cg]: [{ [ch]: "Region" }, true] }];
  var _data = { version: "1.0", parameters: { Bucket: R, Region: R, UseFIPS: S, UseDualStack: S, Endpoint: R, ForcePathStyle: S, Accelerate: S, UseGlobalEndpoint: S, UseObjectLambdaEndpoint: T, Key: R, Prefix: R, DisableAccessPoints: T, DisableMultiRegionAccessPoints: S, UseArnRegion: T, UseS3ExpressControlEndpoint: T, DisableS3ExpressSessionAuth: T }, rules: [{ [ce]: [{ [cf]: c, [cg]: bv }], rules: [{ [ce]: [U, V], error: "Accelerate cannot be used with FIPS", [cd]: e }, { [ce]: [W, X], error: "Cannot set dual-stack in combination with a custom endpoint.", [cd]: e }, { [ce]: [X, V], error: "A custom endpoint cannot be combined with FIPS", [cd]: e }, { [ce]: [X, U], error: "A custom endpoint cannot be combined with S3 Accelerate", [cd]: e }, { [ce]: [V, Y, Z], error: "Partition does not support FIPS", [cd]: e }, { [ce]: [aa, { [cf]: j, [cg]: [ab, 0, 6, b], [ci]: k }, { [cf]: g, [cg]: [{ [ch]: k }, "--x-s3"] }], rules: [{ [ce]: by, error: "S3Express does not support Dual-stack.", [cd]: e }, { [ce]: bz, error: "S3Express does not support S3 Accelerate.", [cd]: e }, { [ce]: bA, rules: [{ [ce]: bB, rules: [{ [ce]: bC, rules: [{ [ce]: bD, rules: [{ endpoint: { [cj]: m, [ck]: ag, [cq]: ah }, [cd]: n }], [cd]: o }], [cd]: o }, { [ce]: bE, rules: [{ endpoint: { [cj]: q, [ck]: ag, [cq]: ah }, [cd]: n }], [cd]: o }, aj], [cd]: o }, { [ce]: bC, rules: [{ [ce]: bD, rules: [{ endpoint: { [cj]: m, [ck]: ak, [cq]: ah }, [cd]: n }], [cd]: o }], [cd]: o }, { [ce]: bE, rules: [{ endpoint: { [cj]: q, [ck]: ak, [cq]: ah }, [cd]: n }], [cd]: o }, aj], [cd]: o }, { [ce]: [al, am], rules: [{ [ce]: [af, an], rules: [{ [ce]: bF, endpoint: { [cj]: "https://s3express-control-fips.{Region}.amazonaws.com/{uri_encoded_bucket}", [ck]: ag, [cq]: ah }, [cd]: n }, { endpoint: { [cj]: "https://s3express-control.{Region}.amazonaws.com/{uri_encoded_bucket}", [ck]: ag, [cq]: ah }, [cd]: n }], [cd]: o }], [cd]: o }, { [ce]: bE, rules: [{ [ce]: bB, rules: [{ [ce]: bG, rules: bH, [cd]: o }, { [ce]: bI, rules: bH, [cd]: o }, ao], [cd]: o }, { [ce]: bG, rules: bJ, [cd]: o }, { [ce]: bI, rules: bJ, [cd]: o }, ao], [cd]: o }, aj], [cd]: o }, { [ce]: [ap, al, am], rules: [{ [ce]: bA, endpoint: { [cj]: s, [ck]: ag, [cq]: ah }, [cd]: n }, { [ce]: bF, endpoint: { [cj]: "https://s3express-control-fips.{Region}.amazonaws.com", [ck]: ag, [cq]: ah }, [cd]: n }, { endpoint: { [cj]: "https://s3express-control.{Region}.amazonaws.com", [ck]: ag, [cq]: ah }, [cd]: n }], [cd]: o }, { [ce]: [aa, { [cf]: j, [cg]: [ab, 49, 50, b], [ci]: t }, { [cf]: j, [cg]: [ab, 8, 12, b], [ci]: u }, { [cf]: j, [cg]: [ab, 0, 7, b], [ci]: v }, { [cf]: j, [cg]: [ab, 32, 49, b], [ci]: w }, { [cf]: f, [cg]: bv, [ci]: "regionPartition" }, { [cf]: g, [cg]: [{ [ch]: v }, "--op-s3"] }], rules: [{ [ce]: bL, rules: [{ [ce]: [{ [cf]: g, [cg]: [aq, "e"] }], rules: [{ [ce]: bM, rules: [ar, { [ce]: bA, endpoint: { [cj]: "https://{Bucket}.ec2.{url#authority}", [ck]: as, [cq]: ah }, [cd]: n }], [cd]: o }, { endpoint: { [cj]: "https://{Bucket}.ec2.s3-outposts.{Region}.{regionPartition#dnsSuffix}", [ck]: as, [cq]: ah }, [cd]: n }], [cd]: o }, { [ce]: [{ [cf]: g, [cg]: [aq, "o"] }], rules: [{ [ce]: bM, rules: [ar, { [ce]: bA, endpoint: { [cj]: "https://{Bucket}.op-{outpostId}.{url#authority}", [ck]: as, [cq]: ah }, [cd]: n }], [cd]: o }, { endpoint: { [cj]: "https://{Bucket}.op-{outpostId}.s3-outposts.{Region}.{regionPartition#dnsSuffix}", [ck]: as, [cq]: ah }, [cd]: n }], [cd]: o }, { error: "Unrecognized hardware type: \"Expected hardware type o or e but got {hardwareType}\"", [cd]: e }], [cd]: o }, { error: "Invalid ARN: The outpost Id must only contain a-z, A-Z, 0-9 and `-`.", [cd]: e }], [cd]: o }, { [ce]: bK, rules: [{ [ce]: [X, { [cf]: r, [cg]: [{ [cf]: c, [cg]: [{ [cf]: l, [cg]: bw }] }] }], error: "Custom endpoint `{Endpoint}` was not a valid URI", [cd]: e }, { [ce]: [at, ai], rules: [{ [ce]: bN, rules: [{ [ce]: bO, rules: [{ [ce]: [U, Z], error: "S3 Accelerate cannot be used in this region", [cd]: e }, { [ce]: [W, V, av, an, aw], endpoint: { [cj]: "https://{Bucket}.s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}", [ck]: ax, [cq]: ah }, [cd]: n }, { [ce]: [W, V, av, an, ay, az], rules: [{ endpoint: aA, [cd]: n }], [cd]: o }, { [ce]: [W, V, av, an, ay, aC], endpoint: aA, [cd]: n }, { [ce]: [aD, V, av, an, aw], endpoint: { [cj]: "https://{Bucket}.s3-fips.us-east-1.{partitionResult#dnsSuffix}", [ck]: ax, [cq]: ah }, [cd]: n }, { [ce]: [aD, V, av, an, ay, az], rules: [{ endpoint: aE, [cd]: n }], [cd]: o }, { [ce]: [aD, V, av, an, ay, aC], endpoint: aE, [cd]: n }, { [ce]: [W, aF, U, an, aw], endpoint: { [cj]: "https://{Bucket}.s3-accelerate.dualstack.us-east-1.{partitionResult#dnsSuffix}", [ck]: ax, [cq]: ah }, [cd]: n }, { [ce]: [W, aF, U, an, ay, az], rules: [{ endpoint: aG, [cd]: n }], [cd]: o }, { [ce]: [W, aF, U, an, ay, aC], endpoint: aG, [cd]: n }, { [ce]: [W, aF, av, an, aw], endpoint: { [cj]: "https://{Bucket}.s3.dualstack.us-east-1.{partitionResult#dnsSuffix}", [ck]: ax, [cq]: ah }, [cd]: n }, { [ce]: [W, aF, av, an, ay, az], rules: [{ endpoint: aH, [cd]: n }], [cd]: o }, { [ce]: [W, aF, av, an, ay, aC], endpoint: aH, [cd]: n }, { [ce]: [aD, aF, av, X, ac, ad, aw], endpoint: { [cj]: A, [ck]: ax, [cq]: ah }, [cd]: n }, { [ce]: [aD, aF, av, X, ac, aI, aw], endpoint: { [cj]: q, [ck]: ax, [cq]: ah }, [cd]: n }, { [ce]: [aD, aF, av, X, ac, ad, ay, az], rules: [{ [ce]: bP, endpoint: aJ, [cd]: n }, { endpoint: aJ, [cd]: n }], [cd]: o }, { [ce]: [aD, aF, av, X, ac, aI, ay, az], rules: [{ [ce]: bP, endpoint: aK, [cd]: n }, aL], [cd]: o }, { [ce]: [aD, aF, av, X, ac, ad, ay, aC], endpoint: aJ, [cd]: n }, { [ce]: [aD, aF, av, X, ac, aI, ay, aC], endpoint: aK, [cd]: n }, { [ce]: [aD, aF, U, an, aw], endpoint: { [cj]: B, [ck]: ax, [cq]: ah }, [cd]: n }, { [ce]: [aD, aF, U, an, ay, az], rules: [{ [ce]: bP, endpoint: aM, [cd]: n }, { endpoint: aM, [cd]: n }], [cd]: o }, { [ce]: [aD, aF, U, an, ay, aC], endpoint: aM, [cd]: n }, { [ce]: [aD, aF, av, an, aw], endpoint: { [cj]: C, [ck]: ax, [cq]: ah }, [cd]: n }, { [ce]: [aD, aF, av, an, ay, az], rules: [{ [ce]: bP, endpoint: { [cj]: C, [ck]: aB, [cq]: ah }, [cd]: n }, { endpoint: aN, [cd]: n }], [cd]: o }, { [ce]: [aD, aF, av, an, ay, aC], endpoint: aN, [cd]: n }], [cd]: o }, aO], [cd]: o }], [cd]: o }, { [ce]: [X, ac, { [cf]: g, [cg]: [{ [cf]: h, [cg]: [ae, "scheme"] }, "http"] }, { [cf]: p, [cg]: [ab, b] }, at, aF, aD, av], rules: [{ [ce]: bN, rules: [{ [ce]: bO, rules: [aL], [cd]: o }, aO], [cd]: o }], [cd]: o }, { [ce]: [at, { [cf]: D, [cg]: bx, [ci]: E }], rules: [{ [ce]: [{ [cf]: h, [cg]: [aP, "resourceId[0]"], [ci]: F }, { [cf]: r, [cg]: [{ [cf]: g, [cg]: [aQ, G] }] }], rules: [{ [ce]: [{ [cf]: g, [cg]: [aR, H] }], rules: [{ [ce]: bQ, rules: [{ [ce]: bR, rules: [aT, aU, { [ce]: bT, rules: [aV, { [ce]: bU, rules: [aW, { [ce]: bW, rules: [{ [ce]: bN, rules: [{ [ce]: bX, rules: [{ [ce]: bY, rules: [{ [ce]: [{ [cf]: g, [cg]: [aY, G] }], error: "Invalid ARN: Missing account id", [cd]: e }, { [ce]: bZ, rules: [{ [ce]: ca, rules: [{ [ce]: bA, endpoint: { [cj]: K, [ck]: aZ, [cq]: ah }, [cd]: n }, { [ce]: bF, endpoint: { [cj]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}", [ck]: aZ, [cq]: ah }, [cd]: n }, { endpoint: { [cj]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda.{bucketArn#region}.{bucketPartition#dnsSuffix}", [ck]: aZ, [cq]: ah }, [cd]: n }], [cd]: o }, ba], [cd]: o }, bb], [cd]: o }, bc], [cd]: o }, bd], [cd]: o }], [cd]: o }], [cd]: o }, be], [cd]: o }, { error: "Invalid ARN: bucket ARN is missing a region", [cd]: e }], [cd]: o }, bf], [cd]: o }, { error: "Invalid ARN: Object Lambda ARNs only support `accesspoint` arn types, but found: `{arnType}`", [cd]: e }], [cd]: o }, { [ce]: bQ, rules: [{ [ce]: bR, rules: [{ [ce]: bT, rules: [{ [ce]: bQ, rules: [{ [ce]: bT, rules: [aV, { [ce]: bU, rules: [aW, { [ce]: bW, rules: [{ [ce]: bN, rules: [{ [ce]: [{ [cf]: g, [cg]: [aX, "{partitionResult#name}"] }], rules: [{ [ce]: bY, rules: [{ [ce]: [{ [cf]: g, [cg]: [aR, z] }], rules: [{ [ce]: bZ, rules: [{ [ce]: ca, rules: [{ [ce]: bz, error: "Access Points do not support S3 Accelerate", [cd]: e }, { [ce]: [V, W], endpoint: { [cj]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}", [ck]: bg, [cq]: ah }, [cd]: n }, { [ce]: [V, aD], endpoint: { [cj]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}", [ck]: bg, [cq]: ah }, [cd]: n }, { [ce]: [aF, W], endpoint: { [cj]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}", [ck]: bg, [cq]: ah }, [cd]: n }, { [ce]: [aF, aD, X, ac], endpoint: { [cj]: K, [ck]: bg, [cq]: ah }, [cd]: n }, { [ce]: [aF, aD], endpoint: { [cj]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.{bucketArn#region}.{bucketPartition#dnsSuffix}", [ck]: bg, [cq]: ah }, [cd]: n }], [cd]: o }, ba], [cd]: o }, bb], [cd]: o }, { error: "Invalid ARN: The ARN was not for the S3 service, found: {bucketArn#service}", [cd]: e }], [cd]: o }, bc], [cd]: o }, bd], [cd]: o }], [cd]: o }], [cd]: o }, be], [cd]: o }], [cd]: o }], [cd]: o }, { [ce]: [{ [cf]: x, [cg]: [aS, b] }], rules: [{ [ce]: by, error: "S3 MRAP does not support dual-stack", [cd]: e }, { [ce]: bF, error: "S3 MRAP does not support FIPS", [cd]: e }, { [ce]: bz, error: "S3 MRAP does not support S3 Accelerate", [cd]: e }, { [ce]: [{ [cf]: d, [cg]: [{ [ch]: "DisableMultiRegionAccessPoints" }, b] }], error: "Invalid configuration: Multi-Region Access Point ARNs are disabled.", [cd]: e }, { [ce]: [{ [cf]: f, [cg]: bv, [ci]: L }], rules: [{ [ce]: [{ [cf]: g, [cg]: [{ [cf]: h, [cg]: [{ [ch]: L }, i] }, { [cf]: h, [cg]: [aP, "partition"] }] }], rules: [{ endpoint: { [cj]: "https://{accessPointName}.accesspoint.s3-global.{mrapPartition#dnsSuffix}", [ck]: { [cm]: [{ [cn]: b, name: "sigv4a", [co]: z, signingRegionSet: ["*"] }] }, [cq]: ah }, [cd]: n }], [cd]: o }, { error: "Client was configured for partition `{mrapPartition#name}` but bucket referred to partition `{bucketArn#partition}`", [cd]: e }], [cd]: o }], [cd]: o }, { error: "Invalid Access Point Name", [cd]: e }], [cd]: o }, bf], [cd]: o }, { [ce]: [{ [cf]: g, [cg]: [aR, y] }], rules: [{ [ce]: by, error: "S3 Outposts does not support Dual-stack", [cd]: e }, { [ce]: bF, error: "S3 Outposts does not support FIPS", [cd]: e }, { [ce]: bz, error: "S3 Outposts does not support S3 Accelerate", [cd]: e }, { [ce]: [{ [cf]: c, [cg]: [{ [cf]: h, [cg]: [aP, "resourceId[4]"] }] }], error: "Invalid Arn: Outpost Access Point ARN contains sub resources", [cd]: e }, { [ce]: [{ [cf]: h, [cg]: bS, [ci]: w }], rules: [{ [ce]: bL, rules: [aW, { [ce]: bW, rules: [{ [ce]: bN, rules: [{ [ce]: bX, rules: [{ [ce]: bY, rules: [{ [ce]: bZ, rules: [{ [ce]: [{ [cf]: h, [cg]: bV, [ci]: M }], rules: [{ [ce]: [{ [cf]: h, [cg]: [aP, "resourceId[3]"], [ci]: J }], rules: [{ [ce]: [{ [cf]: g, [cg]: [{ [ch]: M }, I] }], rules: [{ [ce]: bA, endpoint: { [cj]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.{url#authority}", [ck]: bh, [cq]: ah }, [cd]: n }, { endpoint: { [cj]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.s3-outposts.{bucketArn#region}.{bucketPartition#dnsSuffix}", [ck]: bh, [cq]: ah }, [cd]: n }], [cd]: o }, { error: "Expected an outpost type `accesspoint`, found {outpostType}", [cd]: e }], [cd]: o }, { error: "Invalid ARN: expected an access point name", [cd]: e }], [cd]: o }, { error: "Invalid ARN: Expected a 4-component resource", [cd]: e }], [cd]: o }, bb], [cd]: o }, bc], [cd]: o }, bd], [cd]: o }], [cd]: o }], [cd]: o }, { error: "Invalid ARN: The outpost Id may only contain a-z, A-Z, 0-9 and `-`. Found: `{outpostId}`", [cd]: e }], [cd]: o }, { error: "Invalid ARN: The Outpost Id was not set", [cd]: e }], [cd]: o }, { error: "Invalid ARN: Unrecognized format: {Bucket} (type: {arnType})", [cd]: e }], [cd]: o }, { error: "Invalid ARN: No ARN type specified", [cd]: e }], [cd]: o }, { [ce]: [{ [cf]: j, [cg]: [ab, 0, 4, a], [ci]: N }, { [cf]: g, [cg]: [{ [ch]: N }, "arn:"] }, { [cf]: r, [cg]: [{ [cf]: c, [cg]: [bi] }] }], error: "Invalid ARN: `{Bucket}` was not a valid ARN", [cd]: e }, { [ce]: [{ [cf]: d, [cg]: [au, b] }, bi], error: "Path-style addressing cannot be used with ARN buckets", [cd]: e }, { [ce]: bD, rules: [{ [ce]: bN, rules: [{ [ce]: [av], rules: [{ [ce]: [W, an, V, aw], endpoint: { [cj]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [ck]: ax, [cq]: ah }, [cd]: n }, { [ce]: [W, an, V, ay, az], rules: [{ endpoint: bj, [cd]: n }], [cd]: o }, { [ce]: [W, an, V, ay, aC], endpoint: bj, [cd]: n }, { [ce]: [aD, an, V, aw], endpoint: { [cj]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [ck]: ax, [cq]: ah }, [cd]: n }, { [ce]: [aD, an, V, ay, az], rules: [{ endpoint: bk, [cd]: n }], [cd]: o }, { [ce]: [aD, an, V, ay, aC], endpoint: bk, [cd]: n }, { [ce]: [W, an, aF, aw], endpoint: { [cj]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [ck]: ax, [cq]: ah }, [cd]: n }, { [ce]: [W, an, aF, ay, az], rules: [{ endpoint: bl, [cd]: n }], [cd]: o }, { [ce]: [W, an, aF, ay, aC], endpoint: bl, [cd]: n }, { [ce]: [aD, X, ac, aF, aw], endpoint: { [cj]: O, [ck]: ax, [cq]: ah }, [cd]: n }, { [ce]: [aD, X, ac, aF, ay, az], rules: [{ [ce]: bP, endpoint: bm, [cd]: n }, { endpoint: bm, [cd]: n }], [cd]: o }, { [ce]: [aD, X, ac, aF, ay, aC], endpoint: bm, [cd]: n }, { [ce]: [aD, an, aF, aw], endpoint: { [cj]: P, [ck]: ax, [cq]: ah }, [cd]: n }, { [ce]: [aD, an, aF, ay, az], rules: [{ [ce]: bP, endpoint: { [cj]: P, [ck]: aB, [cq]: ah }, [cd]: n }, { endpoint: bn, [cd]: n }], [cd]: o }, { [ce]: [aD, an, aF, ay, aC], endpoint: bn, [cd]: n }], [cd]: o }, { error: "Path-style addressing cannot be used with S3 Accelerate", [cd]: e }], [cd]: o }], [cd]: o }], [cd]: o }, { [ce]: [{ [cf]: c, [cg]: [bo] }, { [cf]: d, [cg]: [bo, b] }], rules: [{ [ce]: bN, rules: [{ [ce]: cb, rules: [aT, aU, { [ce]: bA, endpoint: { [cj]: s, [ck]: bp, [cq]: ah }, [cd]: n }, { [ce]: bF, endpoint: { [cj]: "https://s3-object-lambda-fips.{Region}.{partitionResult#dnsSuffix}", [ck]: bp, [cq]: ah }, [cd]: n }, { endpoint: { [cj]: "https://s3-object-lambda.{Region}.{partitionResult#dnsSuffix}", [ck]: bp, [cq]: ah }, [cd]: n }], [cd]: o }, aO], [cd]: o }], [cd]: o }, { [ce]: [ap], rules: [{ [ce]: bN, rules: [{ [ce]: cb, rules: [{ [ce]: [V, W, an, aw], endpoint: { [cj]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}", [ck]: ax, [cq]: ah }, [cd]: n }, { [ce]: [V, W, an, ay, az], rules: [{ endpoint: bq, [cd]: n }], [cd]: o }, { [ce]: [V, W, an, ay, aC], endpoint: bq, [cd]: n }, { [ce]: [V, aD, an, aw], endpoint: { [cj]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}", [ck]: ax, [cq]: ah }, [cd]: n }, { [ce]: [V, aD, an, ay, az], rules: [{ endpoint: br, [cd]: n }], [cd]: o }, { [ce]: [V, aD, an, ay, aC], endpoint: br, [cd]: n }, { [ce]: [aF, W, an, aw], endpoint: { [cj]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}", [ck]: ax, [cq]: ah }, [cd]: n }, { [ce]: [aF, W, an, ay, az], rules: [{ endpoint: bs, [cd]: n }], [cd]: o }, { [ce]: [aF, W, an, ay, aC], endpoint: bs, [cd]: n }, { [ce]: [aF, aD, X, ac, aw], endpoint: { [cj]: s, [ck]: ax, [cq]: ah }, [cd]: n }, { [ce]: [aF, aD, X, ac, ay, az], rules: [{ [ce]: bP, endpoint: bt, [cd]: n }, { endpoint: bt, [cd]: n }], [cd]: o }, { [ce]: [aF, aD, X, ac, ay, aC], endpoint: bt, [cd]: n }, { [ce]: [aF, aD, an, aw], endpoint: { [cj]: Q, [ck]: ax, [cq]: ah }, [cd]: n }, { [ce]: [aF, aD, an, ay, az], rules: [{ [ce]: bP, endpoint: { [cj]: Q, [ck]: aB, [cq]: ah }, [cd]: n }, { endpoint: bu, [cd]: n }], [cd]: o }, { [ce]: [aF, aD, an, ay, aC], endpoint: bu, [cd]: n }], [cd]: o }, aO], [cd]: o }], [cd]: o }], [cd]: o }, { error: "A region must be set when sending requests to S3.", [cd]: e }] };
  exports.ruleSet = _data;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.j
var require_endpointResolver3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.defaultEndpointResolver = undefined;
  var util_endpoints_1 = require_dist_cjs27();
  var ruleset_1 = require_ruleset3();
  var defaultEndpointResolver = (endpointParams, context = {}) => {
    return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
      endpointParams,
      logger: context.logger
    });
  };
  exports.defaultEndpointResolver = defaultEndpointResolver;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssol
var require_runtimeConfig_shared3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var signature_v4_multi_region_1 = require_dist_cjs64();
  var smithy_client_1 = require_dist_cjs16();
  var url_parser_1 = require_dist_cjs39();
  var util_base64_1 = require_dist_cjs10();
  var util_stream_1 = require_dist_cjs15();
  var util_utf8_1 = require_dist_cjs11();
  var endpointResolver_1 = require_endpointResolver3();
  var getRuntimeConfig = (config) => {
    return {
      apiVersion: "2006-03-01",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      extensions: config?.extensions ?? [],
      getAwsChunkedEncodingStream: config?.getAwsChunkedEncodingStream ?? util_stream_1.getAwsChunkedEncodingStream,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger,
      sdkStreamMixin: config?.sdkStreamMixin ?? util_stream_1.sdkStreamMixin,
      serviceId: config?.serviceId ?? "S3",
      signerConstructor: config?.signerConstructor ?? signature_v4_multi_region_1.SignatureV4MultiRegion,
      signingEscapePath: config?.signingEscapePath ?? false,
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      useArnRegion: config?.useArnRegion ?? false,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rulese
var require_runtimeConfig3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRuntimeConfig = undefined;
  var tslib_1 = require_tslib2();
  var package_json_1 = tslib_1.__importDefault(require_package2());
  var client_sts_1 = require_dist_cjs59();
  var core_1 = require_dist_cjs44();
  var credential_provider_node_1 = require_dist_cjs58();
  var middleware_bucket_endpoint_1 = require_dist_cjs60();
  var middleware_sdk_s3_1 = require_dist_cjs24();
  var util_user_agent_node_1 = require_dist_cjs47();
  var config_resolver_1 = require_dist_cjs30();
  var eventstream_serde_node_1 = require_dist_cjs62();
  var hash_node_1 = require_dist_cjs48();
  var hash_stream_node_1 = require_dist_cjs63();
  var middleware_retry_1 = require_dist_cjs35();
  var node_config_provider_1 = require_dist_cjs37();
  var node_http_handler_1 = require_dist_cjs14();
  var util_body_length_node_1 = require_dist_cjs49();
  var util_retry_1 = require_dist_cjs34();
  var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
  var smithy_client_1 = require_dist_cjs16();
  var util_defaults_mode_node_1 = require_dist_cjs50();
  var smithy_client_2 = require_dist_cjs16();
  var getRuntimeConfig = (config) => {
    (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
    const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
    const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
    (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
    return {
      ...clientSharedValues,
      ...config,
      runtime: "node",
      defaultsMode,
      bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
      credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
      defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
      disableS3ExpressSessionAuth: config?.disableS3ExpressSessionAuth ?? (0, node_config_provider_1.loadConfig)(middleware_sdk_s3_1.NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_OPTIONS),
      eventStreamSerdeProvider: config?.eventStreamSerdeProvider ?? eventstream_serde_node_1.eventStreamSerdeProvider,
      maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
      md5: config?.md5 ?? hash_node_1.Hash.bind(null, "md5"),
      region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
      requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
      retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
        ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
        default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
      }),
      sha1: config?.sha1 ?? hash_node_1.Hash.bind(null, "sha1"),
      sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
      streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
      streamHasher: config?.streamHasher ?? hash_stream_node_1.readableStreamHasher,
      useArnRegion: config?.useArnRegion ?? (0, node_config_provider_1.loadConfig)(middleware_bucket_endpoint_1.NODE_USE_ARN_REGION_CONFIG_OPTIONS),
      useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
      useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
    };
  };
  exports.getRuntimeConfig = getRuntimeConfig;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/rule
var require_dist_cjs65 = __commonJS((exports, module) => {
  var ssecMiddleware = function(options) {
    return (next) => async (args) => {
      const input = { ...args.input };
      const properties = [
        {
          target: "SSECustomerKey",
          hash: "SSECustomerKeyMD5"
        },
        {
          target: "CopySourceSSECustomerKey",
          hash: "CopySourceSSECustomerKeyMD5"
        }
      ];
      for (const prop of properties) {
        const value = input[prop.target];
        if (value) {
          let valueForHash;
          if (typeof value === "string") {
            const isBase64Encoded = /^(?:[A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(value);
            if (isBase64Encoded) {
              valueForHash = options.base64Decoder(value);
            } else {
              valueForHash = options.utf8Decoder(value);
              input[prop.target] = options.base64Encoder(valueForHash);
            }
          } else {
            valueForHash = ArrayBuffer.isView(value) ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength) : new Uint8Array(value);
            input[prop.target] = options.base64Encoder(valueForHash);
          }
          const hash = new options.md5;
          hash.update(valueForHash);
          input[prop.hash] = options.base64Encoder(await hash.digest());
        }
      }
      return next({
        ...args,
        input
      });
    };
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    getSsecPlugin: () => getSsecPlugin,
    ssecMiddleware: () => ssecMiddleware,
    ssecMiddlewareOptions: () => ssecMiddlewareOptions
  });
  module.exports = __toCommonJS(src_exports);
  __name(ssecMiddleware, "ssecMiddleware");
  var ssecMiddlewareOptions = {
    name: "ssecMiddleware",
    step: "initialize",
    tags: ["SSE"],
    override: true
  };
  var getSsecPlugin = __name((config) => ({
    applyToStack: (clientStack) => {
      clientStack.add(ssecMiddleware(config), ssecMiddlewareOptions);
    }
  }), "getSsecPlugin");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.js
var require_dist_cjs66 = __commonJS((exports, module) => {
  var locationConstraintMiddleware = function(options) {
    return (next) => async (args) => {
      const { CreateBucketConfiguration } = args.input;
      const region = await options.region();
      if (!(CreateBucketConfiguration == null ? undefined : CreateBucketConfiguration.LocationConstraint) && !(CreateBucketConfiguration == null ? undefined : CreateBucketConfiguration.Location)) {
        args = {
          ...args,
          input: {
            ...args.input,
            CreateBucketConfiguration: region === "us-east-1" ? undefined : { LocationConstraint: region }
          }
        };
      }
      return next(args);
    };
  };
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    getLocationConstraintPlugin: () => getLocationConstraintPlugin,
    locationConstraintMiddleware: () => locationConstraintMiddleware,
    locationConstraintMiddlewareOptions: () => locationConstraintMiddlewareOptions
  });
  module.exports = __toCommonJS(src_exports);
  __name(locationConstraintMiddleware, "locationConstraintMiddleware");
  var locationConstraintMiddlewareOptions = {
    step: "initialize",
    tags: ["LOCATION_CONSTRAINT", "CREATE_BUCKET_CONFIGURATION"],
    name: "locationConstraintMiddleware",
    override: true
  };
  var getLocationConstraintPlugin = __name((config) => ({
    applyToStack: (clientStack) => {
      clientStack.add(locationConstraintMiddleware(config), locationConstraintMiddlewareOptions);
    }
  }), "getLocationConstraintPlugin");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.
var require_tslib3 = __commonJS((exports, module) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports2) {
        factory(createExporter(root, createExporter(exports2)));
      });
    } else if (typeof module === "object" && typeof exports === "object") {
      factory(createExporter(root, createExporter(exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports2, previous) {
      if (exports2 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports2, "__esModule", { value: true });
        } else {
          exports2.__esModule = true;
        }
      }
      return function(id, v) {
        return exports2[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __);
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length;i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s);i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1;i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), throw: verb(1), return: verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : undefined, done: true };
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === undefined)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar = function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !exports2.hasOwnProperty(p))
          exports2[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = undefined;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === undefined || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0;i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length;i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0;i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length;j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({ value: v2, done: d });
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", { value: raw });
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : { default: mod };
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/
var require_aws_crc32c = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.AwsCrc32c = undefined;
  var tslib_1 = require_tslib3();
  var util_1 = require_build();
  var index_1 = require_build3();
  var AwsCrc32c = function() {
    function AwsCrc32c2() {
      this.crc32c = new index_1.Crc32c;
    }
    AwsCrc32c2.prototype.update = function(toHash) {
      if ((0, util_1.isEmptyData)(toHash))
        return;
      this.crc32c.update((0, util_1.convertToBuffer)(toHash));
    };
    AwsCrc32c2.prototype.digest = function() {
      return tslib_1.__awaiter(this, undefined, undefined, function() {
        return tslib_1.__generator(this, function(_a) {
          return [2, (0, util_1.numToUint8)(this.crc32c.digest())];
        });
      });
    };
    AwsCrc32c2.prototype.reset = function() {
      this.crc32c = new index_1.Crc32c;
    };
    return AwsCrc32c2;
  }();
  exports.AwsCrc32c = AwsCrc32c;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endp
var require_build3 = __commonJS((exports) => {
  var crc32c = function(data) {
    return new Crc32c().update(data).digest();
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.AwsCrc32c = exports.Crc32c = exports.crc32c = undefined;
  var tslib_1 = require_tslib3();
  var util_1 = require_build();
  exports.crc32c = crc32c;
  var Crc32c = function() {
    function Crc32c2() {
      this.checksum = 4294967295;
    }
    Crc32c2.prototype.update = function(data) {
      var e_1, _a;
      try {
        for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next();!data_1_1.done; data_1_1 = data_1.next()) {
          var byte = data_1_1.value;
          this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (data_1_1 && !data_1_1.done && (_a = data_1.return))
            _a.call(data_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return this;
    };
    Crc32c2.prototype.digest = function() {
      return (this.checksum ^ 4294967295) >>> 0;
    };
    return Crc32c2;
  }();
  exports.Crc32c = Crc32c;
  var a_lookupTable = [
    0,
    4067132163,
    3778769143,
    324072436,
    3348797215,
    904991772,
    648144872,
    3570033899,
    2329499855,
    2024987596,
    1809983544,
    2575936315,
    1296289744,
    3207089363,
    2893594407,
    1578318884,
    274646895,
    3795141740,
    4049975192,
    51262619,
    3619967088,
    632279923,
    922689671,
    3298075524,
    2592579488,
    1760304291,
    2075979607,
    2312596564,
    1562183871,
    2943781820,
    3156637768,
    1313733451,
    549293790,
    3537243613,
    3246849577,
    871202090,
    3878099393,
    357341890,
    102525238,
    4101499445,
    2858735121,
    1477399826,
    1264559846,
    3107202533,
    1845379342,
    2677391885,
    2361733625,
    2125378298,
    820201905,
    3263744690,
    3520608582,
    598981189,
    4151959214,
    85089709,
    373468761,
    3827903834,
    3124367742,
    1213305469,
    1526817161,
    2842354314,
    2107672161,
    2412447074,
    2627466902,
    1861252501,
    1098587580,
    3004210879,
    2688576843,
    1378610760,
    2262928035,
    1955203488,
    1742404180,
    2511436119,
    3416409459,
    969524848,
    714683780,
    3639785095,
    205050476,
    4266873199,
    3976438427,
    526918040,
    1361435347,
    2739821008,
    2954799652,
    1114974503,
    2529119692,
    1691668175,
    2005155131,
    2247081528,
    3690758684,
    697762079,
    986182379,
    3366744552,
    476452099,
    3993867776,
    4250756596,
    255256311,
    1640403810,
    2477592673,
    2164122517,
    1922457750,
    2791048317,
    1412925310,
    1197962378,
    3037525897,
    3944729517,
    427051182,
    170179418,
    4165941337,
    746937522,
    3740196785,
    3451792453,
    1070968646,
    1905808397,
    2213795598,
    2426610938,
    1657317369,
    3053634322,
    1147748369,
    1463399397,
    2773627110,
    4215344322,
    153784257,
    444234805,
    3893493558,
    1021025245,
    3467647198,
    3722505002,
    797665321,
    2197175160,
    1889384571,
    1674398607,
    2443626636,
    1164749927,
    3070701412,
    2757221520,
    1446797203,
    137323447,
    4198817972,
    3910406976,
    461344835,
    3484808360,
    1037989803,
    781091935,
    3705997148,
    2460548119,
    1623424788,
    1939049696,
    2180517859,
    1429367560,
    2807687179,
    3020495871,
    1180866812,
    410100952,
    3927582683,
    4182430767,
    186734380,
    3756733383,
    763408580,
    1053836080,
    3434856499,
    2722870694,
    1344288421,
    1131464017,
    2971354706,
    1708204729,
    2545590714,
    2229949006,
    1988219213,
    680717673,
    3673779818,
    3383336350,
    1002577565,
    4010310262,
    493091189,
    238226049,
    4233660802,
    2987750089,
    1082061258,
    1395524158,
    2705686845,
    1972364758,
    2279892693,
    2494862625,
    1725896226,
    952904198,
    3399985413,
    3656866545,
    731699698,
    4283874585,
    222117402,
    510512622,
    3959836397,
    3280807620,
    837199303,
    582374963,
    3504198960,
    68661723,
    4135334616,
    3844915500,
    390545967,
    1230274059,
    3141532936,
    2825850620,
    1510247935,
    2395924756,
    2091215383,
    1878366691,
    2644384480,
    3553878443,
    565732008,
    854102364,
    3229815391,
    340358836,
    3861050807,
    4117890627,
    119113024,
    1493875044,
    2875275879,
    3090270611,
    1247431312,
    2660249211,
    1828433272,
    2141937292,
    2378227087,
    3811616794,
    291187481,
    34330861,
    4032846830,
    615137029,
    3603020806,
    3314634738,
    939183345,
    1776939221,
    2609017814,
    2295496738,
    2058945313,
    2926798794,
    1545135305,
    1330124605,
    3173225534,
    4084100981,
    17165430,
    307568514,
    3762199681,
    888469610,
    3332340585,
    3587147933,
    665062302,
    2042050490,
    2346497209,
    2559330125,
    1793573966,
    3190661285,
    1279665062,
    1595330642,
    2910671697
  ];
  var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookupTable);
  var aws_crc32c_1 = require_aws_crc32c();
  Object.defineProperty(exports, "AwsCrc32c", { enumerable: true, get: function() {
    return aws_crc32c_1.AwsCrc32c;
  } });
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.jsnode.jsjssand.jsm-on-buffer.js
var require_create_read_stream_on_buffer = __commonJS((exports) => {
  var createReadStreamOnBuffer = function(buffer) {
    const stream = new stream_1.Transform;
    stream.push(buffer);
    stream.push(null);
    return stream;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createReadStreamOnBuffer = undefined;
  var stream_1 = __require("stream");
  exports.createReadStreamOnBuffer = createReadStreamOnBuffer;
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.jssolver.j
var require_dist_cjs67 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    ChecksumAlgorithm: () => ChecksumAlgorithm,
    ChecksumLocation: () => ChecksumLocation,
    DEFAULT_CHECKSUM_ALGORITHM: () => DEFAULT_CHECKSUM_ALGORITHM,
    S3_EXPRESS_DEFAULT_CHECKSUM_ALGORITHM: () => S3_EXPRESS_DEFAULT_CHECKSUM_ALGORITHM,
    flexibleChecksumsMiddleware: () => flexibleChecksumsMiddleware,
    flexibleChecksumsMiddlewareOptions: () => flexibleChecksumsMiddlewareOptions,
    getFlexibleChecksumsPlugin: () => getFlexibleChecksumsPlugin
  });
  module.exports = __toCommonJS(src_exports);
  var ChecksumAlgorithm = ((ChecksumAlgorithm3) => {
    ChecksumAlgorithm3["MD5"] = "MD5";
    ChecksumAlgorithm3["CRC32"] = "CRC32";
    ChecksumAlgorithm3["CRC32C"] = "CRC32C";
    ChecksumAlgorithm3["SHA1"] = "SHA1";
    ChecksumAlgorithm3["SHA256"] = "SHA256";
    return ChecksumAlgorithm3;
  })(ChecksumAlgorithm || {});
  var ChecksumLocation = ((ChecksumLocation2) => {
    ChecksumLocation2["HEADER"] = "header";
    ChecksumLocation2["TRAILER"] = "trailer";
    return ChecksumLocation2;
  })(ChecksumLocation || {});
  var DEFAULT_CHECKSUM_ALGORITHM = "MD5";
  var S3_EXPRESS_DEFAULT_CHECKSUM_ALGORITHM = "CRC32";
  var import_protocol_http = require_dist_cjs2();
  var CLIENT_SUPPORTED_ALGORITHMS = [
    "CRC32",
    "CRC32C",
    "SHA1",
    "SHA256"
  ];
  var PRIORITY_ORDER_ALGORITHMS = [
    "CRC32",
    "CRC32C",
    "SHA1",
    "SHA256"
  ];
  var getChecksumAlgorithmForRequest = __name((input, { requestChecksumRequired, requestAlgorithmMember }, isS3Express) => {
    const defaultAlgorithm = isS3Express ? S3_EXPRESS_DEFAULT_CHECKSUM_ALGORITHM : DEFAULT_CHECKSUM_ALGORITHM;
    if (!requestAlgorithmMember || !input[requestAlgorithmMember]) {
      return requestChecksumRequired ? defaultAlgorithm : undefined;
    }
    const checksumAlgorithm = input[requestAlgorithmMember];
    if (!CLIENT_SUPPORTED_ALGORITHMS.includes(checksumAlgorithm)) {
      throw new Error(`The checksum algorithm "${checksumAlgorithm}" is not supported by the client. Select one of ${CLIENT_SUPPORTED_ALGORITHMS}.`);
    }
    return checksumAlgorithm;
  }, "getChecksumAlgorithmForRequest");
  var getChecksumLocationName = __name((algorithm) => algorithm === "MD5" ? "content-md5" : `x-amz-checksum-${algorithm.toLowerCase()}`, "getChecksumLocationName");
  var hasHeader = __name((header, headers) => {
    const soughtHeader = header.toLowerCase();
    for (const headerName of Object.keys(headers)) {
      if (soughtHeader === headerName.toLowerCase()) {
        return true;
      }
    }
    return false;
  }, "hasHeader");
  var import_is_array_buffer = require_dist_cjs8();
  var isStreaming = __name((body) => body !== undefined && typeof body !== "string" && !ArrayBuffer.isView(body) && !(0, import_is_array_buffer.isArrayBuffer)(body), "isStreaming");
  var import_crc32 = require_build2();
  var import_crc32c = require_build3();
  var selectChecksumAlgorithmFunction = __name((checksumAlgorithm, config) => ({
    ["MD5"]: config.md5,
    ["CRC32"]: import_crc32.AwsCrc32,
    ["CRC32C"]: import_crc32c.AwsCrc32c,
    ["SHA1"]: config.sha1,
    ["SHA256"]: config.sha256
  })[checksumAlgorithm], "selectChecksumAlgorithmFunction");
  var import_util_utf8 = require_dist_cjs11();
  var stringHasher = __name((checksumAlgorithmFn, body) => {
    const hash = new checksumAlgorithmFn;
    hash.update((0, import_util_utf8.toUint8Array)(body || ""));
    return hash.digest();
  }, "stringHasher");
  var flexibleChecksumsMiddlewareOptions = {
    name: "flexibleChecksumsMiddleware",
    step: "build",
    tags: ["BODY_CHECKSUM"],
    override: true
  };
  var flexibleChecksumsMiddleware = __name((config, middlewareConfig) => (next, context) => async (args) => {
    if (!import_protocol_http.HttpRequest.isInstance(args.request)) {
      return next(args);
    }
    const { request } = args;
    const { body: requestBody, headers } = request;
    const { base64Encoder, streamHasher } = config;
    const { input, requestChecksumRequired, requestAlgorithmMember } = middlewareConfig;
    const checksumAlgorithm = getChecksumAlgorithmForRequest(input, {
      requestChecksumRequired,
      requestAlgorithmMember
    }, !!context.isS3ExpressBucket);
    let updatedBody = requestBody;
    let updatedHeaders = headers;
    if (checksumAlgorithm) {
      const checksumLocationName = getChecksumLocationName(checksumAlgorithm);
      const checksumAlgorithmFn = selectChecksumAlgorithmFunction(checksumAlgorithm, config);
      if (isStreaming(requestBody)) {
        const { getAwsChunkedEncodingStream: getAwsChunkedEncodingStream2, bodyLengthChecker } = config;
        updatedBody = getAwsChunkedEncodingStream2(requestBody, {
          base64Encoder,
          bodyLengthChecker,
          checksumLocationName,
          checksumAlgorithmFn,
          streamHasher
        });
        updatedHeaders = {
          ...headers,
          "content-encoding": headers["content-encoding"] ? `${headers["content-encoding"]},aws-chunked` : "aws-chunked",
          "transfer-encoding": "chunked",
          "x-amz-decoded-content-length": headers["content-length"],
          "x-amz-content-sha256": "STREAMING-UNSIGNED-PAYLOAD-TRAILER",
          "x-amz-trailer": checksumLocationName
        };
        delete updatedHeaders["content-length"];
      } else if (!hasHeader(checksumLocationName, headers)) {
        const rawChecksum = await stringHasher(checksumAlgorithmFn, requestBody);
        updatedHeaders = {
          ...headers,
          [checksumLocationName]: base64Encoder(rawChecksum)
        };
      }
    }
    const result = await next({
      ...args,
      request: {
        ...request,
        headers: updatedHeaders,
        body: updatedBody
      }
    });
    return result;
  }, "flexibleChecksumsMiddleware");
  var getChecksumAlgorithmListForResponse = __name((responseAlgorithms = []) => {
    const validChecksumAlgorithms = [];
    for (const algorithm of PRIORITY_ORDER_ALGORITHMS) {
      if (!responseAlgorithms.includes(algorithm) || !CLIENT_SUPPORTED_ALGORITHMS.includes(algorithm)) {
        continue;
      }
      validChecksumAlgorithms.push(algorithm);
    }
    return validChecksumAlgorithms;
  }, "getChecksumAlgorithmListForResponse");
  var isChecksumWithPartNumber = __name((checksum) => {
    const lastHyphenIndex = checksum.lastIndexOf("-");
    if (lastHyphenIndex !== -1) {
      const numberPart = checksum.slice(lastHyphenIndex + 1);
      if (!numberPart.startsWith("0")) {
        const number = parseInt(numberPart, 10);
        if (!isNaN(number) && number >= 1 && number <= 1e4) {
          return true;
        }
      }
    }
    return false;
  }, "isChecksumWithPartNumber");
  var import_create_read_stream_on_buffer = require_create_read_stream_on_buffer();
  var getChecksum = __name(async (body, { streamHasher, checksumAlgorithmFn, base64Encoder }) => {
    const digest = isStreaming(body) ? streamHasher(checksumAlgorithmFn, body) : stringHasher(checksumAlgorithmFn, body);
    return base64Encoder(await digest);
  }, "getChecksum");
  var validateChecksumFromResponse = __name(async (response, { config, responseAlgorithms }) => {
    const checksumAlgorithms = getChecksumAlgorithmListForResponse(responseAlgorithms);
    const { body: responseBody, headers: responseHeaders } = response;
    for (const algorithm of checksumAlgorithms) {
      const responseHeader = getChecksumLocationName(algorithm);
      const checksumFromResponse = responseHeaders[responseHeader];
      if (checksumFromResponse) {
        const checksumAlgorithmFn = selectChecksumAlgorithmFunction(algorithm, config);
        const { streamHasher, base64Encoder } = config;
        const checksum = await getChecksum(responseBody, { streamHasher, checksumAlgorithmFn, base64Encoder });
        if (checksum === checksumFromResponse) {
          break;
        }
        throw new Error(`Checksum mismatch: expected "${checksum}" but received "${checksumFromResponse}" in response header "${responseHeader}".`);
      }
    }
  }, "validateChecksumFromResponse");
  var flexibleChecksumsResponseMiddlewareOptions = {
    name: "flexibleChecksumsResponseMiddleware",
    toMiddleware: "deserializerMiddleware",
    relation: "after",
    tags: ["BODY_CHECKSUM"],
    override: true
  };
  var flexibleChecksumsResponseMiddleware = __name((config, middlewareConfig) => (next, context) => async (args) => {
    if (!import_protocol_http.HttpRequest.isInstance(args.request)) {
      return next(args);
    }
    const input = args.input;
    const result = await next(args);
    const response = result.response;
    let collectedStream = undefined;
    const { requestValidationModeMember, responseAlgorithms } = middlewareConfig;
    if (requestValidationModeMember && input[requestValidationModeMember] === "ENABLED") {
      const { clientName, commandName } = context;
      const isS3WholeObjectMultipartGetResponseChecksum = clientName === "S3Client" && commandName === "GetObjectCommand" && getChecksumAlgorithmListForResponse(responseAlgorithms).every((algorithm) => {
        const responseHeader = getChecksumLocationName(algorithm);
        const checksumFromResponse = response.headers[responseHeader];
        return !checksumFromResponse || isChecksumWithPartNumber(checksumFromResponse);
      });
      if (isS3WholeObjectMultipartGetResponseChecksum) {
        return result;
      }
      const isStreamingBody = isStreaming(response.body);
      if (isStreamingBody) {
        collectedStream = await config.streamCollector(response.body);
        response.body = (0, import_create_read_stream_on_buffer.createReadStreamOnBuffer)(collectedStream);
      }
      await validateChecksumFromResponse(result.response, {
        config,
        responseAlgorithms
      });
      if (isStreamingBody && collectedStream) {
        response.body = (0, import_create_read_stream_on_buffer.createReadStreamOnBuffer)(collectedStream);
      }
    }
    return result;
  }, "flexibleChecksumsResponseMiddleware");
  var getFlexibleChecksumsPlugin = __name((config, middlewareConfig) => ({
    applyToStack: (clientStack) => {
      clientStack.add(flexibleChecksumsMiddleware(config, middlewareConfig), flexibleChecksumsMiddlewareOptions);
      clientStack.addRelativeTo(flexibleChecksumsResponseMiddleware(config, middlewareConfig), flexibleChecksumsResponseMiddlewareOptions);
    }
  }), "getFlexibleChecksumsPlugin");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint
var require_dist_cjs68 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    WaiterState: () => WaiterState,
    checkExceptions: () => checkExceptions,
    createWaiter: () => createWaiter,
    waiterServiceDefaults: () => waiterServiceDefaults
  });
  module.exports = __toCommonJS(src_exports);
  var sleep = __name((seconds) => {
    return new Promise((resolve) => setTimeout(resolve, seconds * 1000));
  }, "sleep");
  var waiterServiceDefaults = {
    minDelay: 2,
    maxDelay: 120
  };
  var WaiterState = ((WaiterState2) => {
    WaiterState2["ABORTED"] = "ABORTED";
    WaiterState2["FAILURE"] = "FAILURE";
    WaiterState2["SUCCESS"] = "SUCCESS";
    WaiterState2["RETRY"] = "RETRY";
    WaiterState2["TIMEOUT"] = "TIMEOUT";
    return WaiterState2;
  })(WaiterState || {});
  var checkExceptions = __name((result) => {
    if (result.state === "ABORTED") {
      const abortError = new Error(`${JSON.stringify({
        ...result,
        reason: "Request was aborted"
      })}`);
      abortError.name = "AbortError";
      throw abortError;
    } else if (result.state === "TIMEOUT") {
      const timeoutError = new Error(`${JSON.stringify({
        ...result,
        reason: "Waiter has timed out"
      })}`);
      timeoutError.name = "TimeoutError";
      throw timeoutError;
    } else if (result.state !== "SUCCESS") {
      throw new Error(`${JSON.stringify({ result })}`);
    }
    return result;
  }, "checkExceptions");
  var exponentialBackoffWithJitter = __name((minDelay, maxDelay, attemptCeiling, attempt) => {
    if (attempt > attemptCeiling)
      return maxDelay;
    const delay = minDelay * 2 ** (attempt - 1);
    return randomInRange(minDelay, delay);
  }, "exponentialBackoffWithJitter");
  var randomInRange = __name((min, max) => min + Math.random() * (max - min), "randomInRange");
  var runPolling = __name(async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
    var _a;
    const { state, reason } = await acceptorChecks(client, input);
    if (state !== "RETRY") {
      return { state, reason };
    }
    let currentAttempt = 1;
    const waitUntil = Date.now() + maxWaitTime * 1000;
    const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
    while (true) {
      if (((_a = abortController == null ? undefined : abortController.signal) == null ? undefined : _a.aborted) || (abortSignal == null ? undefined : abortSignal.aborted)) {
        return { state: "ABORTED" };
      }
      const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
      if (Date.now() + delay * 1000 > waitUntil) {
        return { state: "TIMEOUT" };
      }
      await sleep(delay);
      const { state: state2, reason: reason2 } = await acceptorChecks(client, input);
      if (state2 !== "RETRY") {
        return { state: state2, reason: reason2 };
      }
      currentAttempt += 1;
    }
  }, "runPolling");
  var validateWaiterOptions = __name((options) => {
    if (options.maxWaitTime < 1) {
      throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
    } else if (options.minDelay < 1) {
      throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
    } else if (options.maxDelay < 1) {
      throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
    } else if (options.maxWaitTime <= options.minDelay) {
      throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
    } else if (options.maxDelay < options.minDelay) {
      throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
    }
  }, "validateWaiterOptions");
  var abortTimeout = __name(async (abortSignal) => {
    return new Promise((resolve) => {
      abortSignal.onabort = () => resolve({ state: "ABORTED" });
    });
  }, "abortTimeout");
  var createWaiter = __name(async (options, input, acceptorChecks) => {
    const params = {
      ...waiterServiceDefaults,
      ...options
    };
    validateWaiterOptions(params);
    const exitConditions = [runPolling(params, input, acceptorChecks)];
    if (options.abortController) {
      exitConditions.push(abortTimeout(options.abortController.signal));
    }
    if (options.abortSignal) {
      exitConditions.push(abortTimeout(options.abortSignal));
    }
    return Promise.race(exitConditions);
  }, "createWaiter");
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoin
var require_dist_cjs69 = __commonJS((exports, module) => {
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
  var src_exports = {};
  __export2(src_exports, {
    AbortMultipartUploadCommand: () => AbortMultipartUploadCommand,
    AnalyticsFilter: () => AnalyticsFilter,
    AnalyticsS3ExportFileFormat: () => AnalyticsS3ExportFileFormat,
    ArchiveStatus: () => ArchiveStatus,
    BucketAccelerateStatus: () => BucketAccelerateStatus,
    BucketAlreadyExists: () => BucketAlreadyExists,
    BucketAlreadyOwnedByYou: () => BucketAlreadyOwnedByYou,
    BucketCannedACL: () => BucketCannedACL,
    BucketLocationConstraint: () => BucketLocationConstraint,
    BucketLogsPermission: () => BucketLogsPermission,
    BucketType: () => BucketType,
    BucketVersioningStatus: () => BucketVersioningStatus,
    ChecksumAlgorithm: () => ChecksumAlgorithm,
    ChecksumMode: () => ChecksumMode,
    CompleteMultipartUploadCommand: () => CompleteMultipartUploadCommand,
    CompleteMultipartUploadOutputFilterSensitiveLog: () => CompleteMultipartUploadOutputFilterSensitiveLog,
    CompleteMultipartUploadRequestFilterSensitiveLog: () => CompleteMultipartUploadRequestFilterSensitiveLog,
    CompressionType: () => CompressionType,
    CopyObjectCommand: () => CopyObjectCommand,
    CopyObjectOutputFilterSensitiveLog: () => CopyObjectOutputFilterSensitiveLog,
    CopyObjectRequestFilterSensitiveLog: () => CopyObjectRequestFilterSensitiveLog,
    CreateBucketCommand: () => CreateBucketCommand,
    CreateMultipartUploadCommand: () => CreateMultipartUploadCommand,
    CreateMultipartUploadOutputFilterSensitiveLog: () => CreateMultipartUploadOutputFilterSensitiveLog,
    CreateMultipartUploadRequestFilterSensitiveLog: () => CreateMultipartUploadRequestFilterSensitiveLog,
    CreateSessionCommand: () => CreateSessionCommand,
    CreateSessionOutputFilterSensitiveLog: () => CreateSessionOutputFilterSensitiveLog,
    DataRedundancy: () => DataRedundancy,
    DeleteBucketAnalyticsConfigurationCommand: () => DeleteBucketAnalyticsConfigurationCommand,
    DeleteBucketCommand: () => DeleteBucketCommand,
    DeleteBucketCorsCommand: () => DeleteBucketCorsCommand,
    DeleteBucketEncryptionCommand: () => DeleteBucketEncryptionCommand,
    DeleteBucketIntelligentTieringConfigurationCommand: () => DeleteBucketIntelligentTieringConfigurationCommand,
    DeleteBucketInventoryConfigurationCommand: () => DeleteBucketInventoryConfigurationCommand,
    DeleteBucketLifecycleCommand: () => DeleteBucketLifecycleCommand,
    DeleteBucketMetricsConfigurationCommand: () => DeleteBucketMetricsConfigurationCommand,
    DeleteBucketOwnershipControlsCommand: () => DeleteBucketOwnershipControlsCommand,
    DeleteBucketPolicyCommand: () => DeleteBucketPolicyCommand,
    DeleteBucketReplicationCommand: () => DeleteBucketReplicationCommand,
    DeleteBucketTaggingCommand: () => DeleteBucketTaggingCommand,
    DeleteBucketWebsiteCommand: () => DeleteBucketWebsiteCommand,
    DeleteMarkerReplicationStatus: () => DeleteMarkerReplicationStatus,
    DeleteObjectCommand: () => DeleteObjectCommand,
    DeleteObjectTaggingCommand: () => DeleteObjectTaggingCommand,
    DeleteObjectsCommand: () => DeleteObjectsCommand,
    DeletePublicAccessBlockCommand: () => DeletePublicAccessBlockCommand,
    EncodingType: () => EncodingType,
    EncryptionFilterSensitiveLog: () => EncryptionFilterSensitiveLog,
    Event: () => Event,
    ExistingObjectReplicationStatus: () => ExistingObjectReplicationStatus,
    ExpirationStatus: () => ExpirationStatus,
    ExpressionType: () => ExpressionType,
    FileHeaderInfo: () => FileHeaderInfo,
    FilterRuleName: () => FilterRuleName,
    GetBucketAccelerateConfigurationCommand: () => GetBucketAccelerateConfigurationCommand,
    GetBucketAclCommand: () => GetBucketAclCommand,
    GetBucketAnalyticsConfigurationCommand: () => GetBucketAnalyticsConfigurationCommand,
    GetBucketCorsCommand: () => GetBucketCorsCommand,
    GetBucketEncryptionCommand: () => GetBucketEncryptionCommand,
    GetBucketEncryptionOutputFilterSensitiveLog: () => GetBucketEncryptionOutputFilterSensitiveLog,
    GetBucketIntelligentTieringConfigurationCommand: () => GetBucketIntelligentTieringConfigurationCommand,
    GetBucketInventoryConfigurationCommand: () => GetBucketInventoryConfigurationCommand,
    GetBucketInventoryConfigurationOutputFilterSensitiveLog: () => GetBucketInventoryConfigurationOutputFilterSensitiveLog,
    GetBucketLifecycleConfigurationCommand: () => GetBucketLifecycleConfigurationCommand,
    GetBucketLocationCommand: () => GetBucketLocationCommand,
    GetBucketLoggingCommand: () => GetBucketLoggingCommand,
    GetBucketMetricsConfigurationCommand: () => GetBucketMetricsConfigurationCommand,
    GetBucketNotificationConfigurationCommand: () => GetBucketNotificationConfigurationCommand,
    GetBucketOwnershipControlsCommand: () => GetBucketOwnershipControlsCommand,
    GetBucketPolicyCommand: () => GetBucketPolicyCommand,
    GetBucketPolicyStatusCommand: () => GetBucketPolicyStatusCommand,
    GetBucketReplicationCommand: () => GetBucketReplicationCommand,
    GetBucketRequestPaymentCommand: () => GetBucketRequestPaymentCommand,
    GetBucketTaggingCommand: () => GetBucketTaggingCommand,
    GetBucketVersioningCommand: () => GetBucketVersioningCommand,
    GetBucketWebsiteCommand: () => GetBucketWebsiteCommand,
    GetObjectAclCommand: () => GetObjectAclCommand,
    GetObjectAttributesCommand: () => GetObjectAttributesCommand,
    GetObjectAttributesRequestFilterSensitiveLog: () => GetObjectAttributesRequestFilterSensitiveLog,
    GetObjectCommand: () => GetObjectCommand,
    GetObjectLegalHoldCommand: () => GetObjectLegalHoldCommand,
    GetObjectLockConfigurationCommand: () => GetObjectLockConfigurationCommand,
    GetObjectOutputFilterSensitiveLog: () => GetObjectOutputFilterSensitiveLog,
    GetObjectRequestFilterSensitiveLog: () => GetObjectRequestFilterSensitiveLog,
    GetObjectRetentionCommand: () => GetObjectRetentionCommand,
    GetObjectTaggingCommand: () => GetObjectTaggingCommand,
    GetObjectTorrentCommand: () => GetObjectTorrentCommand,
    GetObjectTorrentOutputFilterSensitiveLog: () => GetObjectTorrentOutputFilterSensitiveLog,
    GetPublicAccessBlockCommand: () => GetPublicAccessBlockCommand,
    HeadBucketCommand: () => HeadBucketCommand,
    HeadObjectCommand: () => HeadObjectCommand,
    HeadObjectOutputFilterSensitiveLog: () => HeadObjectOutputFilterSensitiveLog,
    HeadObjectRequestFilterSensitiveLog: () => HeadObjectRequestFilterSensitiveLog,
    IntelligentTieringAccessTier: () => IntelligentTieringAccessTier,
    IntelligentTieringStatus: () => IntelligentTieringStatus,
    InvalidObjectState: () => InvalidObjectState,
    InventoryConfigurationFilterSensitiveLog: () => InventoryConfigurationFilterSensitiveLog,
    InventoryDestinationFilterSensitiveLog: () => InventoryDestinationFilterSensitiveLog,
    InventoryEncryptionFilterSensitiveLog: () => InventoryEncryptionFilterSensitiveLog,
    InventoryFormat: () => InventoryFormat,
    InventoryFrequency: () => InventoryFrequency,
    InventoryIncludedObjectVersions: () => InventoryIncludedObjectVersions,
    InventoryOptionalField: () => InventoryOptionalField,
    InventoryS3BucketDestinationFilterSensitiveLog: () => InventoryS3BucketDestinationFilterSensitiveLog,
    JSONType: () => JSONType,
    LifecycleRuleFilter: () => LifecycleRuleFilter,
    ListBucketAnalyticsConfigurationsCommand: () => ListBucketAnalyticsConfigurationsCommand,
    ListBucketIntelligentTieringConfigurationsCommand: () => ListBucketIntelligentTieringConfigurationsCommand,
    ListBucketInventoryConfigurationsCommand: () => ListBucketInventoryConfigurationsCommand,
    ListBucketInventoryConfigurationsOutputFilterSensitiveLog: () => ListBucketInventoryConfigurationsOutputFilterSensitiveLog,
    ListBucketMetricsConfigurationsCommand: () => ListBucketMetricsConfigurationsCommand,
    ListBucketsCommand: () => ListBucketsCommand,
    ListDirectoryBucketsCommand: () => ListDirectoryBucketsCommand,
    ListMultipartUploadsCommand: () => ListMultipartUploadsCommand,
    ListObjectVersionsCommand: () => ListObjectVersionsCommand,
    ListObjectsCommand: () => ListObjectsCommand,
    ListObjectsV2Command: () => ListObjectsV2Command,
    ListPartsCommand: () => ListPartsCommand,
    ListPartsRequestFilterSensitiveLog: () => ListPartsRequestFilterSensitiveLog,
    LocationType: () => LocationType,
    MFADelete: () => MFADelete,
    MFADeleteStatus: () => MFADeleteStatus,
    MetadataDirective: () => MetadataDirective,
    MetricsFilter: () => MetricsFilter,
    MetricsStatus: () => MetricsStatus,
    NoSuchBucket: () => NoSuchBucket,
    NoSuchKey: () => NoSuchKey,
    NoSuchUpload: () => NoSuchUpload,
    NotFound: () => NotFound,
    ObjectAlreadyInActiveTierError: () => ObjectAlreadyInActiveTierError,
    ObjectAttributes: () => ObjectAttributes,
    ObjectCannedACL: () => ObjectCannedACL,
    ObjectLockEnabled: () => ObjectLockEnabled,
    ObjectLockLegalHoldStatus: () => ObjectLockLegalHoldStatus,
    ObjectLockMode: () => ObjectLockMode,
    ObjectLockRetentionMode: () => ObjectLockRetentionMode,
    ObjectNotInActiveTierError: () => ObjectNotInActiveTierError,
    ObjectOwnership: () => ObjectOwnership,
    ObjectStorageClass: () => ObjectStorageClass,
    ObjectVersionStorageClass: () => ObjectVersionStorageClass,
    OptionalObjectAttributes: () => OptionalObjectAttributes,
    OutputLocationFilterSensitiveLog: () => OutputLocationFilterSensitiveLog,
    OwnerOverride: () => OwnerOverride,
    PartitionDateSource: () => PartitionDateSource,
    Payer: () => Payer,
    Permission: () => Permission,
    Protocol: () => Protocol,
    PutBucketAccelerateConfigurationCommand: () => PutBucketAccelerateConfigurationCommand,
    PutBucketAclCommand: () => PutBucketAclCommand,
    PutBucketAnalyticsConfigurationCommand: () => PutBucketAnalyticsConfigurationCommand,
    PutBucketCorsCommand: () => PutBucketCorsCommand,
    PutBucketEncryptionCommand: () => PutBucketEncryptionCommand,
    PutBucketEncryptionRequestFilterSensitiveLog: () => PutBucketEncryptionRequestFilterSensitiveLog,
    PutBucketIntelligentTieringConfigurationCommand: () => PutBucketIntelligentTieringConfigurationCommand,
    PutBucketInventoryConfigurationCommand: () => PutBucketInventoryConfigurationCommand,
    PutBucketInventoryConfigurationRequestFilterSensitiveLog: () => PutBucketInventoryConfigurationRequestFilterSensitiveLog,
    PutBucketLifecycleConfigurationCommand: () => PutBucketLifecycleConfigurationCommand,
    PutBucketLoggingCommand: () => PutBucketLoggingCommand,
    PutBucketMetricsConfigurationCommand: () => PutBucketMetricsConfigurationCommand,
    PutBucketNotificationConfigurationCommand: () => PutBucketNotificationConfigurationCommand,
    PutBucketOwnershipControlsCommand: () => PutBucketOwnershipControlsCommand,
    PutBucketPolicyCommand: () => PutBucketPolicyCommand,
    PutBucketReplicationCommand: () => PutBucketReplicationCommand,
    PutBucketRequestPaymentCommand: () => PutBucketRequestPaymentCommand,
    PutBucketTaggingCommand: () => PutBucketTaggingCommand,
    PutBucketVersioningCommand: () => PutBucketVersioningCommand,
    PutBucketWebsiteCommand: () => PutBucketWebsiteCommand,
    PutObjectAclCommand: () => PutObjectAclCommand,
    PutObjectCommand: () => PutObjectCommand,
    PutObjectLegalHoldCommand: () => PutObjectLegalHoldCommand,
    PutObjectLockConfigurationCommand: () => PutObjectLockConfigurationCommand,
    PutObjectOutputFilterSensitiveLog: () => PutObjectOutputFilterSensitiveLog,
    PutObjectRequestFilterSensitiveLog: () => PutObjectRequestFilterSensitiveLog,
    PutObjectRetentionCommand: () => PutObjectRetentionCommand,
    PutObjectTaggingCommand: () => PutObjectTaggingCommand,
    PutPublicAccessBlockCommand: () => PutPublicAccessBlockCommand,
    QuoteFields: () => QuoteFields,
    ReplicaModificationsStatus: () => ReplicaModificationsStatus,
    ReplicationRuleFilter: () => ReplicationRuleFilter,
    ReplicationRuleStatus: () => ReplicationRuleStatus,
    ReplicationStatus: () => ReplicationStatus,
    ReplicationTimeStatus: () => ReplicationTimeStatus,
    RequestCharged: () => RequestCharged,
    RequestPayer: () => RequestPayer,
    RestoreObjectCommand: () => RestoreObjectCommand,
    RestoreObjectRequestFilterSensitiveLog: () => RestoreObjectRequestFilterSensitiveLog,
    RestoreRequestFilterSensitiveLog: () => RestoreRequestFilterSensitiveLog,
    RestoreRequestType: () => RestoreRequestType,
    S3: () => S3,
    S3Client: () => S3Client,
    S3LocationFilterSensitiveLog: () => S3LocationFilterSensitiveLog,
    S3ServiceException: () => S3ServiceException,
    SSEKMSFilterSensitiveLog: () => SSEKMSFilterSensitiveLog,
    SelectObjectContentCommand: () => SelectObjectContentCommand,
    SelectObjectContentEventStream: () => SelectObjectContentEventStream,
    SelectObjectContentEventStreamFilterSensitiveLog: () => SelectObjectContentEventStreamFilterSensitiveLog,
    SelectObjectContentOutputFilterSensitiveLog: () => SelectObjectContentOutputFilterSensitiveLog,
    SelectObjectContentRequestFilterSensitiveLog: () => SelectObjectContentRequestFilterSensitiveLog,
    ServerSideEncryption: () => ServerSideEncryption,
    ServerSideEncryptionByDefaultFilterSensitiveLog: () => ServerSideEncryptionByDefaultFilterSensitiveLog,
    ServerSideEncryptionConfigurationFilterSensitiveLog: () => ServerSideEncryptionConfigurationFilterSensitiveLog,
    ServerSideEncryptionRuleFilterSensitiveLog: () => ServerSideEncryptionRuleFilterSensitiveLog,
    SessionCredentialsFilterSensitiveLog: () => SessionCredentialsFilterSensitiveLog,
    SessionMode: () => SessionMode,
    SseKmsEncryptedObjectsStatus: () => SseKmsEncryptedObjectsStatus,
    StorageClass: () => StorageClass,
    StorageClassAnalysisSchemaVersion: () => StorageClassAnalysisSchemaVersion,
    TaggingDirective: () => TaggingDirective,
    Tier: () => Tier,
    TransitionStorageClass: () => TransitionStorageClass,
    Type: () => Type,
    UploadPartCommand: () => UploadPartCommand,
    UploadPartCopyCommand: () => UploadPartCopyCommand,
    UploadPartCopyOutputFilterSensitiveLog: () => UploadPartCopyOutputFilterSensitiveLog,
    UploadPartCopyRequestFilterSensitiveLog: () => UploadPartCopyRequestFilterSensitiveLog,
    UploadPartOutputFilterSensitiveLog: () => UploadPartOutputFilterSensitiveLog,
    UploadPartRequestFilterSensitiveLog: () => UploadPartRequestFilterSensitiveLog,
    WriteGetObjectResponseCommand: () => WriteGetObjectResponseCommand,
    WriteGetObjectResponseRequestFilterSensitiveLog: () => WriteGetObjectResponseRequestFilterSensitiveLog,
    __Client: () => import_smithy_client.Client,
    paginateListDirectoryBuckets: () => paginateListDirectoryBuckets,
    paginateListObjectsV2: () => paginateListObjectsV2,
    paginateListParts: () => paginateListParts,
    waitForBucketExists: () => waitForBucketExists,
    waitForBucketNotExists: () => waitForBucketNotExists,
    waitForObjectExists: () => waitForObjectExists,
    waitForObjectNotExists: () => waitForObjectNotExists,
    waitUntilBucketExists: () => waitUntilBucketExists,
    waitUntilBucketNotExists: () => waitUntilBucketNotExists,
    waitUntilObjectExists: () => waitUntilObjectExists,
    waitUntilObjectNotExists: () => waitUntilObjectNotExists
  });
  module.exports = __toCommonJS(src_exports);
  var import_middleware_expect_continue = require_dist_cjs3();
  var import_middleware_host_header = require_dist_cjs4();
  var import_middleware_logger = require_dist_cjs5();
  var import_middleware_recursion_detection = require_dist_cjs6();
  var import_middleware_sdk_s3 = require_dist_cjs24();
  var import_middleware_signing = require_dist_cjs26();
  var import_middleware_user_agent = require_dist_cjs29();
  var import_config_resolver = require_dist_cjs30();
  var import_eventstream_serde_config_resolver = require_dist_cjs31();
  var import_middleware_content_length = require_dist_cjs32();
  var import_middleware_retry = require_dist_cjs35();
  var import_middleware_endpoint = require_dist_cjs41();
  var import_middleware_serde = require_dist_cjs40();
  var import_types = require_dist_cjs();
  var resolveClientEndpointParameters = __name((options) => {
    return {
      ...options,
      useFipsEndpoint: options.useFipsEndpoint ?? false,
      useDualstackEndpoint: options.useDualstackEndpoint ?? false,
      forcePathStyle: options.forcePathStyle ?? false,
      useAccelerateEndpoint: options.useAccelerateEndpoint ?? false,
      useGlobalEndpoint: options.useGlobalEndpoint ?? false,
      disableMultiregionAccessPoints: options.disableMultiregionAccessPoints ?? false,
      defaultSigningName: "s3"
    };
  }, "resolveClientEndpointParameters");
  var commonParams = {
    ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
    UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
    DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
    Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
    DisableS3ExpressSessionAuth: { type: "clientContextParams", name: "disableS3ExpressSessionAuth" },
    UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
  };
  var import_smithy_client = require_dist_cjs16();
  var _S3ServiceException = class _S3ServiceException2 extends import_smithy_client.ServiceException {
    constructor(options) {
      super(options);
      Object.setPrototypeOf(this, _S3ServiceException2.prototype);
    }
  };
  __name(_S3ServiceException, "S3ServiceException");
  var S3ServiceException = _S3ServiceException;
  var RequestCharged = {
    requester: "requester"
  };
  var RequestPayer = {
    requester: "requester"
  };
  var _NoSuchUpload = class _NoSuchUpload2 extends S3ServiceException {
    constructor(opts) {
      super({
        name: "NoSuchUpload",
        $fault: "client",
        ...opts
      });
      this.name = "NoSuchUpload";
      this.$fault = "client";
      Object.setPrototypeOf(this, _NoSuchUpload2.prototype);
    }
  };
  __name(_NoSuchUpload, "NoSuchUpload");
  var NoSuchUpload = _NoSuchUpload;
  var BucketAccelerateStatus = {
    Enabled: "Enabled",
    Suspended: "Suspended"
  };
  var Type = {
    AmazonCustomerByEmail: "AmazonCustomerByEmail",
    CanonicalUser: "CanonicalUser",
    Group: "Group"
  };
  var Permission = {
    FULL_CONTROL: "FULL_CONTROL",
    READ: "READ",
    READ_ACP: "READ_ACP",
    WRITE: "WRITE",
    WRITE_ACP: "WRITE_ACP"
  };
  var OwnerOverride = {
    Destination: "Destination"
  };
  var ServerSideEncryption = {
    AES256: "AES256",
    aws_kms: "aws:kms",
    aws_kms_dsse: "aws:kms:dsse"
  };
  var ObjectCannedACL = {
    authenticated_read: "authenticated-read",
    aws_exec_read: "aws-exec-read",
    bucket_owner_full_control: "bucket-owner-full-control",
    bucket_owner_read: "bucket-owner-read",
    private: "private",
    public_read: "public-read",
    public_read_write: "public-read-write"
  };
  var ChecksumAlgorithm = {
    CRC32: "CRC32",
    CRC32C: "CRC32C",
    SHA1: "SHA1",
    SHA256: "SHA256"
  };
  var MetadataDirective = {
    COPY: "COPY",
    REPLACE: "REPLACE"
  };
  var ObjectLockLegalHoldStatus = {
    OFF: "OFF",
    ON: "ON"
  };
  var ObjectLockMode = {
    COMPLIANCE: "COMPLIANCE",
    GOVERNANCE: "GOVERNANCE"
  };
  var StorageClass = {
    DEEP_ARCHIVE: "DEEP_ARCHIVE",
    EXPRESS_ONEZONE: "EXPRESS_ONEZONE",
    GLACIER: "GLACIER",
    GLACIER_IR: "GLACIER_IR",
    INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
    ONEZONE_IA: "ONEZONE_IA",
    OUTPOSTS: "OUTPOSTS",
    REDUCED_REDUNDANCY: "REDUCED_REDUNDANCY",
    SNOW: "SNOW",
    STANDARD: "STANDARD",
    STANDARD_IA: "STANDARD_IA"
  };
  var TaggingDirective = {
    COPY: "COPY",
    REPLACE: "REPLACE"
  };
  var _ObjectNotInActiveTierError = class _ObjectNotInActiveTierError2 extends S3ServiceException {
    constructor(opts) {
      super({
        name: "ObjectNotInActiveTierError",
        $fault: "client",
        ...opts
      });
      this.name = "ObjectNotInActiveTierError";
      this.$fault = "client";
      Object.setPrototypeOf(this, _ObjectNotInActiveTierError2.prototype);
    }
  };
  __name(_ObjectNotInActiveTierError, "ObjectNotInActiveTierError");
  var ObjectNotInActiveTierError = _ObjectNotInActiveTierError;
  var _BucketAlreadyExists = class _BucketAlreadyExists2 extends S3ServiceException {
    constructor(opts) {
      super({
        name: "BucketAlreadyExists",
        $fault: "client",
        ...opts
      });
      this.name = "BucketAlreadyExists";
      this.$fault = "client";
      Object.setPrototypeOf(this, _BucketAlreadyExists2.prototype);
    }
  };
  __name(_BucketAlreadyExists, "BucketAlreadyExists");
  var BucketAlreadyExists = _BucketAlreadyExists;
  var _BucketAlreadyOwnedByYou = class _BucketAlreadyOwnedByYou2 extends S3ServiceException {
    constructor(opts) {
      super({
        name: "BucketAlreadyOwnedByYou",
        $fault: "client",
        ...opts
      });
      this.name = "BucketAlreadyOwnedByYou";
      this.$fault = "client";
      Object.setPrototypeOf(this, _BucketAlreadyOwnedByYou2.prototype);
    }
  };
  __name(_BucketAlreadyOwnedByYou, "BucketAlreadyOwnedByYou");
  var BucketAlreadyOwnedByYou = _BucketAlreadyOwnedByYou;
  var BucketCannedACL = {
    authenticated_read: "authenticated-read",
    private: "private",
    public_read: "public-read",
    public_read_write: "public-read-write"
  };
  var DataRedundancy = {
    SingleAvailabilityZone: "SingleAvailabilityZone"
  };
  var BucketType = {
    Directory: "Directory"
  };
  var LocationType = {
    AvailabilityZone: "AvailabilityZone"
  };
  var BucketLocationConstraint = {
    EU: "EU",
    af_south_1: "af-south-1",
    ap_east_1: "ap-east-1",
    ap_northeast_1: "ap-northeast-1",
    ap_northeast_2: "ap-northeast-2",
    ap_northeast_3: "ap-northeast-3",
    ap_south_1: "ap-south-1",
    ap_south_2: "ap-south-2",
    ap_southeast_1: "ap-southeast-1",
    ap_southeast_2: "ap-southeast-2",
    ap_southeast_3: "ap-southeast-3",
    ca_central_1: "ca-central-1",
    cn_north_1: "cn-north-1",
    cn_northwest_1: "cn-northwest-1",
    eu_central_1: "eu-central-1",
    eu_north_1: "eu-north-1",
    eu_south_1: "eu-south-1",
    eu_south_2: "eu-south-2",
    eu_west_1: "eu-west-1",
    eu_west_2: "eu-west-2",
    eu_west_3: "eu-west-3",
    me_south_1: "me-south-1",
    sa_east_1: "sa-east-1",
    us_east_2: "us-east-2",
    us_gov_east_1: "us-gov-east-1",
    us_gov_west_1: "us-gov-west-1",
    us_west_1: "us-west-1",
    us_west_2: "us-west-2"
  };
  var ObjectOwnership = {
    BucketOwnerEnforced: "BucketOwnerEnforced",
    BucketOwnerPreferred: "BucketOwnerPreferred",
    ObjectWriter: "ObjectWriter"
  };
  var SessionMode = {
    ReadOnly: "ReadOnly",
    ReadWrite: "ReadWrite"
  };
  var _NoSuchBucket = class _NoSuchBucket2 extends S3ServiceException {
    constructor(opts) {
      super({
        name: "NoSuchBucket",
        $fault: "client",
        ...opts
      });
      this.name = "NoSuchBucket";
      this.$fault = "client";
      Object.setPrototypeOf(this, _NoSuchBucket2.prototype);
    }
  };
  __name(_NoSuchBucket, "NoSuchBucket");
  var NoSuchBucket = _NoSuchBucket;
  var AnalyticsFilter;
  ((AnalyticsFilter2) => {
    AnalyticsFilter2.visit = __name((value, visitor) => {
      if (value.Prefix !== undefined)
        return visitor.Prefix(value.Prefix);
      if (value.Tag !== undefined)
        return visitor.Tag(value.Tag);
      if (value.And !== undefined)
        return visitor.And(value.And);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    }, "visit");
  })(AnalyticsFilter || (AnalyticsFilter = {}));
  var AnalyticsS3ExportFileFormat = {
    CSV: "CSV"
  };
  var StorageClassAnalysisSchemaVersion = {
    V_1: "V_1"
  };
  var IntelligentTieringStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var IntelligentTieringAccessTier = {
    ARCHIVE_ACCESS: "ARCHIVE_ACCESS",
    DEEP_ARCHIVE_ACCESS: "DEEP_ARCHIVE_ACCESS"
  };
  var InventoryFormat = {
    CSV: "CSV",
    ORC: "ORC",
    Parquet: "Parquet"
  };
  var InventoryIncludedObjectVersions = {
    All: "All",
    Current: "Current"
  };
  var InventoryOptionalField = {
    BucketKeyStatus: "BucketKeyStatus",
    ChecksumAlgorithm: "ChecksumAlgorithm",
    ETag: "ETag",
    EncryptionStatus: "EncryptionStatus",
    IntelligentTieringAccessTier: "IntelligentTieringAccessTier",
    IsMultipartUploaded: "IsMultipartUploaded",
    LastModifiedDate: "LastModifiedDate",
    ObjectAccessControlList: "ObjectAccessControlList",
    ObjectLockLegalHoldStatus: "ObjectLockLegalHoldStatus",
    ObjectLockMode: "ObjectLockMode",
    ObjectLockRetainUntilDate: "ObjectLockRetainUntilDate",
    ObjectOwner: "ObjectOwner",
    ReplicationStatus: "ReplicationStatus",
    Size: "Size",
    StorageClass: "StorageClass"
  };
  var InventoryFrequency = {
    Daily: "Daily",
    Weekly: "Weekly"
  };
  var LifecycleRuleFilter;
  ((LifecycleRuleFilter2) => {
    LifecycleRuleFilter2.visit = __name((value, visitor) => {
      if (value.Prefix !== undefined)
        return visitor.Prefix(value.Prefix);
      if (value.Tag !== undefined)
        return visitor.Tag(value.Tag);
      if (value.ObjectSizeGreaterThan !== undefined)
        return visitor.ObjectSizeGreaterThan(value.ObjectSizeGreaterThan);
      if (value.ObjectSizeLessThan !== undefined)
        return visitor.ObjectSizeLessThan(value.ObjectSizeLessThan);
      if (value.And !== undefined)
        return visitor.And(value.And);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    }, "visit");
  })(LifecycleRuleFilter || (LifecycleRuleFilter = {}));
  var TransitionStorageClass = {
    DEEP_ARCHIVE: "DEEP_ARCHIVE",
    GLACIER: "GLACIER",
    GLACIER_IR: "GLACIER_IR",
    INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
    ONEZONE_IA: "ONEZONE_IA",
    STANDARD_IA: "STANDARD_IA"
  };
  var ExpirationStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var BucketLogsPermission = {
    FULL_CONTROL: "FULL_CONTROL",
    READ: "READ",
    WRITE: "WRITE"
  };
  var PartitionDateSource = {
    DeliveryTime: "DeliveryTime",
    EventTime: "EventTime"
  };
  var MetricsFilter;
  ((MetricsFilter2) => {
    MetricsFilter2.visit = __name((value, visitor) => {
      if (value.Prefix !== undefined)
        return visitor.Prefix(value.Prefix);
      if (value.Tag !== undefined)
        return visitor.Tag(value.Tag);
      if (value.AccessPointArn !== undefined)
        return visitor.AccessPointArn(value.AccessPointArn);
      if (value.And !== undefined)
        return visitor.And(value.And);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    }, "visit");
  })(MetricsFilter || (MetricsFilter = {}));
  var Event = {
    s3_IntelligentTiering: "s3:IntelligentTiering",
    s3_LifecycleExpiration_: "s3:LifecycleExpiration:*",
    s3_LifecycleExpiration_Delete: "s3:LifecycleExpiration:Delete",
    s3_LifecycleExpiration_DeleteMarkerCreated: "s3:LifecycleExpiration:DeleteMarkerCreated",
    s3_LifecycleTransition: "s3:LifecycleTransition",
    s3_ObjectAcl_Put: "s3:ObjectAcl:Put",
    s3_ObjectCreated_: "s3:ObjectCreated:*",
    s3_ObjectCreated_CompleteMultipartUpload: "s3:ObjectCreated:CompleteMultipartUpload",
    s3_ObjectCreated_Copy: "s3:ObjectCreated:Copy",
    s3_ObjectCreated_Post: "s3:ObjectCreated:Post",
    s3_ObjectCreated_Put: "s3:ObjectCreated:Put",
    s3_ObjectRemoved_: "s3:ObjectRemoved:*",
    s3_ObjectRemoved_Delete: "s3:ObjectRemoved:Delete",
    s3_ObjectRemoved_DeleteMarkerCreated: "s3:ObjectRemoved:DeleteMarkerCreated",
    s3_ObjectRestore_: "s3:ObjectRestore:*",
    s3_ObjectRestore_Completed: "s3:ObjectRestore:Completed",
    s3_ObjectRestore_Delete: "s3:ObjectRestore:Delete",
    s3_ObjectRestore_Post: "s3:ObjectRestore:Post",
    s3_ObjectTagging_: "s3:ObjectTagging:*",
    s3_ObjectTagging_Delete: "s3:ObjectTagging:Delete",
    s3_ObjectTagging_Put: "s3:ObjectTagging:Put",
    s3_ReducedRedundancyLostObject: "s3:ReducedRedundancyLostObject",
    s3_Replication_: "s3:Replication:*",
    s3_Replication_OperationFailedReplication: "s3:Replication:OperationFailedReplication",
    s3_Replication_OperationMissedThreshold: "s3:Replication:OperationMissedThreshold",
    s3_Replication_OperationNotTracked: "s3:Replication:OperationNotTracked",
    s3_Replication_OperationReplicatedAfterThreshold: "s3:Replication:OperationReplicatedAfterThreshold"
  };
  var FilterRuleName = {
    prefix: "prefix",
    suffix: "suffix"
  };
  var DeleteMarkerReplicationStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var MetricsStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var ReplicationTimeStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var ExistingObjectReplicationStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var ReplicationRuleFilter;
  ((ReplicationRuleFilter2) => {
    ReplicationRuleFilter2.visit = __name((value, visitor) => {
      if (value.Prefix !== undefined)
        return visitor.Prefix(value.Prefix);
      if (value.Tag !== undefined)
        return visitor.Tag(value.Tag);
      if (value.And !== undefined)
        return visitor.And(value.And);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    }, "visit");
  })(ReplicationRuleFilter || (ReplicationRuleFilter = {}));
  var ReplicaModificationsStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var SseKmsEncryptedObjectsStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var ReplicationRuleStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var Payer = {
    BucketOwner: "BucketOwner",
    Requester: "Requester"
  };
  var MFADeleteStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var BucketVersioningStatus = {
    Enabled: "Enabled",
    Suspended: "Suspended"
  };
  var Protocol = {
    http: "http",
    https: "https"
  };
  var ReplicationStatus = {
    COMPLETE: "COMPLETE",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    PENDING: "PENDING",
    REPLICA: "REPLICA"
  };
  var ChecksumMode = {
    ENABLED: "ENABLED"
  };
  var _InvalidObjectState = class _InvalidObjectState2 extends S3ServiceException {
    constructor(opts) {
      super({
        name: "InvalidObjectState",
        $fault: "client",
        ...opts
      });
      this.name = "InvalidObjectState";
      this.$fault = "client";
      Object.setPrototypeOf(this, _InvalidObjectState2.prototype);
      this.StorageClass = opts.StorageClass;
      this.AccessTier = opts.AccessTier;
    }
  };
  __name(_InvalidObjectState, "InvalidObjectState");
  var InvalidObjectState = _InvalidObjectState;
  var _NoSuchKey = class _NoSuchKey2 extends S3ServiceException {
    constructor(opts) {
      super({
        name: "NoSuchKey",
        $fault: "client",
        ...opts
      });
      this.name = "NoSuchKey";
      this.$fault = "client";
      Object.setPrototypeOf(this, _NoSuchKey2.prototype);
    }
  };
  __name(_NoSuchKey, "NoSuchKey");
  var NoSuchKey = _NoSuchKey;
  var ObjectAttributes = {
    CHECKSUM: "Checksum",
    ETAG: "ETag",
    OBJECT_PARTS: "ObjectParts",
    OBJECT_SIZE: "ObjectSize",
    STORAGE_CLASS: "StorageClass"
  };
  var ObjectLockEnabled = {
    Enabled: "Enabled"
  };
  var ObjectLockRetentionMode = {
    COMPLIANCE: "COMPLIANCE",
    GOVERNANCE: "GOVERNANCE"
  };
  var _NotFound = class _NotFound2 extends S3ServiceException {
    constructor(opts) {
      super({
        name: "NotFound",
        $fault: "client",
        ...opts
      });
      this.name = "NotFound";
      this.$fault = "client";
      Object.setPrototypeOf(this, _NotFound2.prototype);
    }
  };
  __name(_NotFound, "NotFound");
  var NotFound = _NotFound;
  var ArchiveStatus = {
    ARCHIVE_ACCESS: "ARCHIVE_ACCESS",
    DEEP_ARCHIVE_ACCESS: "DEEP_ARCHIVE_ACCESS"
  };
  var EncodingType = {
    url: "url"
  };
  var ObjectStorageClass = {
    DEEP_ARCHIVE: "DEEP_ARCHIVE",
    EXPRESS_ONEZONE: "EXPRESS_ONEZONE",
    GLACIER: "GLACIER",
    GLACIER_IR: "GLACIER_IR",
    INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
    ONEZONE_IA: "ONEZONE_IA",
    OUTPOSTS: "OUTPOSTS",
    REDUCED_REDUNDANCY: "REDUCED_REDUNDANCY",
    SNOW: "SNOW",
    STANDARD: "STANDARD",
    STANDARD_IA: "STANDARD_IA"
  };
  var OptionalObjectAttributes = {
    RESTORE_STATUS: "RestoreStatus"
  };
  var ObjectVersionStorageClass = {
    STANDARD: "STANDARD"
  };
  var CompleteMultipartUploadOutputFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING }
  }), "CompleteMultipartUploadOutputFilterSensitiveLog");
  var CompleteMultipartUploadRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING }
  }), "CompleteMultipartUploadRequestFilterSensitiveLog");
  var CopyObjectOutputFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client.SENSITIVE_STRING }
  }), "CopyObjectOutputFilterSensitiveLog");
  var CopyObjectRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client.SENSITIVE_STRING },
    ...obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: import_smithy_client.SENSITIVE_STRING }
  }), "CopyObjectRequestFilterSensitiveLog");
  var CreateMultipartUploadOutputFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client.SENSITIVE_STRING }
  }), "CreateMultipartUploadOutputFilterSensitiveLog");
  var CreateMultipartUploadRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client.SENSITIVE_STRING }
  }), "CreateMultipartUploadRequestFilterSensitiveLog");
  var SessionCredentialsFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SecretAccessKey && { SecretAccessKey: import_smithy_client.SENSITIVE_STRING },
    ...obj.SessionToken && { SessionToken: import_smithy_client.SENSITIVE_STRING }
  }), "SessionCredentialsFilterSensitiveLog");
  var CreateSessionOutputFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.Credentials && { Credentials: SessionCredentialsFilterSensitiveLog(obj.Credentials) }
  }), "CreateSessionOutputFilterSensitiveLog");
  var ServerSideEncryptionByDefaultFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.KMSMasterKeyID && { KMSMasterKeyID: import_smithy_client.SENSITIVE_STRING }
  }), "ServerSideEncryptionByDefaultFilterSensitiveLog");
  var ServerSideEncryptionRuleFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.ApplyServerSideEncryptionByDefault && {
      ApplyServerSideEncryptionByDefault: ServerSideEncryptionByDefaultFilterSensitiveLog(obj.ApplyServerSideEncryptionByDefault)
    }
  }), "ServerSideEncryptionRuleFilterSensitiveLog");
  var ServerSideEncryptionConfigurationFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.Rules && { Rules: obj.Rules.map((item) => ServerSideEncryptionRuleFilterSensitiveLog(item)) }
  }), "ServerSideEncryptionConfigurationFilterSensitiveLog");
  var GetBucketEncryptionOutputFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.ServerSideEncryptionConfiguration && {
      ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration)
    }
  }), "GetBucketEncryptionOutputFilterSensitiveLog");
  var SSEKMSFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.KeyId && { KeyId: import_smithy_client.SENSITIVE_STRING }
  }), "SSEKMSFilterSensitiveLog");
  var InventoryEncryptionFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSEKMS && { SSEKMS: SSEKMSFilterSensitiveLog(obj.SSEKMS) }
  }), "InventoryEncryptionFilterSensitiveLog");
  var InventoryS3BucketDestinationFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.Encryption && { Encryption: InventoryEncryptionFilterSensitiveLog(obj.Encryption) }
  }), "InventoryS3BucketDestinationFilterSensitiveLog");
  var InventoryDestinationFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.S3BucketDestination && {
      S3BucketDestination: InventoryS3BucketDestinationFilterSensitiveLog(obj.S3BucketDestination)
    }
  }), "InventoryDestinationFilterSensitiveLog");
  var InventoryConfigurationFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.Destination && { Destination: InventoryDestinationFilterSensitiveLog(obj.Destination) }
  }), "InventoryConfigurationFilterSensitiveLog");
  var GetBucketInventoryConfigurationOutputFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.InventoryConfiguration && {
      InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration)
    }
  }), "GetBucketInventoryConfigurationOutputFilterSensitiveLog");
  var GetObjectOutputFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING }
  }), "GetObjectOutputFilterSensitiveLog");
  var GetObjectRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING }
  }), "GetObjectRequestFilterSensitiveLog");
  var GetObjectAttributesRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING }
  }), "GetObjectAttributesRequestFilterSensitiveLog");
  var GetObjectTorrentOutputFilterSensitiveLog = __name((obj) => ({
    ...obj
  }), "GetObjectTorrentOutputFilterSensitiveLog");
  var HeadObjectOutputFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING }
  }), "HeadObjectOutputFilterSensitiveLog");
  var HeadObjectRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING }
  }), "HeadObjectRequestFilterSensitiveLog");
  var ListBucketInventoryConfigurationsOutputFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.InventoryConfigurationList && {
      InventoryConfigurationList: obj.InventoryConfigurationList.map((item) => InventoryConfigurationFilterSensitiveLog(item))
    }
  }), "ListBucketInventoryConfigurationsOutputFilterSensitiveLog");
  var ListPartsRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING }
  }), "ListPartsRequestFilterSensitiveLog");
  var PutBucketEncryptionRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.ServerSideEncryptionConfiguration && {
      ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration)
    }
  }), "PutBucketEncryptionRequestFilterSensitiveLog");
  var PutBucketInventoryConfigurationRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.InventoryConfiguration && {
      InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration)
    }
  }), "PutBucketInventoryConfigurationRequestFilterSensitiveLog");
  var import_xml_builder = require_dist_cjs42();
  var import_core = require_dist_cjs43();
  var import_protocol_http = require_dist_cjs2();
  var import_fast_xml_parser = require_fxp();
  var MFADelete = {
    Disabled: "Disabled",
    Enabled: "Enabled"
  };
  var _ObjectAlreadyInActiveTierError = class _ObjectAlreadyInActiveTierError2 extends S3ServiceException {
    constructor(opts) {
      super({
        name: "ObjectAlreadyInActiveTierError",
        $fault: "client",
        ...opts
      });
      this.name = "ObjectAlreadyInActiveTierError";
      this.$fault = "client";
      Object.setPrototypeOf(this, _ObjectAlreadyInActiveTierError2.prototype);
    }
  };
  __name(_ObjectAlreadyInActiveTierError, "ObjectAlreadyInActiveTierError");
  var ObjectAlreadyInActiveTierError = _ObjectAlreadyInActiveTierError;
  var Tier = {
    Bulk: "Bulk",
    Expedited: "Expedited",
    Standard: "Standard"
  };
  var ExpressionType = {
    SQL: "SQL"
  };
  var CompressionType = {
    BZIP2: "BZIP2",
    GZIP: "GZIP",
    NONE: "NONE"
  };
  var FileHeaderInfo = {
    IGNORE: "IGNORE",
    NONE: "NONE",
    USE: "USE"
  };
  var JSONType = {
    DOCUMENT: "DOCUMENT",
    LINES: "LINES"
  };
  var QuoteFields = {
    ALWAYS: "ALWAYS",
    ASNEEDED: "ASNEEDED"
  };
  var RestoreRequestType = {
    SELECT: "SELECT"
  };
  var SelectObjectContentEventStream;
  ((SelectObjectContentEventStream3) => {
    SelectObjectContentEventStream3.visit = __name((value, visitor) => {
      if (value.Records !== undefined)
        return visitor.Records(value.Records);
      if (value.Stats !== undefined)
        return visitor.Stats(value.Stats);
      if (value.Progress !== undefined)
        return visitor.Progress(value.Progress);
      if (value.Cont !== undefined)
        return visitor.Cont(value.Cont);
      if (value.End !== undefined)
        return visitor.End(value.End);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    }, "visit");
  })(SelectObjectContentEventStream || (SelectObjectContentEventStream = {}));
  var PutObjectOutputFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client.SENSITIVE_STRING }
  }), "PutObjectOutputFilterSensitiveLog");
  var PutObjectRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING },
    ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client.SENSITIVE_STRING }
  }), "PutObjectRequestFilterSensitiveLog");
  var EncryptionFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.KMSKeyId && { KMSKeyId: import_smithy_client.SENSITIVE_STRING }
  }), "EncryptionFilterSensitiveLog");
  var S3LocationFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.Encryption && { Encryption: EncryptionFilterSensitiveLog(obj.Encryption) }
  }), "S3LocationFilterSensitiveLog");
  var OutputLocationFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.S3 && { S3: S3LocationFilterSensitiveLog(obj.S3) }
  }), "OutputLocationFilterSensitiveLog");
  var RestoreRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.OutputLocation && { OutputLocation: OutputLocationFilterSensitiveLog(obj.OutputLocation) }
  }), "RestoreRequestFilterSensitiveLog");
  var RestoreObjectRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.RestoreRequest && { RestoreRequest: RestoreRequestFilterSensitiveLog(obj.RestoreRequest) }
  }), "RestoreObjectRequestFilterSensitiveLog");
  var SelectObjectContentEventStreamFilterSensitiveLog = __name((obj) => {
    if (obj.Records !== undefined)
      return { Records: obj.Records };
    if (obj.Stats !== undefined)
      return { Stats: obj.Stats };
    if (obj.Progress !== undefined)
      return { Progress: obj.Progress };
    if (obj.Cont !== undefined)
      return { Cont: obj.Cont };
    if (obj.End !== undefined)
      return { End: obj.End };
    if (obj.$unknown !== undefined)
      return { [obj.$unknown[0]]: "UNKNOWN" };
  }, "SelectObjectContentEventStreamFilterSensitiveLog");
  var SelectObjectContentOutputFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.Payload && { Payload: "STREAMING_CONTENT" }
  }), "SelectObjectContentOutputFilterSensitiveLog");
  var SelectObjectContentRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING }
  }), "SelectObjectContentRequestFilterSensitiveLog");
  var UploadPartOutputFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING }
  }), "UploadPartOutputFilterSensitiveLog");
  var UploadPartRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING }
  }), "UploadPartRequestFilterSensitiveLog");
  var UploadPartCopyOutputFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING }
  }), "UploadPartCopyOutputFilterSensitiveLog");
  var UploadPartCopyRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client.SENSITIVE_STRING },
    ...obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: import_smithy_client.SENSITIVE_STRING }
  }), "UploadPartCopyRequestFilterSensitiveLog");
  var WriteGetObjectResponseRequestFilterSensitiveLog = __name((obj) => ({
    ...obj,
    ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client.SENSITIVE_STRING }
  }), "WriteGetObjectResponseRequestFilterSensitiveLog");
  var se_AbortMultipartUploadCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "AbortMultipartUpload"],
      [_uI]: [, (0, import_smithy_client.expectNonNull)(input[_UI], `UploadId`)]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_AbortMultipartUploadCommand");
  var se_CompleteMultipartUploadCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xacc]: input[_CCRC],
      [_xacc_]: input[_CCRCC],
      [_xacs]: input[_CSHA],
      [_xacs_]: input[_CSHAh],
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "CompleteMultipartUpload"],
      [_uI]: [, (0, import_smithy_client.expectNonNull)(input[_UI], `UploadId`)]
    });
    let body;
    let contents;
    if (input.MultipartUpload !== undefined) {
      contents = se_CompletedMultipartUpload(input.MultipartUpload, context);
      contents = contents.n("CompleteMultipartUpload");
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
  }, "se_CompleteMultipartUploadCommand");
  var se_CopyObjectCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaa]: input[_ACL],
      [_cc]: input[_CC],
      [_xaca]: input[_CA],
      [_cd]: input[_CD],
      [_ce]: input[_CE],
      [_cl]: input[_CL],
      [_ct]: input[_CT],
      [_xacs__]: input[_CS],
      [_xacsim]: input[_CSIM],
      [_xacsims]: [() => isSerializableHeaderValue(input[_CSIMS]), () => (0, import_smithy_client.dateToUtcString)(input[_CSIMS]).toString()],
      [_xacsinm]: input[_CSINM],
      [_xacsius]: [() => isSerializableHeaderValue(input[_CSIUS]), () => (0, import_smithy_client.dateToUtcString)(input[_CSIUS]).toString()],
      [_e]: [() => isSerializableHeaderValue(input[_E]), () => (0, import_smithy_client.dateToUtcString)(input[_E]).toString()],
      [_xagfc]: input[_GFC],
      [_xagr]: input[_GR],
      [_xagra]: input[_GRACP],
      [_xagwa]: input[_GWACP],
      [_xamd]: input[_MD],
      [_xatd]: input[_TD],
      [_xasse]: input[_SSE],
      [_xasc]: input[_SC],
      [_xawrl]: input[_WRL],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD],
      [_xasseakki]: input[_SSEKMSKI],
      [_xassec]: input[_SSEKMSEC],
      [_xassebke]: [() => isSerializableHeaderValue(input[_BKE]), () => input[_BKE].toString()],
      [_xacssseca]: input[_CSSSECA],
      [_xacssseck]: input[_CSSSECK],
      [_xacssseckm]: input[_CSSSECKMD],
      [_xarp]: input[_RP],
      [_xat]: input[_T],
      [_xaolm]: input[_OLM],
      [_xaolrud]: [
        () => isSerializableHeaderValue(input[_OLRUD]),
        () => (input[_OLRUD].toISOString().split(".")[0] + "Z").toString()
      ],
      [_xaollh]: input[_OLLHS],
      [_xaebo]: input[_EBO],
      [_xasebo]: input[_ESBO],
      ...input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {
        acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
        return acc;
      }, {})
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "CopyObject"]
    });
    let body;
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_CopyObjectCommand");
  var se_CreateBucketCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xaa]: input[_ACL],
      [_xagfc]: input[_GFC],
      [_xagr]: input[_GR],
      [_xagra]: input[_GRACP],
      [_xagw]: input[_GW],
      [_xagwa]: input[_GWACP],
      [_xabole]: [() => isSerializableHeaderValue(input[_OLEFB]), () => input[_OLEFB].toString()],
      [_xaoo]: input[_OO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    let body;
    let contents;
    if (input.CreateBucketConfiguration !== undefined) {
      contents = se_CreateBucketConfiguration(input.CreateBucketConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).b(body);
    return b.build();
  }, "se_CreateBucketCommand");
  var se_CreateMultipartUploadCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaa]: input[_ACL],
      [_cc]: input[_CC],
      [_cd]: input[_CD],
      [_ce]: input[_CE],
      [_cl]: input[_CL],
      [_ct]: input[_CT],
      [_e]: [() => isSerializableHeaderValue(input[_E]), () => (0, import_smithy_client.dateToUtcString)(input[_E]).toString()],
      [_xagfc]: input[_GFC],
      [_xagr]: input[_GR],
      [_xagra]: input[_GRACP],
      [_xagwa]: input[_GWACP],
      [_xasse]: input[_SSE],
      [_xasc]: input[_SC],
      [_xawrl]: input[_WRL],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD],
      [_xasseakki]: input[_SSEKMSKI],
      [_xassec]: input[_SSEKMSEC],
      [_xassebke]: [() => isSerializableHeaderValue(input[_BKE]), () => input[_BKE].toString()],
      [_xarp]: input[_RP],
      [_xat]: input[_T],
      [_xaolm]: input[_OLM],
      [_xaolrud]: [
        () => isSerializableHeaderValue(input[_OLRUD]),
        () => (input[_OLRUD].toISOString().split(".")[0] + "Z").toString()
      ],
      [_xaollh]: input[_OLLHS],
      [_xaebo]: input[_EBO],
      [_xaca]: input[_CA],
      ...input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {
        acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
        return acc;
      }, {})
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_u]: [, ""],
      [_xi]: [, "CreateMultipartUpload"]
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
  }, "se_CreateMultipartUploadCommand");
  var se_CreateSessionCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xacsm]: input[_SM]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_s]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_CreateSessionCommand");
  var se_DeleteBucketCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
  }, "se_DeleteBucketCommand");
  var se_DeleteBucketAnalyticsConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_a]: [, ""],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketAnalyticsConfigurationCommand");
  var se_DeleteBucketCorsCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_c]: [, ""]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketCorsCommand");
  var se_DeleteBucketEncryptionCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_en]: [, ""]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketEncryptionCommand");
  var se_DeleteBucketIntelligentTieringConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_it]: [, ""],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketIntelligentTieringConfigurationCommand");
  var se_DeleteBucketInventoryConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_in]: [, ""],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketInventoryConfigurationCommand");
  var se_DeleteBucketLifecycleCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_l]: [, ""]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketLifecycleCommand");
  var se_DeleteBucketMetricsConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_m]: [, ""],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketMetricsConfigurationCommand");
  var se_DeleteBucketOwnershipControlsCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_oC]: [, ""]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketOwnershipControlsCommand");
  var se_DeleteBucketPolicyCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_p]: [, ""]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketPolicyCommand");
  var se_DeleteBucketReplicationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_r]: [, ""]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketReplicationCommand");
  var se_DeleteBucketTaggingCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_t]: [, ""]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketTaggingCommand");
  var se_DeleteBucketWebsiteCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_w]: [, ""]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteBucketWebsiteCommand");
  var se_DeleteObjectCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xam]: input[_MFA],
      [_xarp]: input[_RP],
      [_xabgr]: [() => isSerializableHeaderValue(input[_BGR]), () => input[_BGR].toString()],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "DeleteObject"],
      [_vI]: [, input[_VI]]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteObjectCommand");
  var se_DeleteObjectsCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xam]: input[_MFA],
      [_xarp]: input[_RP],
      [_xabgr]: [() => isSerializableHeaderValue(input[_BGR]), () => input[_BGR].toString()],
      [_xaebo]: input[_EBO],
      [_xasca]: input[_CA]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_d]: [, ""],
      [_xi]: [, "DeleteObjects"]
    });
    let body;
    let contents;
    if (input.Delete !== undefined) {
      contents = se_Delete(input.Delete, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteObjectsCommand");
  var se_DeleteObjectTaggingCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_t]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeleteObjectTaggingCommand");
  var se_DeletePublicAccessBlockCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_pAB]: [, ""]
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
  }, "se_DeletePublicAccessBlockCommand");
  var se_GetBucketAccelerateConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO],
      [_xarp]: input[_RP]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_ac]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketAccelerateConfigurationCommand");
  var se_GetBucketAclCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_acl]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketAclCommand");
  var se_GetBucketAnalyticsConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_a]: [, ""],
      [_xi]: [, "GetBucketAnalyticsConfiguration"],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketAnalyticsConfigurationCommand");
  var se_GetBucketCorsCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_c]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketCorsCommand");
  var se_GetBucketEncryptionCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_en]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketEncryptionCommand");
  var se_GetBucketIntelligentTieringConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_it]: [, ""],
      [_xi]: [, "GetBucketIntelligentTieringConfiguration"],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketIntelligentTieringConfigurationCommand");
  var se_GetBucketInventoryConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_in]: [, ""],
      [_xi]: [, "GetBucketInventoryConfiguration"],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketInventoryConfigurationCommand");
  var se_GetBucketLifecycleConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_l]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketLifecycleConfigurationCommand");
  var se_GetBucketLocationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_lo]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketLocationCommand");
  var se_GetBucketLoggingCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_log]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketLoggingCommand");
  var se_GetBucketMetricsConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_m]: [, ""],
      [_xi]: [, "GetBucketMetricsConfiguration"],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketMetricsConfigurationCommand");
  var se_GetBucketNotificationConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_n]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketNotificationConfigurationCommand");
  var se_GetBucketOwnershipControlsCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_oC]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketOwnershipControlsCommand");
  var se_GetBucketPolicyCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_p]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketPolicyCommand");
  var se_GetBucketPolicyStatusCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_pS]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketPolicyStatusCommand");
  var se_GetBucketReplicationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_r]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketReplicationCommand");
  var se_GetBucketRequestPaymentCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_rP]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketRequestPaymentCommand");
  var se_GetBucketTaggingCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_t]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketTaggingCommand");
  var se_GetBucketVersioningCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_v]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketVersioningCommand");
  var se_GetBucketWebsiteCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_w]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetBucketWebsiteCommand");
  var se_GetObjectCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_im]: input[_IM],
      [_ims]: [() => isSerializableHeaderValue(input[_IMS]), () => (0, import_smithy_client.dateToUtcString)(input[_IMS]).toString()],
      [_inm]: input[_INM],
      [_ius]: [() => isSerializableHeaderValue(input[_IUS]), () => (0, import_smithy_client.dateToUtcString)(input[_IUS]).toString()],
      [_ra]: input[_R],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD],
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO],
      [_xacm]: input[_CM]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "GetObject"],
      [_rcc]: [, input[_RCC]],
      [_rcd]: [, input[_RCD]],
      [_rce]: [, input[_RCE]],
      [_rcl]: [, input[_RCL]],
      [_rct]: [, input[_RCT]],
      [_re]: [() => input.ResponseExpires !== undefined, () => (0, import_smithy_client.dateToUtcString)(input[_RE]).toString()],
      [_vI]: [, input[_VI]],
      [_pN]: [() => input.PartNumber !== undefined, () => input[_PN].toString()]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetObjectCommand");
  var se_GetObjectAclCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_acl]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetObjectAclCommand");
  var se_GetObjectAttributesCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xamp]: [() => isSerializableHeaderValue(input[_MP]), () => input[_MP].toString()],
      [_xapnm]: input[_PNM],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD],
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO],
      [_xaoa]: [
        () => isSerializableHeaderValue(input[_OA]),
        () => (input[_OA] || []).map((_entry) => _entry).join(", ")
      ]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_at]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetObjectAttributesCommand");
  var se_GetObjectLegalHoldCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_lh]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetObjectLegalHoldCommand");
  var se_GetObjectLockConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_ol]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetObjectLockConfigurationCommand");
  var se_GetObjectRetentionCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_ret]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetObjectRetentionCommand");
  var se_GetObjectTaggingCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO],
      [_xarp]: input[_RP]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_t]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetObjectTaggingCommand");
  var se_GetObjectTorrentCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_to]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetObjectTorrentCommand");
  var se_GetPublicAccessBlockCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_pAB]: [, ""]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_GetPublicAccessBlockCommand");
  var se_HeadBucketCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    let body;
    b.m("HEAD").h(headers).b(body);
    return b.build();
  }, "se_HeadBucketCommand");
  var se_HeadObjectCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_im]: input[_IM],
      [_ims]: [() => isSerializableHeaderValue(input[_IMS]), () => (0, import_smithy_client.dateToUtcString)(input[_IMS]).toString()],
      [_inm]: input[_INM],
      [_ius]: [() => isSerializableHeaderValue(input[_IUS]), () => (0, import_smithy_client.dateToUtcString)(input[_IUS]).toString()],
      [_ra]: input[_R],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD],
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO],
      [_xacm]: input[_CM]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_vI]: [, input[_VI]],
      [_pN]: [() => input.PartNumber !== undefined, () => input[_PN].toString()]
    });
    let body;
    b.m("HEAD").h(headers).q(query).b(body);
    return b.build();
  }, "se_HeadObjectCommand");
  var se_ListBucketAnalyticsConfigurationsCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_a]: [, ""],
      [_xi]: [, "ListBucketAnalyticsConfigurations"],
      [_ct_]: [, input[_CTo]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListBucketAnalyticsConfigurationsCommand");
  var se_ListBucketIntelligentTieringConfigurationsCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_it]: [, ""],
      [_xi]: [, "ListBucketIntelligentTieringConfigurations"],
      [_ct_]: [, input[_CTo]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListBucketIntelligentTieringConfigurationsCommand");
  var se_ListBucketInventoryConfigurationsCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_in]: [, ""],
      [_xi]: [, "ListBucketInventoryConfigurations"],
      [_ct_]: [, input[_CTo]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListBucketInventoryConfigurationsCommand");
  var se_ListBucketMetricsConfigurationsCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_m]: [, ""],
      [_xi]: [, "ListBucketMetricsConfigurations"],
      [_ct_]: [, input[_CTo]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListBucketMetricsConfigurationsCommand");
  var se_ListBucketsCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/xml"
    };
    b.bp("/");
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "ListBuckets"]
    });
    let body;
    body = "";
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListBucketsCommand");
  var se_ListDirectoryBucketsCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {};
    b.bp("/");
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "ListDirectoryBuckets"],
      [_ct_]: [, input[_CTo]],
      [_mdb]: [() => input.MaxDirectoryBuckets !== undefined, () => input[_MDB].toString()]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListDirectoryBucketsCommand");
  var se_ListMultipartUploadsCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO],
      [_xarp]: input[_RP]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_u]: [, ""],
      [_de]: [, input[_D]],
      [_et]: [, input[_ET]],
      [_km]: [, input[_KM]],
      [_mu]: [() => input.MaxUploads !== undefined, () => input[_MU].toString()],
      [_pr]: [, input[_P]],
      [_uim]: [, input[_UIM]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListMultipartUploadsCommand");
  var se_ListObjectsCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO],
      [_xaooa]: [
        () => isSerializableHeaderValue(input[_OOA]),
        () => (input[_OOA] || []).map((_entry) => _entry).join(", ")
      ]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_de]: [, input[_D]],
      [_et]: [, input[_ET]],
      [_ma]: [, input[_M]],
      [_mk]: [() => input.MaxKeys !== undefined, () => input[_MK].toString()],
      [_pr]: [, input[_P]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListObjectsCommand");
  var se_ListObjectsV2Command = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO],
      [_xaooa]: [
        () => isSerializableHeaderValue(input[_OOA]),
        () => (input[_OOA] || []).map((_entry) => _entry).join(", ")
      ]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_lt]: [, "2"],
      [_de]: [, input[_D]],
      [_et]: [, input[_ET]],
      [_mk]: [() => input.MaxKeys !== undefined, () => input[_MK].toString()],
      [_pr]: [, input[_P]],
      [_ct_]: [, input[_CTo]],
      [_fo]: [() => input.FetchOwner !== undefined, () => input[_FO].toString()],
      [_sa]: [, input[_SA]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListObjectsV2Command");
  var se_ListObjectVersionsCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xaebo]: input[_EBO],
      [_xarp]: input[_RP],
      [_xaooa]: [
        () => isSerializableHeaderValue(input[_OOA]),
        () => (input[_OOA] || []).map((_entry) => _entry).join(", ")
      ]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_ver]: [, ""],
      [_de]: [, input[_D]],
      [_et]: [, input[_ET]],
      [_km]: [, input[_KM]],
      [_mk]: [() => input.MaxKeys !== undefined, () => input[_MK].toString()],
      [_pr]: [, input[_P]],
      [_vim]: [, input[_VIM]]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListObjectVersionsCommand");
  var se_ListPartsCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "ListParts"],
      [_mp]: [() => input.MaxParts !== undefined, () => input[_MP].toString()],
      [_pnm]: [, input[_PNM]],
      [_uI]: [, (0, import_smithy_client.expectNonNull)(input[_UI], `UploadId`)]
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
  }, "se_ListPartsCommand");
  var se_PutBucketAccelerateConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xaebo]: input[_EBO],
      [_xasca]: input[_CA]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_ac]: [, ""]
    });
    let body;
    let contents;
    if (input.AccelerateConfiguration !== undefined) {
      contents = se_AccelerateConfiguration(input.AccelerateConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketAccelerateConfigurationCommand");
  var se_PutBucketAclCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xaa]: input[_ACL],
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xagfc]: input[_GFC],
      [_xagr]: input[_GR],
      [_xagra]: input[_GRACP],
      [_xagw]: input[_GW],
      [_xagwa]: input[_GWACP],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_acl]: [, ""]
    });
    let body;
    let contents;
    if (input.AccessControlPolicy !== undefined) {
      contents = se_AccessControlPolicy(input.AccessControlPolicy, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketAclCommand");
  var se_PutBucketAnalyticsConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_a]: [, ""],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    let contents;
    if (input.AnalyticsConfiguration !== undefined) {
      contents = se_AnalyticsConfiguration(input.AnalyticsConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketAnalyticsConfigurationCommand");
  var se_PutBucketCorsCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_c]: [, ""]
    });
    let body;
    let contents;
    if (input.CORSConfiguration !== undefined) {
      contents = se_CORSConfiguration(input.CORSConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketCorsCommand");
  var se_PutBucketEncryptionCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_en]: [, ""]
    });
    let body;
    let contents;
    if (input.ServerSideEncryptionConfiguration !== undefined) {
      contents = se_ServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketEncryptionCommand");
  var se_PutBucketIntelligentTieringConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = {
      "content-type": "application/xml"
    };
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_it]: [, ""],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    let contents;
    if (input.IntelligentTieringConfiguration !== undefined) {
      contents = se_IntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketIntelligentTieringConfigurationCommand");
  var se_PutBucketInventoryConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_in]: [, ""],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    let contents;
    if (input.InventoryConfiguration !== undefined) {
      contents = se_InventoryConfiguration(input.InventoryConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketInventoryConfigurationCommand");
  var se_PutBucketLifecycleConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_l]: [, ""]
    });
    let body;
    let contents;
    if (input.LifecycleConfiguration !== undefined) {
      contents = se_BucketLifecycleConfiguration(input.LifecycleConfiguration, context);
      contents = contents.n("LifecycleConfiguration");
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketLifecycleConfigurationCommand");
  var se_PutBucketLoggingCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_log]: [, ""]
    });
    let body;
    let contents;
    if (input.BucketLoggingStatus !== undefined) {
      contents = se_BucketLoggingStatus(input.BucketLoggingStatus, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketLoggingCommand");
  var se_PutBucketMetricsConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_m]: [, ""],
      [_i]: [, (0, import_smithy_client.expectNonNull)(input[_I], `Id`)]
    });
    let body;
    let contents;
    if (input.MetricsConfiguration !== undefined) {
      contents = se_MetricsConfiguration(input.MetricsConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketMetricsConfigurationCommand");
  var se_PutBucketNotificationConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xaebo]: input[_EBO],
      [_xasdv]: [() => isSerializableHeaderValue(input[_SDV]), () => input[_SDV].toString()]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_n]: [, ""]
    });
    let body;
    let contents;
    if (input.NotificationConfiguration !== undefined) {
      contents = se_NotificationConfiguration(input.NotificationConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketNotificationConfigurationCommand");
  var se_PutBucketOwnershipControlsCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_oC]: [, ""]
    });
    let body;
    let contents;
    if (input.OwnershipControls !== undefined) {
      contents = se_OwnershipControls(input.OwnershipControls, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketOwnershipControlsCommand");
  var se_PutBucketPolicyCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "text/plain",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xacrsba]: [() => isSerializableHeaderValue(input[_CRSBA]), () => input[_CRSBA].toString()],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_p]: [, ""]
    });
    let body;
    let contents;
    if (input.Policy !== undefined) {
      contents = input.Policy;
      body = contents;
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketPolicyCommand");
  var se_PutBucketReplicationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xabolt]: input[_To],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_r]: [, ""]
    });
    let body;
    let contents;
    if (input.ReplicationConfiguration !== undefined) {
      contents = se_ReplicationConfiguration(input.ReplicationConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketReplicationCommand");
  var se_PutBucketRequestPaymentCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_rP]: [, ""]
    });
    let body;
    let contents;
    if (input.RequestPaymentConfiguration !== undefined) {
      contents = se_RequestPaymentConfiguration(input.RequestPaymentConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketRequestPaymentCommand");
  var se_PutBucketTaggingCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_t]: [, ""]
    });
    let body;
    let contents;
    if (input.Tagging !== undefined) {
      contents = se_Tagging(input.Tagging, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketTaggingCommand");
  var se_PutBucketVersioningCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xam]: input[_MFA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_v]: [, ""]
    });
    let body;
    let contents;
    if (input.VersioningConfiguration !== undefined) {
      contents = se_VersioningConfiguration(input.VersioningConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketVersioningCommand");
  var se_PutBucketWebsiteCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_w]: [, ""]
    });
    let body;
    let contents;
    if (input.WebsiteConfiguration !== undefined) {
      contents = se_WebsiteConfiguration(input.WebsiteConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutBucketWebsiteCommand");
  var se_PutObjectCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_ct]: input[_CT] || "application/octet-stream",
      [_xaa]: input[_ACL],
      [_cc]: input[_CC],
      [_cd]: input[_CD],
      [_ce]: input[_CE],
      [_cl]: input[_CL],
      [_cl_]: [() => isSerializableHeaderValue(input[_CLo]), () => input[_CLo].toString()],
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xacc]: input[_CCRC],
      [_xacc_]: input[_CCRCC],
      [_xacs]: input[_CSHA],
      [_xacs_]: input[_CSHAh],
      [_e]: [() => isSerializableHeaderValue(input[_E]), () => (0, import_smithy_client.dateToUtcString)(input[_E]).toString()],
      [_xagfc]: input[_GFC],
      [_xagr]: input[_GR],
      [_xagra]: input[_GRACP],
      [_xagwa]: input[_GWACP],
      [_xasse]: input[_SSE],
      [_xasc]: input[_SC],
      [_xawrl]: input[_WRL],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD],
      [_xasseakki]: input[_SSEKMSKI],
      [_xassec]: input[_SSEKMSEC],
      [_xassebke]: [() => isSerializableHeaderValue(input[_BKE]), () => input[_BKE].toString()],
      [_xarp]: input[_RP],
      [_xat]: input[_T],
      [_xaolm]: input[_OLM],
      [_xaolrud]: [
        () => isSerializableHeaderValue(input[_OLRUD]),
        () => (input[_OLRUD].toISOString().split(".")[0] + "Z").toString()
      ],
      [_xaollh]: input[_OLLHS],
      [_xaebo]: input[_EBO],
      ...input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {
        acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
        return acc;
      }, {})
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "PutObject"]
    });
    let body;
    let contents;
    if (input.Body !== undefined) {
      contents = input.Body;
      body = contents;
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutObjectCommand");
  var se_PutObjectAclCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xaa]: input[_ACL],
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xagfc]: input[_GFC],
      [_xagr]: input[_GR],
      [_xagra]: input[_GRACP],
      [_xagw]: input[_GW],
      [_xagwa]: input[_GWACP],
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_acl]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    let contents;
    if (input.AccessControlPolicy !== undefined) {
      contents = se_AccessControlPolicy(input.AccessControlPolicy, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutObjectAclCommand");
  var se_PutObjectLegalHoldCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xarp]: input[_RP],
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_lh]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    let contents;
    if (input.LegalHold !== undefined) {
      contents = se_ObjectLockLegalHold(input.LegalHold, context);
      contents = contents.n("LegalHold");
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutObjectLegalHoldCommand");
  var se_PutObjectLockConfigurationCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xarp]: input[_RP],
      [_xabolt]: input[_To],
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_ol]: [, ""]
    });
    let body;
    let contents;
    if (input.ObjectLockConfiguration !== undefined) {
      contents = se_ObjectLockConfiguration(input.ObjectLockConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutObjectLockConfigurationCommand");
  var se_PutObjectRetentionCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xarp]: input[_RP],
      [_xabgr]: [() => isSerializableHeaderValue(input[_BGR]), () => input[_BGR].toString()],
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_ret]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    let contents;
    if (input.Retention !== undefined) {
      contents = se_ObjectLockRetention(input.Retention, context);
      contents = contents.n("Retention");
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutObjectRetentionCommand");
  var se_PutObjectTaggingCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO],
      [_xarp]: input[_RP]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_t]: [, ""],
      [_vI]: [, input[_VI]]
    });
    let body;
    let contents;
    if (input.Tagging !== undefined) {
      contents = se_Tagging(input.Tagging, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutObjectTaggingCommand");
  var se_PutPublicAccessBlockCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    const query = (0, import_smithy_client.map)({
      [_pAB]: [, ""]
    });
    let body;
    let contents;
    if (input.PublicAccessBlockConfiguration !== undefined) {
      contents = se_PublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_PutPublicAccessBlockCommand");
  var se_RestoreObjectCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xarp]: input[_RP],
      [_xasca]: input[_CA],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_res]: [, ""],
      [_xi]: [, "RestoreObject"],
      [_vI]: [, input[_VI]]
    });
    let body;
    let contents;
    if (input.RestoreRequest !== undefined) {
      contents = se_RestoreRequest(input.RestoreRequest, context);
      body = _ve;
      contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
  }, "se_RestoreObjectCommand");
  var se_SelectObjectContentCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_se]: [, ""],
      [_st]: [, "2"],
      [_xi]: [, "SelectObjectContent"]
    });
    let body;
    body = _ve;
    const bn = new import_xml_builder.XmlNode(_SOCR);
    bn.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
    bn.cc(input, _Ex);
    bn.cc(input, _ETx);
    if (input[_IS] != null) {
      bn.c(se_InputSerialization(input[_IS], context).n(_IS));
    }
    if (input[_OS] != null) {
      bn.c(se_OutputSerialization(input[_OS], context).n(_OS));
    }
    if (input[_RPe] != null) {
      bn.c(se_RequestProgress(input[_RPe], context).n(_RPe));
    }
    if (input[_SR] != null) {
      bn.c(se_ScanRange(input[_SR], context).n(_SR));
    }
    body += bn.toString();
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
  }, "se_SelectObjectContentCommand");
  var se_UploadPartCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "content-type": "application/octet-stream",
      [_cl_]: [() => isSerializableHeaderValue(input[_CLo]), () => input[_CLo].toString()],
      [_cm]: input[_CMD],
      [_xasca]: input[_CA],
      [_xacc]: input[_CCRC],
      [_xacc_]: input[_CCRCC],
      [_xacs]: input[_CSHA],
      [_xacs_]: input[_CSHAh],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD],
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "UploadPart"],
      [_pN]: [(0, import_smithy_client.expectNonNull)(input.PartNumber, `PartNumber`) != null, () => input[_PN].toString()],
      [_uI]: [, (0, import_smithy_client.expectNonNull)(input[_UI], `UploadId`)]
    });
    let body;
    let contents;
    if (input.Body !== undefined) {
      contents = input.Body;
      body = contents;
    }
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_UploadPartCommand");
  var se_UploadPartCopyCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      [_xacs__]: input[_CS],
      [_xacsim]: input[_CSIM],
      [_xacsims]: [() => isSerializableHeaderValue(input[_CSIMS]), () => (0, import_smithy_client.dateToUtcString)(input[_CSIMS]).toString()],
      [_xacsinm]: input[_CSINM],
      [_xacsius]: [() => isSerializableHeaderValue(input[_CSIUS]), () => (0, import_smithy_client.dateToUtcString)(input[_CSIUS]).toString()],
      [_xacsr]: input[_CSR],
      [_xasseca]: input[_SSECA],
      [_xasseck]: input[_SSECK],
      [_xasseckm]: input[_SSECKMD],
      [_xacssseca]: input[_CSSSECA],
      [_xacssseck]: input[_CSSSECK],
      [_xacssseckm]: input[_CSSSECKMD],
      [_xarp]: input[_RP],
      [_xaebo]: input[_EBO],
      [_xasebo]: input[_ESBO]
    });
    b.bp("/{Key+}");
    b.p("Bucket", () => input.Bucket, "{Bucket}", false);
    b.p("Key", () => input.Key, "{Key+}", true);
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "UploadPartCopy"],
      [_pN]: [(0, import_smithy_client.expectNonNull)(input.PartNumber, `PartNumber`) != null, () => input[_PN].toString()],
      [_uI]: [, (0, import_smithy_client.expectNonNull)(input[_UI], `UploadId`)]
    });
    let body;
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
  }, "se_UploadPartCopyCommand");
  var se_WriteGetObjectResponseCommand = __name(async (input, context) => {
    const b = (0, import_core.requestBuilder)(input, context);
    const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
      "x-amz-content-sha256": "UNSIGNED-PAYLOAD",
      "content-type": "application/octet-stream",
      [_xarr]: input[_RR],
      [_xart]: input[_RT],
      [_xafs]: [() => isSerializableHeaderValue(input[_SCt]), () => input[_SCt].toString()],
      [_xafec]: input[_EC],
      [_xafem]: input[_EM],
      [_xafhar]: input[_AR],
      [_xafhcc]: input[_CC],
      [_xafhcd]: input[_CD],
      [_xafhce]: input[_CE],
      [_xafhcl]: input[_CL],
      [_cl_]: [() => isSerializableHeaderValue(input[_CLo]), () => input[_CLo].toString()],
      [_xafhcr]: input[_CR],
      [_xafhct]: input[_CT],
      [_xafhxacc]: input[_CCRC],
      [_xafhxacc_]: input[_CCRCC],
      [_xafhxacs]: input[_CSHA],
      [_xafhxacs_]: input[_CSHAh],
      [_xafhxadm]: [() => isSerializableHeaderValue(input[_DM]), () => input[_DM].toString()],
      [_xafhe]: input[_ETa],
      [_xafhe_]: [() => isSerializableHeaderValue(input[_E]), () => (0, import_smithy_client.dateToUtcString)(input[_E]).toString()],
      [_xafhxae]: input[_Exp],
      [_xafhlm]: [() => isSerializableHeaderValue(input[_LM]), () => (0, import_smithy_client.dateToUtcString)(input[_LM]).toString()],
      [_xafhxamm]: [() => isSerializableHeaderValue(input[_MM]), () => input[_MM].toString()],
      [_xafhxaolm]: input[_OLM],
      [_xafhxaollh]: input[_OLLHS],
      [_xafhxaolrud]: [
        () => isSerializableHeaderValue(input[_OLRUD]),
        () => (input[_OLRUD].toISOString().split(".")[0] + "Z").toString()
      ],
      [_xafhxampc]: [() => isSerializableHeaderValue(input[_PC]), () => input[_PC].toString()],
      [_xafhxars]: input[_RS],
      [_xafhxarc]: input[_RC],
      [_xafhxar]: input[_Re],
      [_xafhxasse]: input[_SSE],
      [_xafhxasseca]: input[_SSECA],
      [_xafhxasseakki]: input[_SSEKMSKI],
      [_xafhxasseckm]: input[_SSECKMD],
      [_xafhxasc]: input[_SC],
      [_xafhxatc]: [() => isSerializableHeaderValue(input[_TC]), () => input[_TC].toString()],
      [_xafhxavi]: input[_VI],
      [_xafhxassebke]: [() => isSerializableHeaderValue(input[_BKE]), () => input[_BKE].toString()],
      ...input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {
        acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
        return acc;
      }, {})
    });
    b.bp("/WriteGetObjectResponse");
    const query = (0, import_smithy_client.map)({
      [_xi]: [, "WriteGetObjectResponse"]
    });
    let body;
    let contents;
    if (input.Body !== undefined) {
      contents = input.Body;
      body = contents;
    }
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
      resolvedHostname = "{RequestRoute}." + resolvedHostname;
      if (input.RequestRoute === undefined) {
        throw new Error("Empty value provided for input host prefix: RequestRoute.");
      }
      resolvedHostname = resolvedHostname.replace("{RequestRoute}", input.RequestRoute);
      if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
        throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
      }
    }
    b.hn(resolvedHostname);
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
  }, "se_WriteGetObjectResponseCommand");
  var de_AbortMultipartUploadCommand = __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_AbortMultipartUploadCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_AbortMultipartUploadCommand");
  var de_AbortMultipartUploadCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchUpload":
      case "com.amazonaws.s3#NoSuchUpload":
        throw await de_NoSuchUploadRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_AbortMultipartUploadCommandError");
  var de_CompleteMultipartUploadCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CompleteMultipartUploadCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_Exp]: [, output.headers[_xae]],
      [_SSE]: [, output.headers[_xasse]],
      [_VI]: [, output.headers[_xavi]],
      [_SSEKMSKI]: [, output.headers[_xasseakki]],
      [_BKE]: [() => output.headers[_xassebke] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xassebke])],
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data[_B] != null) {
      contents[_B] = (0, import_smithy_client.expectString)(data[_B]);
    }
    if (data[_CCRC] != null) {
      contents[_CCRC] = (0, import_smithy_client.expectString)(data[_CCRC]);
    }
    if (data[_CCRCC] != null) {
      contents[_CCRCC] = (0, import_smithy_client.expectString)(data[_CCRCC]);
    }
    if (data[_CSHA] != null) {
      contents[_CSHA] = (0, import_smithy_client.expectString)(data[_CSHA]);
    }
    if (data[_CSHAh] != null) {
      contents[_CSHAh] = (0, import_smithy_client.expectString)(data[_CSHAh]);
    }
    if (data[_ETa] != null) {
      contents[_ETa] = (0, import_smithy_client.expectString)(data[_ETa]);
    }
    if (data[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(data[_K]);
    }
    if (data[_L] != null) {
      contents[_L] = (0, import_smithy_client.expectString)(data[_L]);
    }
    return contents;
  }, "de_CompleteMultipartUploadCommand");
  var de_CompleteMultipartUploadCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_CompleteMultipartUploadCommandError");
  var de_CopyObjectCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CopyObjectCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_Exp]: [, output.headers[_xae]],
      [_CSVI]: [, output.headers[_xacsvi]],
      [_VI]: [, output.headers[_xavi]],
      [_SSE]: [, output.headers[_xasse]],
      [_SSECA]: [, output.headers[_xasseca]],
      [_SSECKMD]: [, output.headers[_xasseckm]],
      [_SSEKMSKI]: [, output.headers[_xasseakki]],
      [_SSEKMSEC]: [, output.headers[_xassec]],
      [_BKE]: [() => output.headers[_xassebke] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xassebke])],
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectObject)(await parseBody(output.body, context));
    contents.CopyObjectResult = de_CopyObjectResult(data, context);
    return contents;
  }, "de_CopyObjectCommand");
  var de_CopyObjectCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "ObjectNotInActiveTierError":
      case "com.amazonaws.s3#ObjectNotInActiveTierError":
        throw await de_ObjectNotInActiveTierErrorRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_CopyObjectCommandError");
  var de_CreateBucketCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CreateBucketCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_L]: [, output.headers[_lo]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_CreateBucketCommand");
  var de_CreateBucketCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "BucketAlreadyExists":
      case "com.amazonaws.s3#BucketAlreadyExists":
        throw await de_BucketAlreadyExistsRes(parsedOutput, context);
      case "BucketAlreadyOwnedByYou":
      case "com.amazonaws.s3#BucketAlreadyOwnedByYou":
        throw await de_BucketAlreadyOwnedByYouRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_CreateBucketCommandError");
  var de_CreateMultipartUploadCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CreateMultipartUploadCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_AD]: [
        () => output.headers[_xaad] !== undefined,
        () => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc7231DateTime)(output.headers[_xaad]))
      ],
      [_ARI]: [, output.headers[_xaari]],
      [_SSE]: [, output.headers[_xasse]],
      [_SSECA]: [, output.headers[_xasseca]],
      [_SSECKMD]: [, output.headers[_xasseckm]],
      [_SSEKMSKI]: [, output.headers[_xasseakki]],
      [_SSEKMSEC]: [, output.headers[_xassec]],
      [_BKE]: [() => output.headers[_xassebke] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xassebke])],
      [_RC]: [, output.headers[_xarc]],
      [_CA]: [, output.headers[_xaca]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data[_B] != null) {
      contents[_B] = (0, import_smithy_client.expectString)(data[_B]);
    }
    if (data[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(data[_K]);
    }
    if (data[_UI] != null) {
      contents[_UI] = (0, import_smithy_client.expectString)(data[_UI]);
    }
    return contents;
  }, "de_CreateMultipartUploadCommand");
  var de_CreateMultipartUploadCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_CreateMultipartUploadCommandError");
  var de_CreateSessionCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CreateSessionCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data[_C] != null) {
      contents[_C] = de_SessionCredentials(data[_C], context);
    }
    return contents;
  }, "de_CreateSessionCommand");
  var de_CreateSessionCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchBucket":
      case "com.amazonaws.s3#NoSuchBucket":
        throw await de_NoSuchBucketRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_CreateSessionCommandError");
  var de_DeleteBucketCommand = __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketCommand");
  var de_DeleteBucketCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_DeleteBucketCommandError");
  var de_DeleteBucketAnalyticsConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketAnalyticsConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketAnalyticsConfigurationCommand");
  var de_DeleteBucketAnalyticsConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_DeleteBucketAnalyticsConfigurationCommandError");
  var de_DeleteBucketCorsCommand = __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketCorsCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketCorsCommand");
  var de_DeleteBucketCorsCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_DeleteBucketCorsCommandError");
  var de_DeleteBucketEncryptionCommand = __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketEncryptionCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketEncryptionCommand");
  var de_DeleteBucketEncryptionCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_DeleteBucketEncryptionCommandError");
  var de_DeleteBucketIntelligentTieringConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketIntelligentTieringConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketIntelligentTieringConfigurationCommand");
  var de_DeleteBucketIntelligentTieringConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_DeleteBucketIntelligentTieringConfigurationCommandError");
  var de_DeleteBucketInventoryConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketInventoryConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketInventoryConfigurationCommand");
  var de_DeleteBucketInventoryConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_DeleteBucketInventoryConfigurationCommandError");
  var de_DeleteBucketLifecycleCommand = __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketLifecycleCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketLifecycleCommand");
  var de_DeleteBucketLifecycleCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_DeleteBucketLifecycleCommandError");
  var de_DeleteBucketMetricsConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketMetricsConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketMetricsConfigurationCommand");
  var de_DeleteBucketMetricsConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_DeleteBucketMetricsConfigurationCommandError");
  var de_DeleteBucketOwnershipControlsCommand = __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketOwnershipControlsCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketOwnershipControlsCommand");
  var de_DeleteBucketOwnershipControlsCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_DeleteBucketOwnershipControlsCommandError");
  var de_DeleteBucketPolicyCommand = __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketPolicyCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketPolicyCommand");
  var de_DeleteBucketPolicyCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_DeleteBucketPolicyCommandError");
  var de_DeleteBucketReplicationCommand = __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketReplicationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketReplicationCommand");
  var de_DeleteBucketReplicationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_DeleteBucketReplicationCommandError");
  var de_DeleteBucketTaggingCommand = __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketTaggingCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketTaggingCommand");
  var de_DeleteBucketTaggingCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_DeleteBucketTaggingCommandError");
  var de_DeleteBucketWebsiteCommand = __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketWebsiteCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteBucketWebsiteCommand");
  var de_DeleteBucketWebsiteCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_DeleteBucketWebsiteCommandError");
  var de_DeleteObjectCommand = __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteObjectCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_DM]: [() => output.headers[_xadm] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xadm])],
      [_VI]: [, output.headers[_xavi]],
      [_RC]: [, output.headers[_xarc]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteObjectCommand");
  var de_DeleteObjectCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_DeleteObjectCommandError");
  var de_DeleteObjectsCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_DeleteObjectsCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Deleted === "") {
      contents[_De] = [];
    } else if (data[_De] != null) {
      contents[_De] = de_DeletedObjects((0, import_smithy_client.getArrayIfSingleItem)(data[_De]), context);
    }
    if (data.Error === "") {
      contents[_Err] = [];
    } else if (data[_Er] != null) {
      contents[_Err] = de_Errors((0, import_smithy_client.getArrayIfSingleItem)(data[_Er]), context);
    }
    return contents;
  }, "de_DeleteObjectsCommand");
  var de_DeleteObjectsCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_DeleteObjectsCommandError");
  var de_DeleteObjectTaggingCommand = __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteObjectTaggingCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_VI]: [, output.headers[_xavi]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeleteObjectTaggingCommand");
  var de_DeleteObjectTaggingCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_DeleteObjectTaggingCommandError");
  var de_DeletePublicAccessBlockCommand = __name(async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeletePublicAccessBlockCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_DeletePublicAccessBlockCommand");
  var de_DeletePublicAccessBlockCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_DeletePublicAccessBlockCommandError");
  var de_GetBucketAccelerateConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketAccelerateConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(data[_S]);
    }
    return contents;
  }, "de_GetBucketAccelerateConfigurationCommand");
  var de_GetBucketAccelerateConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketAccelerateConfigurationCommandError");
  var de_GetBucketAclCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketAclCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AccessControlList === "") {
      contents[_Gr] = [];
    } else if (data[_ACLc] != null && data[_ACLc][_G] != null) {
      contents[_Gr] = de_Grants((0, import_smithy_client.getArrayIfSingleItem)(data[_ACLc][_G]), context);
    }
    if (data[_O] != null) {
      contents[_O] = de_Owner(data[_O], context);
    }
    return contents;
  }, "de_GetBucketAclCommand");
  var de_GetBucketAclCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketAclCommandError");
  var de_GetBucketAnalyticsConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketAnalyticsConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await parseBody(output.body, context));
    contents.AnalyticsConfiguration = de_AnalyticsConfiguration(data, context);
    return contents;
  }, "de_GetBucketAnalyticsConfigurationCommand");
  var de_GetBucketAnalyticsConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketAnalyticsConfigurationCommandError");
  var de_GetBucketCorsCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketCorsCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CORSRule === "") {
      contents[_CORSRu] = [];
    } else if (data[_CORSR] != null) {
      contents[_CORSRu] = de_CORSRules((0, import_smithy_client.getArrayIfSingleItem)(data[_CORSR]), context);
    }
    return contents;
  }, "de_GetBucketCorsCommand");
  var de_GetBucketCorsCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketCorsCommandError");
  var de_GetBucketEncryptionCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketEncryptionCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await parseBody(output.body, context));
    contents.ServerSideEncryptionConfiguration = de_ServerSideEncryptionConfiguration(data, context);
    return contents;
  }, "de_GetBucketEncryptionCommand");
  var de_GetBucketEncryptionCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketEncryptionCommandError");
  var de_GetBucketIntelligentTieringConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketIntelligentTieringConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await parseBody(output.body, context));
    contents.IntelligentTieringConfiguration = de_IntelligentTieringConfiguration(data, context);
    return contents;
  }, "de_GetBucketIntelligentTieringConfigurationCommand");
  var de_GetBucketIntelligentTieringConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketIntelligentTieringConfigurationCommandError");
  var de_GetBucketInventoryConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketInventoryConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await parseBody(output.body, context));
    contents.InventoryConfiguration = de_InventoryConfiguration(data, context);
    return contents;
  }, "de_GetBucketInventoryConfigurationCommand");
  var de_GetBucketInventoryConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketInventoryConfigurationCommandError");
  var de_GetBucketLifecycleConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketLifecycleConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Rule === "") {
      contents[_Rul] = [];
    } else if (data[_Ru] != null) {
      contents[_Rul] = de_LifecycleRules((0, import_smithy_client.getArrayIfSingleItem)(data[_Ru]), context);
    }
    return contents;
  }, "de_GetBucketLifecycleConfigurationCommand");
  var de_GetBucketLifecycleConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketLifecycleConfigurationCommandError");
  var de_GetBucketLocationCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketLocationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data[_LC] != null) {
      contents[_LC] = (0, import_smithy_client.expectString)(data[_LC]);
    }
    return contents;
  }, "de_GetBucketLocationCommand");
  var de_GetBucketLocationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketLocationCommandError");
  var de_GetBucketLoggingCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketLoggingCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data[_LE] != null) {
      contents[_LE] = de_LoggingEnabled(data[_LE], context);
    }
    return contents;
  }, "de_GetBucketLoggingCommand");
  var de_GetBucketLoggingCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketLoggingCommandError");
  var de_GetBucketMetricsConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketMetricsConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await parseBody(output.body, context));
    contents.MetricsConfiguration = de_MetricsConfiguration(data, context);
    return contents;
  }, "de_GetBucketMetricsConfigurationCommand");
  var de_GetBucketMetricsConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketMetricsConfigurationCommandError");
  var de_GetBucketNotificationConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketNotificationConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data[_EBC] != null) {
      contents[_EBC] = de_EventBridgeConfiguration(data[_EBC], context);
    }
    if (data.CloudFunctionConfiguration === "") {
      contents[_LFC] = [];
    } else if (data[_CFC] != null) {
      contents[_LFC] = de_LambdaFunctionConfigurationList((0, import_smithy_client.getArrayIfSingleItem)(data[_CFC]), context);
    }
    if (data.QueueConfiguration === "") {
      contents[_QCu] = [];
    } else if (data[_QC] != null) {
      contents[_QCu] = de_QueueConfigurationList((0, import_smithy_client.getArrayIfSingleItem)(data[_QC]), context);
    }
    if (data.TopicConfiguration === "") {
      contents[_TCop] = [];
    } else if (data[_TCo] != null) {
      contents[_TCop] = de_TopicConfigurationList((0, import_smithy_client.getArrayIfSingleItem)(data[_TCo]), context);
    }
    return contents;
  }, "de_GetBucketNotificationConfigurationCommand");
  var de_GetBucketNotificationConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketNotificationConfigurationCommandError");
  var de_GetBucketOwnershipControlsCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketOwnershipControlsCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await parseBody(output.body, context));
    contents.OwnershipControls = de_OwnershipControls(data, context);
    return contents;
  }, "de_GetBucketOwnershipControlsCommand");
  var de_GetBucketOwnershipControlsCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketOwnershipControlsCommandError");
  var de_GetBucketPolicyCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketPolicyCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = await collectBodyString(output.body, context);
    contents.Policy = (0, import_smithy_client.expectString)(data);
    return contents;
  }, "de_GetBucketPolicyCommand");
  var de_GetBucketPolicyCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketPolicyCommandError");
  var de_GetBucketPolicyStatusCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketPolicyStatusCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await parseBody(output.body, context));
    contents.PolicyStatus = de_PolicyStatus(data, context);
    return contents;
  }, "de_GetBucketPolicyStatusCommand");
  var de_GetBucketPolicyStatusCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketPolicyStatusCommandError");
  var de_GetBucketReplicationCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketReplicationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await parseBody(output.body, context));
    contents.ReplicationConfiguration = de_ReplicationConfiguration(data, context);
    return contents;
  }, "de_GetBucketReplicationCommand");
  var de_GetBucketReplicationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketReplicationCommandError");
  var de_GetBucketRequestPaymentCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketRequestPaymentCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data[_Pa] != null) {
      contents[_Pa] = (0, import_smithy_client.expectString)(data[_Pa]);
    }
    return contents;
  }, "de_GetBucketRequestPaymentCommand");
  var de_GetBucketRequestPaymentCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketRequestPaymentCommandError");
  var de_GetBucketTaggingCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketTaggingCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data.TagSet === "") {
      contents[_TS] = [];
    } else if (data[_TS] != null && data[_TS][_Ta] != null) {
      contents[_TS] = de_TagSet((0, import_smithy_client.getArrayIfSingleItem)(data[_TS][_Ta]), context);
    }
    return contents;
  }, "de_GetBucketTaggingCommand");
  var de_GetBucketTaggingCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketTaggingCommandError");
  var de_GetBucketVersioningCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketVersioningCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data[_MDf] != null) {
      contents[_MFAD] = (0, import_smithy_client.expectString)(data[_MDf]);
    }
    if (data[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(data[_S]);
    }
    return contents;
  }, "de_GetBucketVersioningCommand");
  var de_GetBucketVersioningCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketVersioningCommandError");
  var de_GetBucketWebsiteCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketWebsiteCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data[_ED] != null) {
      contents[_ED] = de_ErrorDocument(data[_ED], context);
    }
    if (data[_ID] != null) {
      contents[_ID] = de_IndexDocument(data[_ID], context);
    }
    if (data[_RART] != null) {
      contents[_RART] = de_RedirectAllRequestsTo(data[_RART], context);
    }
    if (data.RoutingRules === "") {
      contents[_RRo] = [];
    } else if (data[_RRo] != null && data[_RRo][_RRou] != null) {
      contents[_RRo] = de_RoutingRules((0, import_smithy_client.getArrayIfSingleItem)(data[_RRo][_RRou]), context);
    }
    return contents;
  }, "de_GetBucketWebsiteCommand");
  var de_GetBucketWebsiteCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetBucketWebsiteCommandError");
  var de_GetObjectCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetObjectCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_DM]: [() => output.headers[_xadm] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xadm])],
      [_AR]: [, output.headers[_ar]],
      [_Exp]: [, output.headers[_xae]],
      [_Re]: [, output.headers[_xar]],
      [_LM]: [() => output.headers[_lm] !== undefined, () => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc7231DateTime)(output.headers[_lm]))],
      [_CLo]: [() => output.headers[_cl_] !== undefined, () => (0, import_smithy_client.strictParseLong)(output.headers[_cl_])],
      [_ETa]: [, output.headers[_eta]],
      [_CCRC]: [, output.headers[_xacc]],
      [_CCRCC]: [, output.headers[_xacc_]],
      [_CSHA]: [, output.headers[_xacs]],
      [_CSHAh]: [, output.headers[_xacs_]],
      [_MM]: [() => output.headers[_xamm] !== undefined, () => (0, import_smithy_client.strictParseInt32)(output.headers[_xamm])],
      [_VI]: [, output.headers[_xavi]],
      [_CC]: [, output.headers[_cc]],
      [_CD]: [, output.headers[_cd]],
      [_CE]: [, output.headers[_ce]],
      [_CL]: [, output.headers[_cl]],
      [_CR]: [, output.headers[_cr]],
      [_CT]: [, output.headers[_ct]],
      [_E]: [() => output.headers[_e] !== undefined, () => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc7231DateTime)(output.headers[_e]))],
      [_ES]: [, output.headers[_ex]],
      [_WRL]: [, output.headers[_xawrl]],
      [_SSE]: [, output.headers[_xasse]],
      [_SSECA]: [, output.headers[_xasseca]],
      [_SSECKMD]: [, output.headers[_xasseckm]],
      [_SSEKMSKI]: [, output.headers[_xasseakki]],
      [_BKE]: [() => output.headers[_xassebke] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xassebke])],
      [_SC]: [, output.headers[_xasc]],
      [_RC]: [, output.headers[_xarc]],
      [_RS]: [, output.headers[_xars]],
      [_PC]: [() => output.headers[_xampc] !== undefined, () => (0, import_smithy_client.strictParseInt32)(output.headers[_xampc])],
      [_TC]: [() => output.headers[_xatc] !== undefined, () => (0, import_smithy_client.strictParseInt32)(output.headers[_xatc])],
      [_OLM]: [, output.headers[_xaolm]],
      [_OLRUD]: [
        () => output.headers[_xaolrud] !== undefined,
        () => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output.headers[_xaolrud]))
      ],
      [_OLLHS]: [, output.headers[_xaollh]],
      Metadata: [
        ,
        Object.keys(output.headers).filter((header) => header.startsWith("x-amz-meta-")).reduce((acc, header) => {
          acc[header.substring(11)] = output.headers[header];
          return acc;
        }, {})
      ]
    });
    const data = output.body;
    context.sdkStreamMixin(data);
    contents.Body = data;
    return contents;
  }, "de_GetObjectCommand");
  var de_GetObjectCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "InvalidObjectState":
      case "com.amazonaws.s3#InvalidObjectState":
        throw await de_InvalidObjectStateRes(parsedOutput, context);
      case "NoSuchKey":
      case "com.amazonaws.s3#NoSuchKey":
        throw await de_NoSuchKeyRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_GetObjectCommandError");
  var de_GetObjectAclCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetObjectAclCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AccessControlList === "") {
      contents[_Gr] = [];
    } else if (data[_ACLc] != null && data[_ACLc][_G] != null) {
      contents[_Gr] = de_Grants((0, import_smithy_client.getArrayIfSingleItem)(data[_ACLc][_G]), context);
    }
    if (data[_O] != null) {
      contents[_O] = de_Owner(data[_O], context);
    }
    return contents;
  }, "de_GetObjectAclCommand");
  var de_GetObjectAclCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchKey":
      case "com.amazonaws.s3#NoSuchKey":
        throw await de_NoSuchKeyRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_GetObjectAclCommandError");
  var de_GetObjectAttributesCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetObjectAttributesCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_DM]: [() => output.headers[_xadm] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xadm])],
      [_LM]: [() => output.headers[_lm] !== undefined, () => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc7231DateTime)(output.headers[_lm]))],
      [_VI]: [, output.headers[_xavi]],
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data[_Ch] != null) {
      contents[_Ch] = de_Checksum(data[_Ch], context);
    }
    if (data[_ETa] != null) {
      contents[_ETa] = (0, import_smithy_client.expectString)(data[_ETa]);
    }
    if (data[_OP] != null) {
      contents[_OP] = de_GetObjectAttributesParts(data[_OP], context);
    }
    if (data[_OSb] != null) {
      contents[_OSb] = (0, import_smithy_client.strictParseLong)(data[_OSb]);
    }
    if (data[_SC] != null) {
      contents[_SC] = (0, import_smithy_client.expectString)(data[_SC]);
    }
    return contents;
  }, "de_GetObjectAttributesCommand");
  var de_GetObjectAttributesCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchKey":
      case "com.amazonaws.s3#NoSuchKey":
        throw await de_NoSuchKeyRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_GetObjectAttributesCommandError");
  var de_GetObjectLegalHoldCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetObjectLegalHoldCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await parseBody(output.body, context));
    contents.LegalHold = de_ObjectLockLegalHold(data, context);
    return contents;
  }, "de_GetObjectLegalHoldCommand");
  var de_GetObjectLegalHoldCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetObjectLegalHoldCommandError");
  var de_GetObjectLockConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetObjectLockConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await parseBody(output.body, context));
    contents.ObjectLockConfiguration = de_ObjectLockConfiguration(data, context);
    return contents;
  }, "de_GetObjectLockConfigurationCommand");
  var de_GetObjectLockConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetObjectLockConfigurationCommandError");
  var de_GetObjectRetentionCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetObjectRetentionCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await parseBody(output.body, context));
    contents.Retention = de_ObjectLockRetention(data, context);
    return contents;
  }, "de_GetObjectRetentionCommand");
  var de_GetObjectRetentionCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetObjectRetentionCommandError");
  var de_GetObjectTaggingCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetObjectTaggingCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_VI]: [, output.headers[_xavi]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data.TagSet === "") {
      contents[_TS] = [];
    } else if (data[_TS] != null && data[_TS][_Ta] != null) {
      contents[_TS] = de_TagSet((0, import_smithy_client.getArrayIfSingleItem)(data[_TS][_Ta]), context);
    }
    return contents;
  }, "de_GetObjectTaggingCommand");
  var de_GetObjectTaggingCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetObjectTaggingCommandError");
  var de_GetObjectTorrentCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetObjectTorrentCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    const data = output.body;
    context.sdkStreamMixin(data);
    contents.Body = data;
    return contents;
  }, "de_GetObjectTorrentCommand");
  var de_GetObjectTorrentCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetObjectTorrentCommandError");
  var de_GetPublicAccessBlockCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetPublicAccessBlockCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectObject)(await parseBody(output.body, context));
    contents.PublicAccessBlockConfiguration = de_PublicAccessBlockConfiguration(data, context);
    return contents;
  }, "de_GetPublicAccessBlockCommand");
  var de_GetPublicAccessBlockCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_GetPublicAccessBlockCommandError");
  var de_HeadBucketCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_HeadBucketCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_BLT]: [, output.headers[_xablt]],
      [_BLN]: [, output.headers[_xabln]],
      [_BR]: [, output.headers[_xabr]],
      [_APA]: [() => output.headers[_xaapa] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xaapa])]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_HeadBucketCommand");
  var de_HeadBucketCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NotFound":
      case "com.amazonaws.s3#NotFound":
        throw await de_NotFoundRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_HeadBucketCommandError");
  var de_HeadObjectCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_HeadObjectCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_DM]: [() => output.headers[_xadm] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xadm])],
      [_AR]: [, output.headers[_ar]],
      [_Exp]: [, output.headers[_xae]],
      [_Re]: [, output.headers[_xar]],
      [_AS]: [, output.headers[_xaas]],
      [_LM]: [() => output.headers[_lm] !== undefined, () => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc7231DateTime)(output.headers[_lm]))],
      [_CLo]: [() => output.headers[_cl_] !== undefined, () => (0, import_smithy_client.strictParseLong)(output.headers[_cl_])],
      [_CCRC]: [, output.headers[_xacc]],
      [_CCRCC]: [, output.headers[_xacc_]],
      [_CSHA]: [, output.headers[_xacs]],
      [_CSHAh]: [, output.headers[_xacs_]],
      [_ETa]: [, output.headers[_eta]],
      [_MM]: [() => output.headers[_xamm] !== undefined, () => (0, import_smithy_client.strictParseInt32)(output.headers[_xamm])],
      [_VI]: [, output.headers[_xavi]],
      [_CC]: [, output.headers[_cc]],
      [_CD]: [, output.headers[_cd]],
      [_CE]: [, output.headers[_ce]],
      [_CL]: [, output.headers[_cl]],
      [_CT]: [, output.headers[_ct]],
      [_E]: [() => output.headers[_e] !== undefined, () => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc7231DateTime)(output.headers[_e]))],
      [_ES]: [, output.headers[_ex]],
      [_WRL]: [, output.headers[_xawrl]],
      [_SSE]: [, output.headers[_xasse]],
      [_SSECA]: [, output.headers[_xasseca]],
      [_SSECKMD]: [, output.headers[_xasseckm]],
      [_SSEKMSKI]: [, output.headers[_xasseakki]],
      [_BKE]: [() => output.headers[_xassebke] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xassebke])],
      [_SC]: [, output.headers[_xasc]],
      [_RC]: [, output.headers[_xarc]],
      [_RS]: [, output.headers[_xars]],
      [_PC]: [() => output.headers[_xampc] !== undefined, () => (0, import_smithy_client.strictParseInt32)(output.headers[_xampc])],
      [_OLM]: [, output.headers[_xaolm]],
      [_OLRUD]: [
        () => output.headers[_xaolrud] !== undefined,
        () => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output.headers[_xaolrud]))
      ],
      [_OLLHS]: [, output.headers[_xaollh]],
      Metadata: [
        ,
        Object.keys(output.headers).filter((header) => header.startsWith("x-amz-meta-")).reduce((acc, header) => {
          acc[header.substring(11)] = output.headers[header];
          return acc;
        }, {})
      ]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_HeadObjectCommand");
  var de_HeadObjectCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NotFound":
      case "com.amazonaws.s3#NotFound":
        throw await de_NotFoundRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_HeadObjectCommandError");
  var de_ListBucketAnalyticsConfigurationsCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListBucketAnalyticsConfigurationsCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data.AnalyticsConfiguration === "") {
      contents[_ACLn] = [];
    } else if (data[_AC] != null) {
      contents[_ACLn] = de_AnalyticsConfigurationList((0, import_smithy_client.getArrayIfSingleItem)(data[_AC]), context);
    }
    if (data[_CTo] != null) {
      contents[_CTo] = (0, import_smithy_client.expectString)(data[_CTo]);
    }
    if (data[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(data[_IT]);
    }
    if (data[_NCT] != null) {
      contents[_NCT] = (0, import_smithy_client.expectString)(data[_NCT]);
    }
    return contents;
  }, "de_ListBucketAnalyticsConfigurationsCommand");
  var de_ListBucketAnalyticsConfigurationsCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_ListBucketAnalyticsConfigurationsCommandError");
  var de_ListBucketIntelligentTieringConfigurationsCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListBucketIntelligentTieringConfigurationsCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data[_CTo] != null) {
      contents[_CTo] = (0, import_smithy_client.expectString)(data[_CTo]);
    }
    if (data.IntelligentTieringConfiguration === "") {
      contents[_ITCL] = [];
    } else if (data[_ITC] != null) {
      contents[_ITCL] = de_IntelligentTieringConfigurationList((0, import_smithy_client.getArrayIfSingleItem)(data[_ITC]), context);
    }
    if (data[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(data[_IT]);
    }
    if (data[_NCT] != null) {
      contents[_NCT] = (0, import_smithy_client.expectString)(data[_NCT]);
    }
    return contents;
  }, "de_ListBucketIntelligentTieringConfigurationsCommand");
  var de_ListBucketIntelligentTieringConfigurationsCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_ListBucketIntelligentTieringConfigurationsCommandError");
  var de_ListBucketInventoryConfigurationsCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListBucketInventoryConfigurationsCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data[_CTo] != null) {
      contents[_CTo] = (0, import_smithy_client.expectString)(data[_CTo]);
    }
    if (data.InventoryConfiguration === "") {
      contents[_ICL] = [];
    } else if (data[_IC] != null) {
      contents[_ICL] = de_InventoryConfigurationList((0, import_smithy_client.getArrayIfSingleItem)(data[_IC]), context);
    }
    if (data[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(data[_IT]);
    }
    if (data[_NCT] != null) {
      contents[_NCT] = (0, import_smithy_client.expectString)(data[_NCT]);
    }
    return contents;
  }, "de_ListBucketInventoryConfigurationsCommand");
  var de_ListBucketInventoryConfigurationsCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_ListBucketInventoryConfigurationsCommandError");
  var de_ListBucketMetricsConfigurationsCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListBucketMetricsConfigurationsCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data[_CTo] != null) {
      contents[_CTo] = (0, import_smithy_client.expectString)(data[_CTo]);
    }
    if (data[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(data[_IT]);
    }
    if (data.MetricsConfiguration === "") {
      contents[_MCL] = [];
    } else if (data[_MC] != null) {
      contents[_MCL] = de_MetricsConfigurationList((0, import_smithy_client.getArrayIfSingleItem)(data[_MC]), context);
    }
    if (data[_NCT] != null) {
      contents[_NCT] = (0, import_smithy_client.expectString)(data[_NCT]);
    }
    return contents;
  }, "de_ListBucketMetricsConfigurationsCommand");
  var de_ListBucketMetricsConfigurationsCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_ListBucketMetricsConfigurationsCommandError");
  var de_ListBucketsCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListBucketsCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Buckets === "") {
      contents[_Bu] = [];
    } else if (data[_Bu] != null && data[_Bu][_B] != null) {
      contents[_Bu] = de_Buckets((0, import_smithy_client.getArrayIfSingleItem)(data[_Bu][_B]), context);
    }
    if (data[_O] != null) {
      contents[_O] = de_Owner(data[_O], context);
    }
    return contents;
  }, "de_ListBucketsCommand");
  var de_ListBucketsCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_ListBucketsCommandError");
  var de_ListDirectoryBucketsCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListDirectoryBucketsCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data.Buckets === "") {
      contents[_Bu] = [];
    } else if (data[_Bu] != null && data[_Bu][_B] != null) {
      contents[_Bu] = de_Buckets((0, import_smithy_client.getArrayIfSingleItem)(data[_Bu][_B]), context);
    }
    if (data[_CTo] != null) {
      contents[_CTo] = (0, import_smithy_client.expectString)(data[_CTo]);
    }
    return contents;
  }, "de_ListDirectoryBucketsCommand");
  var de_ListDirectoryBucketsCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_ListDirectoryBucketsCommandError");
  var de_ListMultipartUploadsCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListMultipartUploadsCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data[_B] != null) {
      contents[_B] = (0, import_smithy_client.expectString)(data[_B]);
    }
    if (data.CommonPrefixes === "") {
      contents[_CP] = [];
    } else if (data[_CP] != null) {
      contents[_CP] = de_CommonPrefixList((0, import_smithy_client.getArrayIfSingleItem)(data[_CP]), context);
    }
    if (data[_D] != null) {
      contents[_D] = (0, import_smithy_client.expectString)(data[_D]);
    }
    if (data[_ET] != null) {
      contents[_ET] = (0, import_smithy_client.expectString)(data[_ET]);
    }
    if (data[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(data[_IT]);
    }
    if (data[_KM] != null) {
      contents[_KM] = (0, import_smithy_client.expectString)(data[_KM]);
    }
    if (data[_MU] != null) {
      contents[_MU] = (0, import_smithy_client.strictParseInt32)(data[_MU]);
    }
    if (data[_NKM] != null) {
      contents[_NKM] = (0, import_smithy_client.expectString)(data[_NKM]);
    }
    if (data[_NUIM] != null) {
      contents[_NUIM] = (0, import_smithy_client.expectString)(data[_NUIM]);
    }
    if (data[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(data[_P]);
    }
    if (data[_UIM] != null) {
      contents[_UIM] = (0, import_smithy_client.expectString)(data[_UIM]);
    }
    if (data.Upload === "") {
      contents[_Up] = [];
    } else if (data[_U] != null) {
      contents[_Up] = de_MultipartUploadList((0, import_smithy_client.getArrayIfSingleItem)(data[_U]), context);
    }
    return contents;
  }, "de_ListMultipartUploadsCommand");
  var de_ListMultipartUploadsCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_ListMultipartUploadsCommandError");
  var de_ListObjectsCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListObjectsCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CommonPrefixes === "") {
      contents[_CP] = [];
    } else if (data[_CP] != null) {
      contents[_CP] = de_CommonPrefixList((0, import_smithy_client.getArrayIfSingleItem)(data[_CP]), context);
    }
    if (data.Contents === "") {
      contents[_Co] = [];
    } else if (data[_Co] != null) {
      contents[_Co] = de_ObjectList((0, import_smithy_client.getArrayIfSingleItem)(data[_Co]), context);
    }
    if (data[_D] != null) {
      contents[_D] = (0, import_smithy_client.expectString)(data[_D]);
    }
    if (data[_ET] != null) {
      contents[_ET] = (0, import_smithy_client.expectString)(data[_ET]);
    }
    if (data[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(data[_IT]);
    }
    if (data[_M] != null) {
      contents[_M] = (0, import_smithy_client.expectString)(data[_M]);
    }
    if (data[_MK] != null) {
      contents[_MK] = (0, import_smithy_client.strictParseInt32)(data[_MK]);
    }
    if (data[_N] != null) {
      contents[_N] = (0, import_smithy_client.expectString)(data[_N]);
    }
    if (data[_NM] != null) {
      contents[_NM] = (0, import_smithy_client.expectString)(data[_NM]);
    }
    if (data[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(data[_P]);
    }
    return contents;
  }, "de_ListObjectsCommand");
  var de_ListObjectsCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchBucket":
      case "com.amazonaws.s3#NoSuchBucket":
        throw await de_NoSuchBucketRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_ListObjectsCommandError");
  var de_ListObjectsV2Command = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListObjectsV2CommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CommonPrefixes === "") {
      contents[_CP] = [];
    } else if (data[_CP] != null) {
      contents[_CP] = de_CommonPrefixList((0, import_smithy_client.getArrayIfSingleItem)(data[_CP]), context);
    }
    if (data.Contents === "") {
      contents[_Co] = [];
    } else if (data[_Co] != null) {
      contents[_Co] = de_ObjectList((0, import_smithy_client.getArrayIfSingleItem)(data[_Co]), context);
    }
    if (data[_CTo] != null) {
      contents[_CTo] = (0, import_smithy_client.expectString)(data[_CTo]);
    }
    if (data[_D] != null) {
      contents[_D] = (0, import_smithy_client.expectString)(data[_D]);
    }
    if (data[_ET] != null) {
      contents[_ET] = (0, import_smithy_client.expectString)(data[_ET]);
    }
    if (data[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(data[_IT]);
    }
    if (data[_KC] != null) {
      contents[_KC] = (0, import_smithy_client.strictParseInt32)(data[_KC]);
    }
    if (data[_MK] != null) {
      contents[_MK] = (0, import_smithy_client.strictParseInt32)(data[_MK]);
    }
    if (data[_N] != null) {
      contents[_N] = (0, import_smithy_client.expectString)(data[_N]);
    }
    if (data[_NCT] != null) {
      contents[_NCT] = (0, import_smithy_client.expectString)(data[_NCT]);
    }
    if (data[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(data[_P]);
    }
    if (data[_SA] != null) {
      contents[_SA] = (0, import_smithy_client.expectString)(data[_SA]);
    }
    return contents;
  }, "de_ListObjectsV2Command");
  var de_ListObjectsV2CommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchBucket":
      case "com.amazonaws.s3#NoSuchBucket":
        throw await de_NoSuchBucketRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_ListObjectsV2CommandError");
  var de_ListObjectVersionsCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListObjectVersionsCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CommonPrefixes === "") {
      contents[_CP] = [];
    } else if (data[_CP] != null) {
      contents[_CP] = de_CommonPrefixList((0, import_smithy_client.getArrayIfSingleItem)(data[_CP]), context);
    }
    if (data.DeleteMarker === "") {
      contents[_DMe] = [];
    } else if (data[_DM] != null) {
      contents[_DMe] = de_DeleteMarkers((0, import_smithy_client.getArrayIfSingleItem)(data[_DM]), context);
    }
    if (data[_D] != null) {
      contents[_D] = (0, import_smithy_client.expectString)(data[_D]);
    }
    if (data[_ET] != null) {
      contents[_ET] = (0, import_smithy_client.expectString)(data[_ET]);
    }
    if (data[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(data[_IT]);
    }
    if (data[_KM] != null) {
      contents[_KM] = (0, import_smithy_client.expectString)(data[_KM]);
    }
    if (data[_MK] != null) {
      contents[_MK] = (0, import_smithy_client.strictParseInt32)(data[_MK]);
    }
    if (data[_N] != null) {
      contents[_N] = (0, import_smithy_client.expectString)(data[_N]);
    }
    if (data[_NKM] != null) {
      contents[_NKM] = (0, import_smithy_client.expectString)(data[_NKM]);
    }
    if (data[_NVIM] != null) {
      contents[_NVIM] = (0, import_smithy_client.expectString)(data[_NVIM]);
    }
    if (data[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(data[_P]);
    }
    if (data[_VIM] != null) {
      contents[_VIM] = (0, import_smithy_client.expectString)(data[_VIM]);
    }
    if (data.Version === "") {
      contents[_Ve] = [];
    } else if (data[_V] != null) {
      contents[_Ve] = de_ObjectVersionList((0, import_smithy_client.getArrayIfSingleItem)(data[_V]), context);
    }
    return contents;
  }, "de_ListObjectVersionsCommand");
  var de_ListObjectVersionsCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_ListObjectVersionsCommandError");
  var de_ListPartsCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListPartsCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_AD]: [
        () => output.headers[_xaad] !== undefined,
        () => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc7231DateTime)(output.headers[_xaad]))
      ],
      [_ARI]: [, output.headers[_xaari]],
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
    if (data[_B] != null) {
      contents[_B] = (0, import_smithy_client.expectString)(data[_B]);
    }
    if (data[_CA] != null) {
      contents[_CA] = (0, import_smithy_client.expectString)(data[_CA]);
    }
    if (data[_In] != null) {
      contents[_In] = de_Initiator(data[_In], context);
    }
    if (data[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(data[_IT]);
    }
    if (data[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(data[_K]);
    }
    if (data[_MP] != null) {
      contents[_MP] = (0, import_smithy_client.strictParseInt32)(data[_MP]);
    }
    if (data[_NPNM] != null) {
      contents[_NPNM] = (0, import_smithy_client.expectString)(data[_NPNM]);
    }
    if (data[_O] != null) {
      contents[_O] = de_Owner(data[_O], context);
    }
    if (data[_PNM] != null) {
      contents[_PNM] = (0, import_smithy_client.expectString)(data[_PNM]);
    }
    if (data.Part === "") {
      contents[_Part] = [];
    } else if (data[_Par] != null) {
      contents[_Part] = de_Parts((0, import_smithy_client.getArrayIfSingleItem)(data[_Par]), context);
    }
    if (data[_SC] != null) {
      contents[_SC] = (0, import_smithy_client.expectString)(data[_SC]);
    }
    if (data[_UI] != null) {
      contents[_UI] = (0, import_smithy_client.expectString)(data[_UI]);
    }
    return contents;
  }, "de_ListPartsCommand");
  var de_ListPartsCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_ListPartsCommandError");
  var de_PutBucketAccelerateConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketAccelerateConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketAccelerateConfigurationCommand");
  var de_PutBucketAccelerateConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutBucketAccelerateConfigurationCommandError");
  var de_PutBucketAclCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketAclCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketAclCommand");
  var de_PutBucketAclCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutBucketAclCommandError");
  var de_PutBucketAnalyticsConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketAnalyticsConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketAnalyticsConfigurationCommand");
  var de_PutBucketAnalyticsConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutBucketAnalyticsConfigurationCommandError");
  var de_PutBucketCorsCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketCorsCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketCorsCommand");
  var de_PutBucketCorsCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutBucketCorsCommandError");
  var de_PutBucketEncryptionCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketEncryptionCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketEncryptionCommand");
  var de_PutBucketEncryptionCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutBucketEncryptionCommandError");
  var de_PutBucketIntelligentTieringConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketIntelligentTieringConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketIntelligentTieringConfigurationCommand");
  var de_PutBucketIntelligentTieringConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutBucketIntelligentTieringConfigurationCommandError");
  var de_PutBucketInventoryConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketInventoryConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketInventoryConfigurationCommand");
  var de_PutBucketInventoryConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutBucketInventoryConfigurationCommandError");
  var de_PutBucketLifecycleConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketLifecycleConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketLifecycleConfigurationCommand");
  var de_PutBucketLifecycleConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutBucketLifecycleConfigurationCommandError");
  var de_PutBucketLoggingCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketLoggingCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketLoggingCommand");
  var de_PutBucketLoggingCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutBucketLoggingCommandError");
  var de_PutBucketMetricsConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketMetricsConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketMetricsConfigurationCommand");
  var de_PutBucketMetricsConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutBucketMetricsConfigurationCommandError");
  var de_PutBucketNotificationConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketNotificationConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketNotificationConfigurationCommand");
  var de_PutBucketNotificationConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutBucketNotificationConfigurationCommandError");
  var de_PutBucketOwnershipControlsCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketOwnershipControlsCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketOwnershipControlsCommand");
  var de_PutBucketOwnershipControlsCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutBucketOwnershipControlsCommandError");
  var de_PutBucketPolicyCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketPolicyCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketPolicyCommand");
  var de_PutBucketPolicyCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutBucketPolicyCommandError");
  var de_PutBucketReplicationCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketReplicationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketReplicationCommand");
  var de_PutBucketReplicationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutBucketReplicationCommandError");
  var de_PutBucketRequestPaymentCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketRequestPaymentCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketRequestPaymentCommand");
  var de_PutBucketRequestPaymentCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutBucketRequestPaymentCommandError");
  var de_PutBucketTaggingCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketTaggingCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketTaggingCommand");
  var de_PutBucketTaggingCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutBucketTaggingCommandError");
  var de_PutBucketVersioningCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketVersioningCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketVersioningCommand");
  var de_PutBucketVersioningCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutBucketVersioningCommandError");
  var de_PutBucketWebsiteCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketWebsiteCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutBucketWebsiteCommand");
  var de_PutBucketWebsiteCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutBucketWebsiteCommandError");
  var de_PutObjectCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutObjectCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_Exp]: [, output.headers[_xae]],
      [_ETa]: [, output.headers[_eta]],
      [_CCRC]: [, output.headers[_xacc]],
      [_CCRCC]: [, output.headers[_xacc_]],
      [_CSHA]: [, output.headers[_xacs]],
      [_CSHAh]: [, output.headers[_xacs_]],
      [_SSE]: [, output.headers[_xasse]],
      [_VI]: [, output.headers[_xavi]],
      [_SSECA]: [, output.headers[_xasseca]],
      [_SSECKMD]: [, output.headers[_xasseckm]],
      [_SSEKMSKI]: [, output.headers[_xasseakki]],
      [_SSEKMSEC]: [, output.headers[_xassec]],
      [_BKE]: [() => output.headers[_xassebke] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xassebke])],
      [_RC]: [, output.headers[_xarc]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutObjectCommand");
  var de_PutObjectCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutObjectCommandError");
  var de_PutObjectAclCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutObjectAclCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutObjectAclCommand");
  var de_PutObjectAclCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchKey":
      case "com.amazonaws.s3#NoSuchKey":
        throw await de_NoSuchKeyRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_PutObjectAclCommandError");
  var de_PutObjectLegalHoldCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutObjectLegalHoldCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutObjectLegalHoldCommand");
  var de_PutObjectLegalHoldCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutObjectLegalHoldCommandError");
  var de_PutObjectLockConfigurationCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutObjectLockConfigurationCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutObjectLockConfigurationCommand");
  var de_PutObjectLockConfigurationCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutObjectLockConfigurationCommandError");
  var de_PutObjectRetentionCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutObjectRetentionCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutObjectRetentionCommand");
  var de_PutObjectRetentionCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutObjectRetentionCommandError");
  var de_PutObjectTaggingCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutObjectTaggingCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_VI]: [, output.headers[_xavi]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutObjectTaggingCommand");
  var de_PutObjectTaggingCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutObjectTaggingCommandError");
  var de_PutPublicAccessBlockCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutPublicAccessBlockCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_PutPublicAccessBlockCommand");
  var de_PutPublicAccessBlockCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_PutPublicAccessBlockCommandError");
  var de_RestoreObjectCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_RestoreObjectCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_RC]: [, output.headers[_xarc]],
      [_ROP]: [, output.headers[_xarop]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_RestoreObjectCommand");
  var de_RestoreObjectCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "ObjectAlreadyInActiveTierError":
      case "com.amazonaws.s3#ObjectAlreadyInActiveTierError":
        throw await de_ObjectAlreadyInActiveTierErrorRes(parsedOutput, context);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  }, "de_RestoreObjectCommandError");
  var de_SelectObjectContentCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_SelectObjectContentCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    const data = output.body;
    contents.Payload = de_SelectObjectContentEventStream(data, context);
    return contents;
  }, "de_SelectObjectContentCommand");
  var de_SelectObjectContentCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_SelectObjectContentCommandError");
  var de_UploadPartCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_UploadPartCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_SSE]: [, output.headers[_xasse]],
      [_ETa]: [, output.headers[_eta]],
      [_CCRC]: [, output.headers[_xacc]],
      [_CCRCC]: [, output.headers[_xacc_]],
      [_CSHA]: [, output.headers[_xacs]],
      [_CSHAh]: [, output.headers[_xacs_]],
      [_SSECA]: [, output.headers[_xasseca]],
      [_SSECKMD]: [, output.headers[_xasseckm]],
      [_SSEKMSKI]: [, output.headers[_xasseakki]],
      [_BKE]: [() => output.headers[_xassebke] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xassebke])],
      [_RC]: [, output.headers[_xarc]]
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_UploadPartCommand");
  var de_UploadPartCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_UploadPartCommandError");
  var de_UploadPartCopyCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_UploadPartCopyCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output),
      [_CSVI]: [, output.headers[_xacsvi]],
      [_SSE]: [, output.headers[_xasse]],
      [_SSECA]: [, output.headers[_xasseca]],
      [_SSECKMD]: [, output.headers[_xasseckm]],
      [_SSEKMSKI]: [, output.headers[_xasseakki]],
      [_BKE]: [() => output.headers[_xassebke] !== undefined, () => (0, import_smithy_client.parseBoolean)(output.headers[_xassebke])],
      [_RC]: [, output.headers[_xarc]]
    });
    const data = (0, import_smithy_client.expectObject)(await parseBody(output.body, context));
    contents.CopyPartResult = de_CopyPartResult(data, context);
    return contents;
  }, "de_UploadPartCopyCommand");
  var de_UploadPartCopyCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_UploadPartCopyCommandError");
  var de_WriteGetObjectResponseCommand = __name(async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_WriteGetObjectResponseCommandError(output, context);
    }
    const contents = (0, import_smithy_client.map)({
      $metadata: deserializeMetadata(output)
    });
    await (0, import_smithy_client.collectBody)(output.body, context);
    return contents;
  }, "de_WriteGetObjectResponseCommand");
  var de_WriteGetObjectResponseCommandError = __name(async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  }, "de_WriteGetObjectResponseCommandError");
  var throwDefaultError = (0, import_smithy_client.withBaseException)(S3ServiceException);
  var de_BucketAlreadyExistsRes = __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new BucketAlreadyExists({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_BucketAlreadyExistsRes");
  var de_BucketAlreadyOwnedByYouRes = __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new BucketAlreadyOwnedByYou({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_BucketAlreadyOwnedByYouRes");
  var de_InvalidObjectStateRes = __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    if (data[_AT] != null) {
      contents[_AT] = (0, import_smithy_client.expectString)(data[_AT]);
    }
    if (data[_SC] != null) {
      contents[_SC] = (0, import_smithy_client.expectString)(data[_SC]);
    }
    const exception = new InvalidObjectState({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_InvalidObjectStateRes");
  var de_NoSuchBucketRes = __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new NoSuchBucket({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_NoSuchBucketRes");
  var de_NoSuchKeyRes = __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new NoSuchKey({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_NoSuchKeyRes");
  var de_NoSuchUploadRes = __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new NoSuchUpload({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_NoSuchUploadRes");
  var de_NotFoundRes = __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new NotFound({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_NotFoundRes");
  var de_ObjectAlreadyInActiveTierErrorRes = __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new ObjectAlreadyInActiveTierError({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_ObjectAlreadyInActiveTierErrorRes");
  var de_ObjectNotInActiveTierErrorRes = __name(async (parsedOutput, context) => {
    const contents = (0, import_smithy_client.map)({});
    const data = parsedOutput.body;
    const exception = new ObjectNotInActiveTierError({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
  }, "de_ObjectNotInActiveTierErrorRes");
  var de_SelectObjectContentEventStream = __name((output, context) => {
    return context.eventStreamMarshaller.deserialize(output, async (event) => {
      if (event["Records"] != null) {
        return {
          Records: await de_RecordsEvent_event(event["Records"], context)
        };
      }
      if (event["Stats"] != null) {
        return {
          Stats: await de_StatsEvent_event(event["Stats"], context)
        };
      }
      if (event["Progress"] != null) {
        return {
          Progress: await de_ProgressEvent_event(event["Progress"], context)
        };
      }
      if (event["Cont"] != null) {
        return {
          Cont: await de_ContinuationEvent_event(event["Cont"], context)
        };
      }
      if (event["End"] != null) {
        return {
          End: await de_EndEvent_event(event["End"], context)
        };
      }
      return { $unknown: output };
    });
  }, "de_SelectObjectContentEventStream");
  var de_ContinuationEvent_event = __name(async (output, context) => {
    const contents = {};
    const data = await parseBody(output.body, context);
    Object.assign(contents, de_ContinuationEvent(data, context));
    return contents;
  }, "de_ContinuationEvent_event");
  var de_EndEvent_event = __name(async (output, context) => {
    const contents = {};
    const data = await parseBody(output.body, context);
    Object.assign(contents, de_EndEvent(data, context));
    return contents;
  }, "de_EndEvent_event");
  var de_ProgressEvent_event = __name(async (output, context) => {
    const contents = {};
    const data = await parseBody(output.body, context);
    contents.Details = de_Progress(data, context);
    return contents;
  }, "de_ProgressEvent_event");
  var de_RecordsEvent_event = __name(async (output, context) => {
    const contents = {};
    contents.Payload = output.body;
    return contents;
  }, "de_RecordsEvent_event");
  var de_StatsEvent_event = __name(async (output, context) => {
    const contents = {};
    const data = await parseBody(output.body, context);
    contents.Details = de_Stats(data, context);
    return contents;
  }, "de_StatsEvent_event");
  var se_AbortIncompleteMultipartUpload = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_AIMU);
    if (input[_DAI] != null) {
      bn.c(import_xml_builder.XmlNode.of(_DAI, String(input[_DAI])).n(_DAI));
    }
    return bn;
  }, "se_AbortIncompleteMultipartUpload");
  var se_AccelerateConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ACc);
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_BAS, input[_S]).n(_S));
    }
    return bn;
  }, "se_AccelerateConfiguration");
  var se_AccessControlPolicy = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ACP);
    bn.lc(input, "Grants", "AccessControlList", () => se_Grants(input[_Gr], context));
    if (input[_O] != null) {
      bn.c(se_Owner(input[_O], context).n(_O));
    }
    return bn;
  }, "se_AccessControlPolicy");
  var se_AccessControlTranslation = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ACT);
    if (input[_O] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OOw, input[_O]).n(_O));
    }
    return bn;
  }, "se_AccessControlTranslation");
  var se_AllowedHeaders = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = import_xml_builder.XmlNode.of(_AH, entry);
      return n.n(_me);
    });
  }, "se_AllowedHeaders");
  var se_AllowedMethods = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = import_xml_builder.XmlNode.of(_AM, entry);
      return n.n(_me);
    });
  }, "se_AllowedMethods");
  var se_AllowedOrigins = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = import_xml_builder.XmlNode.of(_AO, entry);
      return n.n(_me);
    });
  }, "se_AllowedOrigins");
  var se_AnalyticsAndOperator = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_AAO);
    bn.cc(input, _P);
    bn.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
    return bn;
  }, "se_AnalyticsAndOperator");
  var se_AnalyticsConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_AC);
    if (input[_I] != null) {
      bn.c(import_xml_builder.XmlNode.of(_AI, input[_I]).n(_I));
    }
    if (input[_F] != null) {
      bn.c(se_AnalyticsFilter(input[_F], context).n(_F));
    }
    if (input[_SCA] != null) {
      bn.c(se_StorageClassAnalysis(input[_SCA], context).n(_SCA));
    }
    return bn;
  }, "se_AnalyticsConfiguration");
  var se_AnalyticsExportDestination = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_AED);
    if (input[_SBD] != null) {
      bn.c(se_AnalyticsS3BucketDestination(input[_SBD], context).n(_SBD));
    }
    return bn;
  }, "se_AnalyticsExportDestination");
  var se_AnalyticsFilter = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_AF);
    AnalyticsFilter.visit(input, {
      Prefix: (value) => {
        if (input[_P] != null) {
          bn.c(import_xml_builder.XmlNode.of(_P, value).n(_P));
        }
      },
      Tag: (value) => {
        if (input[_Ta] != null) {
          bn.c(se_Tag(value, context).n(_Ta));
        }
      },
      And: (value) => {
        if (input[_A] != null) {
          bn.c(se_AnalyticsAndOperator(value, context).n(_A));
        }
      },
      _: (name, value) => {
        if (!(value instanceof import_xml_builder.XmlNode || value instanceof import_xml_builder.XmlText)) {
          throw new Error("Unable to serialize unknown union members in XML.");
        }
        bn.c(new import_xml_builder.XmlNode(name).c(value));
      }
    });
    return bn;
  }, "se_AnalyticsFilter");
  var se_AnalyticsS3BucketDestination = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ASBD);
    if (input[_Fo] != null) {
      bn.c(import_xml_builder.XmlNode.of(_ASEFF, input[_Fo]).n(_Fo));
    }
    if (input[_BAI] != null) {
      bn.c(import_xml_builder.XmlNode.of(_AIc, input[_BAI]).n(_BAI));
    }
    if (input[_B] != null) {
      bn.c(import_xml_builder.XmlNode.of(_BN, input[_B]).n(_B));
    }
    bn.cc(input, _P);
    return bn;
  }, "se_AnalyticsS3BucketDestination");
  var se_BucketInfo = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_BI);
    bn.cc(input, _DR);
    if (input[_Ty] != null) {
      bn.c(import_xml_builder.XmlNode.of(_BT, input[_Ty]).n(_Ty));
    }
    return bn;
  }, "se_BucketInfo");
  var se_BucketLifecycleConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_BLC);
    bn.l(input, "Rules", "Rule", () => se_LifecycleRules(input[_Rul], context));
    return bn;
  }, "se_BucketLifecycleConfiguration");
  var se_BucketLoggingStatus = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_BLS);
    if (input[_LE] != null) {
      bn.c(se_LoggingEnabled(input[_LE], context).n(_LE));
    }
    return bn;
  }, "se_BucketLoggingStatus");
  var se_CompletedMultipartUpload = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_CMU);
    bn.l(input, "Parts", "Part", () => se_CompletedPartList(input[_Part], context));
    return bn;
  }, "se_CompletedMultipartUpload");
  var se_CompletedPart = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_CPo);
    bn.cc(input, _ETa);
    bn.cc(input, _CCRC);
    bn.cc(input, _CCRCC);
    bn.cc(input, _CSHA);
    bn.cc(input, _CSHAh);
    if (input[_PN] != null) {
      bn.c(import_xml_builder.XmlNode.of(_PN, String(input[_PN])).n(_PN));
    }
    return bn;
  }, "se_CompletedPart");
  var se_CompletedPartList = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_CompletedPart(entry, context);
      return n.n(_me);
    });
  }, "se_CompletedPartList");
  var se_Condition = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_Con);
    bn.cc(input, _HECRE);
    bn.cc(input, _KPE);
    return bn;
  }, "se_Condition");
  var se_CORSConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_CORSC);
    bn.l(input, "CORSRules", "CORSRule", () => se_CORSRules(input[_CORSRu], context));
    return bn;
  }, "se_CORSConfiguration");
  var se_CORSRule = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_CORSR);
    bn.cc(input, _ID_);
    bn.l(input, "AllowedHeaders", "AllowedHeader", () => se_AllowedHeaders(input[_AHl], context));
    bn.l(input, "AllowedMethods", "AllowedMethod", () => se_AllowedMethods(input[_AMl], context));
    bn.l(input, "AllowedOrigins", "AllowedOrigin", () => se_AllowedOrigins(input[_AOl], context));
    bn.l(input, "ExposeHeaders", "ExposeHeader", () => se_ExposeHeaders(input[_EH], context));
    if (input[_MAS] != null) {
      bn.c(import_xml_builder.XmlNode.of(_MAS, String(input[_MAS])).n(_MAS));
    }
    return bn;
  }, "se_CORSRule");
  var se_CORSRules = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_CORSRule(entry, context);
      return n.n(_me);
    });
  }, "se_CORSRules");
  var se_CreateBucketConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_CBC);
    if (input[_LC] != null) {
      bn.c(import_xml_builder.XmlNode.of(_BLCu, input[_LC]).n(_LC));
    }
    if (input[_L] != null) {
      bn.c(se_LocationInfo(input[_L], context).n(_L));
    }
    if (input[_B] != null) {
      bn.c(se_BucketInfo(input[_B], context).n(_B));
    }
    return bn;
  }, "se_CreateBucketConfiguration");
  var se_CSVInput = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_CSVIn);
    bn.cc(input, _FHI);
    bn.cc(input, _Com);
    bn.cc(input, _QEC);
    bn.cc(input, _RD);
    bn.cc(input, _FD);
    bn.cc(input, _QCuo);
    if (input[_AQRD] != null) {
      bn.c(import_xml_builder.XmlNode.of(_AQRD, String(input[_AQRD])).n(_AQRD));
    }
    return bn;
  }, "se_CSVInput");
  var se_CSVOutput = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_CSVO);
    bn.cc(input, _QF);
    bn.cc(input, _QEC);
    bn.cc(input, _RD);
    bn.cc(input, _FD);
    bn.cc(input, _QCuo);
    return bn;
  }, "se_CSVOutput");
  var se_DefaultRetention = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_DRe);
    if (input[_Mo] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OLRM, input[_Mo]).n(_Mo));
    }
    if (input[_Da] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Da, String(input[_Da])).n(_Da));
    }
    if (input[_Y] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Y, String(input[_Y])).n(_Y));
    }
    return bn;
  }, "se_DefaultRetention");
  var se_Delete = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_Del);
    bn.l(input, "Objects", "Object", () => se_ObjectIdentifierList(input[_Ob], context));
    if (input[_Q] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Q, String(input[_Q])).n(_Q));
    }
    return bn;
  }, "se_Delete");
  var se_DeleteMarkerReplication = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_DMR);
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_DMRS, input[_S]).n(_S));
    }
    return bn;
  }, "se_DeleteMarkerReplication");
  var se_Destination = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_Des);
    if (input[_B] != null) {
      bn.c(import_xml_builder.XmlNode.of(_BN, input[_B]).n(_B));
    }
    if (input[_Ac] != null) {
      bn.c(import_xml_builder.XmlNode.of(_AIc, input[_Ac]).n(_Ac));
    }
    bn.cc(input, _SC);
    if (input[_ACT] != null) {
      bn.c(se_AccessControlTranslation(input[_ACT], context).n(_ACT));
    }
    if (input[_ECn] != null) {
      bn.c(se_EncryptionConfiguration(input[_ECn], context).n(_ECn));
    }
    if (input[_RTe] != null) {
      bn.c(se_ReplicationTime(input[_RTe], context).n(_RTe));
    }
    if (input[_Me] != null) {
      bn.c(se_Metrics(input[_Me], context).n(_Me));
    }
    return bn;
  }, "se_Destination");
  var se_Encryption = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_En);
    if (input[_ETn] != null) {
      bn.c(import_xml_builder.XmlNode.of(_SSE, input[_ETn]).n(_ETn));
    }
    if (input[_KMSKI] != null) {
      bn.c(import_xml_builder.XmlNode.of(_SSEKMSKI, input[_KMSKI]).n(_KMSKI));
    }
    bn.cc(input, _KMSC);
    return bn;
  }, "se_Encryption");
  var se_EncryptionConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ECn);
    bn.cc(input, _RKKID);
    return bn;
  }, "se_EncryptionConfiguration");
  var se_ErrorDocument = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ED);
    if (input[_K] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OK, input[_K]).n(_K));
    }
    return bn;
  }, "se_ErrorDocument");
  var se_EventBridgeConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_EBC);
    return bn;
  }, "se_EventBridgeConfiguration");
  var se_EventList = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = import_xml_builder.XmlNode.of(_Ev, entry);
      return n.n(_me);
    });
  }, "se_EventList");
  var se_ExistingObjectReplication = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_EOR);
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_EORS, input[_S]).n(_S));
    }
    return bn;
  }, "se_ExistingObjectReplication");
  var se_ExposeHeaders = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = import_xml_builder.XmlNode.of(_EHx, entry);
      return n.n(_me);
    });
  }, "se_ExposeHeaders");
  var se_FilterRule = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_FR);
    if (input[_N] != null) {
      bn.c(import_xml_builder.XmlNode.of(_FRN, input[_N]).n(_N));
    }
    if (input[_Va] != null) {
      bn.c(import_xml_builder.XmlNode.of(_FRV, input[_Va]).n(_Va));
    }
    return bn;
  }, "se_FilterRule");
  var se_FilterRuleList = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_FilterRule(entry, context);
      return n.n(_me);
    });
  }, "se_FilterRuleList");
  var se_GlacierJobParameters = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_GJP);
    bn.cc(input, _Ti);
    return bn;
  }, "se_GlacierJobParameters");
  var se_Grant = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_G);
    if (input[_Gra] != null) {
      const n = se_Grantee(input[_Gra], context).n(_Gra);
      n.a("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
      bn.c(n);
    }
    bn.cc(input, _Pe);
    return bn;
  }, "se_Grant");
  var se_Grantee = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_Gra);
    bn.cc(input, _DN);
    bn.cc(input, _EA);
    bn.cc(input, _ID_);
    bn.cc(input, _URI);
    bn.a("xsi:type", input[_Ty]);
    return bn;
  }, "se_Grantee");
  var se_Grants = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_Grant(entry, context);
      return n.n(_G);
    });
  }, "se_Grants");
  var se_IndexDocument = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ID);
    bn.cc(input, _Su);
    return bn;
  }, "se_IndexDocument");
  var se_InputSerialization = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_IS);
    if (input[_CSV] != null) {
      bn.c(se_CSVInput(input[_CSV], context).n(_CSV));
    }
    bn.cc(input, _CTom);
    if (input[_JSON] != null) {
      bn.c(se_JSONInput(input[_JSON], context).n(_JSON));
    }
    if (input[_Parq] != null) {
      bn.c(se_ParquetInput(input[_Parq], context).n(_Parq));
    }
    return bn;
  }, "se_InputSerialization");
  var se_IntelligentTieringAndOperator = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ITAO);
    bn.cc(input, _P);
    bn.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
    return bn;
  }, "se_IntelligentTieringAndOperator");
  var se_IntelligentTieringConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ITC);
    if (input[_I] != null) {
      bn.c(import_xml_builder.XmlNode.of(_ITI, input[_I]).n(_I));
    }
    if (input[_F] != null) {
      bn.c(se_IntelligentTieringFilter(input[_F], context).n(_F));
    }
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_ITS, input[_S]).n(_S));
    }
    bn.l(input, "Tierings", "Tiering", () => se_TieringList(input[_Tie], context));
    return bn;
  }, "se_IntelligentTieringConfiguration");
  var se_IntelligentTieringFilter = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ITF);
    bn.cc(input, _P);
    if (input[_Ta] != null) {
      bn.c(se_Tag(input[_Ta], context).n(_Ta));
    }
    if (input[_A] != null) {
      bn.c(se_IntelligentTieringAndOperator(input[_A], context).n(_A));
    }
    return bn;
  }, "se_IntelligentTieringFilter");
  var se_InventoryConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_IC);
    if (input[_Des] != null) {
      bn.c(se_InventoryDestination(input[_Des], context).n(_Des));
    }
    if (input[_IE] != null) {
      bn.c(import_xml_builder.XmlNode.of(_IE, String(input[_IE])).n(_IE));
    }
    if (input[_F] != null) {
      bn.c(se_InventoryFilter(input[_F], context).n(_F));
    }
    if (input[_I] != null) {
      bn.c(import_xml_builder.XmlNode.of(_II, input[_I]).n(_I));
    }
    if (input[_IOV] != null) {
      bn.c(import_xml_builder.XmlNode.of(_IIOV, input[_IOV]).n(_IOV));
    }
    bn.lc(input, "OptionalFields", "OptionalFields", () => se_InventoryOptionalFields(input[_OF], context));
    if (input[_Sc] != null) {
      bn.c(se_InventorySchedule(input[_Sc], context).n(_Sc));
    }
    return bn;
  }, "se_InventoryConfiguration");
  var se_InventoryDestination = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_IDn);
    if (input[_SBD] != null) {
      bn.c(se_InventoryS3BucketDestination(input[_SBD], context).n(_SBD));
    }
    return bn;
  }, "se_InventoryDestination");
  var se_InventoryEncryption = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_IEn);
    if (input[_SSES] != null) {
      bn.c(se_SSES3(input[_SSES], context).n(_SS));
    }
    if (input[_SSEKMS] != null) {
      bn.c(se_SSEKMS(input[_SSEKMS], context).n(_SK));
    }
    return bn;
  }, "se_InventoryEncryption");
  var se_InventoryFilter = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_IF);
    bn.cc(input, _P);
    return bn;
  }, "se_InventoryFilter");
  var se_InventoryOptionalFields = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = import_xml_builder.XmlNode.of(_IOF, entry);
      return n.n(_Fi);
    });
  }, "se_InventoryOptionalFields");
  var se_InventoryS3BucketDestination = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ISBD);
    bn.cc(input, _AIc);
    if (input[_B] != null) {
      bn.c(import_xml_builder.XmlNode.of(_BN, input[_B]).n(_B));
    }
    if (input[_Fo] != null) {
      bn.c(import_xml_builder.XmlNode.of(_IFn, input[_Fo]).n(_Fo));
    }
    bn.cc(input, _P);
    if (input[_En] != null) {
      bn.c(se_InventoryEncryption(input[_En], context).n(_En));
    }
    return bn;
  }, "se_InventoryS3BucketDestination");
  var se_InventorySchedule = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ISn);
    if (input[_Fr] != null) {
      bn.c(import_xml_builder.XmlNode.of(_IFnv, input[_Fr]).n(_Fr));
    }
    return bn;
  }, "se_InventorySchedule");
  var se_JSONInput = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_JSONI);
    if (input[_Ty] != null) {
      bn.c(import_xml_builder.XmlNode.of(_JSONT, input[_Ty]).n(_Ty));
    }
    return bn;
  }, "se_JSONInput");
  var se_JSONOutput = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_JSONO);
    bn.cc(input, _RD);
    return bn;
  }, "se_JSONOutput");
  var se_LambdaFunctionConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_LFCa);
    if (input[_I] != null) {
      bn.c(import_xml_builder.XmlNode.of(_NI, input[_I]).n(_I));
    }
    if (input[_LFA] != null) {
      bn.c(import_xml_builder.XmlNode.of(_LFA, input[_LFA]).n(_CF));
    }
    bn.l(input, "Events", "Event", () => se_EventList(input[_Eve], context));
    if (input[_F] != null) {
      bn.c(se_NotificationConfigurationFilter(input[_F], context).n(_F));
    }
    return bn;
  }, "se_LambdaFunctionConfiguration");
  var se_LambdaFunctionConfigurationList = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_LambdaFunctionConfiguration(entry, context);
      return n.n(_me);
    });
  }, "se_LambdaFunctionConfigurationList");
  var se_LifecycleExpiration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_LEi);
    if (input[_Dat] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Dat, (input[_Dat].toISOString().split(".")[0] + "Z").toString()).n(_Dat));
    }
    if (input[_Da] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Da, String(input[_Da])).n(_Da));
    }
    if (input[_EODM] != null) {
      bn.c(import_xml_builder.XmlNode.of(_EODM, String(input[_EODM])).n(_EODM));
    }
    return bn;
  }, "se_LifecycleExpiration");
  var se_LifecycleRule = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_LR);
    if (input[_Exp] != null) {
      bn.c(se_LifecycleExpiration(input[_Exp], context).n(_Exp));
    }
    bn.cc(input, _ID_);
    bn.cc(input, _P);
    if (input[_F] != null) {
      bn.c(se_LifecycleRuleFilter(input[_F], context).n(_F));
    }
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_ESx, input[_S]).n(_S));
    }
    bn.l(input, "Transitions", "Transition", () => se_TransitionList(input[_Tr], context));
    bn.l(input, "NoncurrentVersionTransitions", "NoncurrentVersionTransition", () => se_NoncurrentVersionTransitionList(input[_NVT], context));
    if (input[_NVE] != null) {
      bn.c(se_NoncurrentVersionExpiration(input[_NVE], context).n(_NVE));
    }
    if (input[_AIMU] != null) {
      bn.c(se_AbortIncompleteMultipartUpload(input[_AIMU], context).n(_AIMU));
    }
    return bn;
  }, "se_LifecycleRule");
  var se_LifecycleRuleAndOperator = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_LRAO);
    bn.cc(input, _P);
    bn.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
    if (input[_OSGT] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OSGTB, String(input[_OSGT])).n(_OSGT));
    }
    if (input[_OSLT] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OSLTB, String(input[_OSLT])).n(_OSLT));
    }
    return bn;
  }, "se_LifecycleRuleAndOperator");
  var se_LifecycleRuleFilter = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_LRF);
    LifecycleRuleFilter.visit(input, {
      Prefix: (value) => {
        if (input[_P] != null) {
          bn.c(import_xml_builder.XmlNode.of(_P, value).n(_P));
        }
      },
      Tag: (value) => {
        if (input[_Ta] != null) {
          bn.c(se_Tag(value, context).n(_Ta));
        }
      },
      ObjectSizeGreaterThan: (value) => {
        if (input[_OSGT] != null) {
          bn.c(import_xml_builder.XmlNode.of(_OSGTB, String(value)).n(_OSGT));
        }
      },
      ObjectSizeLessThan: (value) => {
        if (input[_OSLT] != null) {
          bn.c(import_xml_builder.XmlNode.of(_OSLTB, String(value)).n(_OSLT));
        }
      },
      And: (value) => {
        if (input[_A] != null) {
          bn.c(se_LifecycleRuleAndOperator(value, context).n(_A));
        }
      },
      _: (name, value) => {
        if (!(value instanceof import_xml_builder.XmlNode || value instanceof import_xml_builder.XmlText)) {
          throw new Error("Unable to serialize unknown union members in XML.");
        }
        bn.c(new import_xml_builder.XmlNode(name).c(value));
      }
    });
    return bn;
  }, "se_LifecycleRuleFilter");
  var se_LifecycleRules = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_LifecycleRule(entry, context);
      return n.n(_me);
    });
  }, "se_LifecycleRules");
  var se_LocationInfo = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_LI);
    if (input[_Ty] != null) {
      bn.c(import_xml_builder.XmlNode.of(_LT, input[_Ty]).n(_Ty));
    }
    if (input[_N] != null) {
      bn.c(import_xml_builder.XmlNode.of(_LNAS, input[_N]).n(_N));
    }
    return bn;
  }, "se_LocationInfo");
  var se_LoggingEnabled = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_LE);
    bn.cc(input, _TB);
    bn.lc(input, "TargetGrants", "TargetGrants", () => se_TargetGrants(input[_TG], context));
    bn.cc(input, _TP);
    if (input[_TOKF] != null) {
      bn.c(se_TargetObjectKeyFormat(input[_TOKF], context).n(_TOKF));
    }
    return bn;
  }, "se_LoggingEnabled");
  var se_MetadataEntry = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_ME);
    if (input[_N] != null) {
      bn.c(import_xml_builder.XmlNode.of(_MKe, input[_N]).n(_N));
    }
    if (input[_Va] != null) {
      bn.c(import_xml_builder.XmlNode.of(_MV, input[_Va]).n(_Va));
    }
    return bn;
  }, "se_MetadataEntry");
  var se_Metrics = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_Me);
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_MS, input[_S]).n(_S));
    }
    if (input[_ETv] != null) {
      bn.c(se_ReplicationTimeValue(input[_ETv], context).n(_ETv));
    }
    return bn;
  }, "se_Metrics");
  var se_MetricsAndOperator = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_MAO);
    bn.cc(input, _P);
    bn.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
    bn.cc(input, _APAc);
    return bn;
  }, "se_MetricsAndOperator");
  var se_MetricsConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_MC);
    if (input[_I] != null) {
      bn.c(import_xml_builder.XmlNode.of(_MI, input[_I]).n(_I));
    }
    if (input[_F] != null) {
      bn.c(se_MetricsFilter(input[_F], context).n(_F));
    }
    return bn;
  }, "se_MetricsConfiguration");
  var se_MetricsFilter = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_MF);
    MetricsFilter.visit(input, {
      Prefix: (value) => {
        if (input[_P] != null) {
          bn.c(import_xml_builder.XmlNode.of(_P, value).n(_P));
        }
      },
      Tag: (value) => {
        if (input[_Ta] != null) {
          bn.c(se_Tag(value, context).n(_Ta));
        }
      },
      AccessPointArn: (value) => {
        if (input[_APAc] != null) {
          bn.c(import_xml_builder.XmlNode.of(_APAc, value).n(_APAc));
        }
      },
      And: (value) => {
        if (input[_A] != null) {
          bn.c(se_MetricsAndOperator(value, context).n(_A));
        }
      },
      _: (name, value) => {
        if (!(value instanceof import_xml_builder.XmlNode || value instanceof import_xml_builder.XmlText)) {
          throw new Error("Unable to serialize unknown union members in XML.");
        }
        bn.c(new import_xml_builder.XmlNode(name).c(value));
      }
    });
    return bn;
  }, "se_MetricsFilter");
  var se_NoncurrentVersionExpiration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_NVE);
    if (input[_ND] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Da, String(input[_ND])).n(_ND));
    }
    if (input[_NNV] != null) {
      bn.c(import_xml_builder.XmlNode.of(_VC, String(input[_NNV])).n(_NNV));
    }
    return bn;
  }, "se_NoncurrentVersionExpiration");
  var se_NoncurrentVersionTransition = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_NVTo);
    if (input[_ND] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Da, String(input[_ND])).n(_ND));
    }
    if (input[_SC] != null) {
      bn.c(import_xml_builder.XmlNode.of(_TSC, input[_SC]).n(_SC));
    }
    if (input[_NNV] != null) {
      bn.c(import_xml_builder.XmlNode.of(_VC, String(input[_NNV])).n(_NNV));
    }
    return bn;
  }, "se_NoncurrentVersionTransition");
  var se_NoncurrentVersionTransitionList = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_NoncurrentVersionTransition(entry, context);
      return n.n(_me);
    });
  }, "se_NoncurrentVersionTransitionList");
  var se_NotificationConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_NC);
    bn.l(input, "TopicConfigurations", "TopicConfiguration", () => se_TopicConfigurationList(input[_TCop], context));
    bn.l(input, "QueueConfigurations", "QueueConfiguration", () => se_QueueConfigurationList(input[_QCu], context));
    bn.l(input, "LambdaFunctionConfigurations", "CloudFunctionConfiguration", () => se_LambdaFunctionConfigurationList(input[_LFC], context));
    if (input[_EBC] != null) {
      bn.c(se_EventBridgeConfiguration(input[_EBC], context).n(_EBC));
    }
    return bn;
  }, "se_NotificationConfiguration");
  var se_NotificationConfigurationFilter = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_NCF);
    if (input[_K] != null) {
      bn.c(se_S3KeyFilter(input[_K], context).n(_SKe));
    }
    return bn;
  }, "se_NotificationConfigurationFilter");
  var se_ObjectIdentifier = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_OI);
    if (input[_K] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OK, input[_K]).n(_K));
    }
    if (input[_VI] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OVI, input[_VI]).n(_VI));
    }
    return bn;
  }, "se_ObjectIdentifier");
  var se_ObjectIdentifierList = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_ObjectIdentifier(entry, context);
      return n.n(_me);
    });
  }, "se_ObjectIdentifierList");
  var se_ObjectLockConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_OLC);
    bn.cc(input, _OLE);
    if (input[_Ru] != null) {
      bn.c(se_ObjectLockRule(input[_Ru], context).n(_Ru));
    }
    return bn;
  }, "se_ObjectLockConfiguration");
  var se_ObjectLockLegalHold = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_OLLH);
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OLLHS, input[_S]).n(_S));
    }
    return bn;
  }, "se_ObjectLockLegalHold");
  var se_ObjectLockRetention = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_OLR);
    if (input[_Mo] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OLRM, input[_Mo]).n(_Mo));
    }
    if (input[_RUD] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Dat, (input[_RUD].toISOString().split(".")[0] + "Z").toString()).n(_RUD));
    }
    return bn;
  }, "se_ObjectLockRetention");
  var se_ObjectLockRule = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_OLRb);
    if (input[_DRe] != null) {
      bn.c(se_DefaultRetention(input[_DRe], context).n(_DRe));
    }
    return bn;
  }, "se_ObjectLockRule");
  var se_OutputLocation = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_OL);
    if (input[_S_] != null) {
      bn.c(se_S3Location(input[_S_], context).n(_S_));
    }
    return bn;
  }, "se_OutputLocation");
  var se_OutputSerialization = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_OS);
    if (input[_CSV] != null) {
      bn.c(se_CSVOutput(input[_CSV], context).n(_CSV));
    }
    if (input[_JSON] != null) {
      bn.c(se_JSONOutput(input[_JSON], context).n(_JSON));
    }
    return bn;
  }, "se_OutputSerialization");
  var se_Owner = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_O);
    bn.cc(input, _DN);
    bn.cc(input, _ID_);
    return bn;
  }, "se_Owner");
  var se_OwnershipControls = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_OC);
    bn.l(input, "Rules", "Rule", () => se_OwnershipControlsRules(input[_Rul], context));
    return bn;
  }, "se_OwnershipControls");
  var se_OwnershipControlsRule = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_OCR);
    bn.cc(input, _OO);
    return bn;
  }, "se_OwnershipControlsRule");
  var se_OwnershipControlsRules = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_OwnershipControlsRule(entry, context);
      return n.n(_me);
    });
  }, "se_OwnershipControlsRules");
  var se_ParquetInput = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_PI);
    return bn;
  }, "se_ParquetInput");
  var se_PartitionedPrefix = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_PP);
    bn.cc(input, _PDS);
    return bn;
  }, "se_PartitionedPrefix");
  var se_PublicAccessBlockConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_PABC);
    if (input[_BPA] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Se, String(input[_BPA])).n(_BPA));
    }
    if (input[_IPA] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Se, String(input[_IPA])).n(_IPA));
    }
    if (input[_BPP] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Se, String(input[_BPP])).n(_BPP));
    }
    if (input[_RPB] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Se, String(input[_RPB])).n(_RPB));
    }
    return bn;
  }, "se_PublicAccessBlockConfiguration");
  var se_QueueConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_QC);
    if (input[_I] != null) {
      bn.c(import_xml_builder.XmlNode.of(_NI, input[_I]).n(_I));
    }
    if (input[_QA] != null) {
      bn.c(import_xml_builder.XmlNode.of(_QA, input[_QA]).n(_Qu));
    }
    bn.l(input, "Events", "Event", () => se_EventList(input[_Eve], context));
    if (input[_F] != null) {
      bn.c(se_NotificationConfigurationFilter(input[_F], context).n(_F));
    }
    return bn;
  }, "se_QueueConfiguration");
  var se_QueueConfigurationList = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_QueueConfiguration(entry, context);
      return n.n(_me);
    });
  }, "se_QueueConfigurationList");
  var se_Redirect = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_Red);
    bn.cc(input, _HN);
    bn.cc(input, _HRC);
    bn.cc(input, _Pr);
    bn.cc(input, _RKPW);
    bn.cc(input, _RKW);
    return bn;
  }, "se_Redirect");
  var se_RedirectAllRequestsTo = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RART);
    bn.cc(input, _HN);
    bn.cc(input, _Pr);
    return bn;
  }, "se_RedirectAllRequestsTo");
  var se_ReplicaModifications = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RM);
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_RMS, input[_S]).n(_S));
    }
    return bn;
  }, "se_ReplicaModifications");
  var se_ReplicationConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RCe);
    bn.cc(input, _Ro);
    bn.l(input, "Rules", "Rule", () => se_ReplicationRules(input[_Rul], context));
    return bn;
  }, "se_ReplicationConfiguration");
  var se_ReplicationRule = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RRe);
    bn.cc(input, _ID_);
    if (input[_Pri] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Pri, String(input[_Pri])).n(_Pri));
    }
    bn.cc(input, _P);
    if (input[_F] != null) {
      bn.c(se_ReplicationRuleFilter(input[_F], context).n(_F));
    }
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_RRS, input[_S]).n(_S));
    }
    if (input[_SSC] != null) {
      bn.c(se_SourceSelectionCriteria(input[_SSC], context).n(_SSC));
    }
    if (input[_EOR] != null) {
      bn.c(se_ExistingObjectReplication(input[_EOR], context).n(_EOR));
    }
    if (input[_Des] != null) {
      bn.c(se_Destination(input[_Des], context).n(_Des));
    }
    if (input[_DMR] != null) {
      bn.c(se_DeleteMarkerReplication(input[_DMR], context).n(_DMR));
    }
    return bn;
  }, "se_ReplicationRule");
  var se_ReplicationRuleAndOperator = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RRAO);
    bn.cc(input, _P);
    bn.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
    return bn;
  }, "se_ReplicationRuleAndOperator");
  var se_ReplicationRuleFilter = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RRF);
    ReplicationRuleFilter.visit(input, {
      Prefix: (value) => {
        if (input[_P] != null) {
          bn.c(import_xml_builder.XmlNode.of(_P, value).n(_P));
        }
      },
      Tag: (value) => {
        if (input[_Ta] != null) {
          bn.c(se_Tag(value, context).n(_Ta));
        }
      },
      And: (value) => {
        if (input[_A] != null) {
          bn.c(se_ReplicationRuleAndOperator(value, context).n(_A));
        }
      },
      _: (name, value) => {
        if (!(value instanceof import_xml_builder.XmlNode || value instanceof import_xml_builder.XmlText)) {
          throw new Error("Unable to serialize unknown union members in XML.");
        }
        bn.c(new import_xml_builder.XmlNode(name).c(value));
      }
    });
    return bn;
  }, "se_ReplicationRuleFilter");
  var se_ReplicationRules = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_ReplicationRule(entry, context);
      return n.n(_me);
    });
  }, "se_ReplicationRules");
  var se_ReplicationTime = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RTe);
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_RTS, input[_S]).n(_S));
    }
    if (input[_Tim] != null) {
      bn.c(se_ReplicationTimeValue(input[_Tim], context).n(_Tim));
    }
    return bn;
  }, "se_ReplicationTime");
  var se_ReplicationTimeValue = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RTV);
    if (input[_Mi] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Mi, String(input[_Mi])).n(_Mi));
    }
    return bn;
  }, "se_ReplicationTimeValue");
  var se_RequestPaymentConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RPC);
    bn.cc(input, _Pa);
    return bn;
  }, "se_RequestPaymentConfiguration");
  var se_RequestProgress = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RPe);
    if (input[_Ena] != null) {
      bn.c(import_xml_builder.XmlNode.of(_ERP, String(input[_Ena])).n(_Ena));
    }
    return bn;
  }, "se_RequestProgress");
  var se_RestoreRequest = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RRes);
    if (input[_Da] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Da, String(input[_Da])).n(_Da));
    }
    if (input[_GJP] != null) {
      bn.c(se_GlacierJobParameters(input[_GJP], context).n(_GJP));
    }
    if (input[_Ty] != null) {
      bn.c(import_xml_builder.XmlNode.of(_RRT, input[_Ty]).n(_Ty));
    }
    bn.cc(input, _Ti);
    bn.cc(input, _Desc);
    if (input[_SP] != null) {
      bn.c(se_SelectParameters(input[_SP], context).n(_SP));
    }
    if (input[_OL] != null) {
      bn.c(se_OutputLocation(input[_OL], context).n(_OL));
    }
    return bn;
  }, "se_RestoreRequest");
  var se_RoutingRule = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_RRou);
    if (input[_Con] != null) {
      bn.c(se_Condition(input[_Con], context).n(_Con));
    }
    if (input[_Red] != null) {
      bn.c(se_Redirect(input[_Red], context).n(_Red));
    }
    return bn;
  }, "se_RoutingRule");
  var se_RoutingRules = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_RoutingRule(entry, context);
      return n.n(_RRou);
    });
  }, "se_RoutingRules");
  var se_S3KeyFilter = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SKF);
    bn.l(input, "FilterRules", "FilterRule", () => se_FilterRuleList(input[_FRi], context));
    return bn;
  }, "se_S3KeyFilter");
  var se_S3Location = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SL);
    bn.cc(input, _BN);
    if (input[_P] != null) {
      bn.c(import_xml_builder.XmlNode.of(_LP, input[_P]).n(_P));
    }
    if (input[_En] != null) {
      bn.c(se_Encryption(input[_En], context).n(_En));
    }
    if (input[_CACL] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OCACL, input[_CACL]).n(_CACL));
    }
    bn.lc(input, "AccessControlList", "AccessControlList", () => se_Grants(input[_ACLc], context));
    if (input[_T] != null) {
      bn.c(se_Tagging(input[_T], context).n(_T));
    }
    bn.lc(input, "UserMetadata", "UserMetadata", () => se_UserMetadata(input[_UM], context));
    bn.cc(input, _SC);
    return bn;
  }, "se_S3Location");
  var se_ScanRange = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SR);
    if (input[_St] != null) {
      bn.c(import_xml_builder.XmlNode.of(_St, String(input[_St])).n(_St));
    }
    if (input[_End] != null) {
      bn.c(import_xml_builder.XmlNode.of(_End, String(input[_End])).n(_End));
    }
    return bn;
  }, "se_ScanRange");
  var se_SelectParameters = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SP);
    if (input[_IS] != null) {
      bn.c(se_InputSerialization(input[_IS], context).n(_IS));
    }
    bn.cc(input, _ETx);
    bn.cc(input, _Ex);
    if (input[_OS] != null) {
      bn.c(se_OutputSerialization(input[_OS], context).n(_OS));
    }
    return bn;
  }, "se_SelectParameters");
  var se_ServerSideEncryptionByDefault = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SSEBD);
    if (input[_SSEA] != null) {
      bn.c(import_xml_builder.XmlNode.of(_SSE, input[_SSEA]).n(_SSEA));
    }
    if (input[_KMSMKID] != null) {
      bn.c(import_xml_builder.XmlNode.of(_SSEKMSKI, input[_KMSMKID]).n(_KMSMKID));
    }
    return bn;
  }, "se_ServerSideEncryptionByDefault");
  var se_ServerSideEncryptionConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SSEC);
    bn.l(input, "Rules", "Rule", () => se_ServerSideEncryptionRules(input[_Rul], context));
    return bn;
  }, "se_ServerSideEncryptionConfiguration");
  var se_ServerSideEncryptionRule = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SSER);
    if (input[_ASSEBD] != null) {
      bn.c(se_ServerSideEncryptionByDefault(input[_ASSEBD], context).n(_ASSEBD));
    }
    if (input[_BKE] != null) {
      bn.c(import_xml_builder.XmlNode.of(_BKE, String(input[_BKE])).n(_BKE));
    }
    return bn;
  }, "se_ServerSideEncryptionRule");
  var se_ServerSideEncryptionRules = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_ServerSideEncryptionRule(entry, context);
      return n.n(_me);
    });
  }, "se_ServerSideEncryptionRules");
  var se_SimplePrefix = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SPi);
    return bn;
  }, "se_SimplePrefix");
  var se_SourceSelectionCriteria = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SSC);
    if (input[_SKEO] != null) {
      bn.c(se_SseKmsEncryptedObjects(input[_SKEO], context).n(_SKEO));
    }
    if (input[_RM] != null) {
      bn.c(se_ReplicaModifications(input[_RM], context).n(_RM));
    }
    return bn;
  }, "se_SourceSelectionCriteria");
  var se_SSEKMS = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SK);
    if (input[_KI] != null) {
      bn.c(import_xml_builder.XmlNode.of(_SSEKMSKI, input[_KI]).n(_KI));
    }
    return bn;
  }, "se_SSEKMS");
  var se_SseKmsEncryptedObjects = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SKEO);
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_SKEOS, input[_S]).n(_S));
    }
    return bn;
  }, "se_SseKmsEncryptedObjects");
  var se_SSES3 = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SS);
    return bn;
  }, "se_SSES3");
  var se_StorageClassAnalysis = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SCA);
    if (input[_DE] != null) {
      bn.c(se_StorageClassAnalysisDataExport(input[_DE], context).n(_DE));
    }
    return bn;
  }, "se_StorageClassAnalysis");
  var se_StorageClassAnalysisDataExport = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_SCADE);
    if (input[_OSV] != null) {
      bn.c(import_xml_builder.XmlNode.of(_SCASV, input[_OSV]).n(_OSV));
    }
    if (input[_Des] != null) {
      bn.c(se_AnalyticsExportDestination(input[_Des], context).n(_Des));
    }
    return bn;
  }, "se_StorageClassAnalysisDataExport");
  var se_Tag = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_Ta);
    if (input[_K] != null) {
      bn.c(import_xml_builder.XmlNode.of(_OK, input[_K]).n(_K));
    }
    bn.cc(input, _Va);
    return bn;
  }, "se_Tag");
  var se_Tagging = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_T);
    bn.lc(input, "TagSet", "TagSet", () => se_TagSet(input[_TS], context));
    return bn;
  }, "se_Tagging");
  var se_TagSet = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_Tag(entry, context);
      return n.n(_Ta);
    });
  }, "se_TagSet");
  var se_TargetGrant = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_TGa);
    if (input[_Gra] != null) {
      const n = se_Grantee(input[_Gra], context).n(_Gra);
      n.a("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
      bn.c(n);
    }
    if (input[_Pe] != null) {
      bn.c(import_xml_builder.XmlNode.of(_BLP, input[_Pe]).n(_Pe));
    }
    return bn;
  }, "se_TargetGrant");
  var se_TargetGrants = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_TargetGrant(entry, context);
      return n.n(_G);
    });
  }, "se_TargetGrants");
  var se_TargetObjectKeyFormat = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_TOKF);
    if (input[_SPi] != null) {
      bn.c(se_SimplePrefix(input[_SPi], context).n(_SPi));
    }
    if (input[_PP] != null) {
      bn.c(se_PartitionedPrefix(input[_PP], context).n(_PP));
    }
    return bn;
  }, "se_TargetObjectKeyFormat");
  var se_Tiering = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_Tier);
    if (input[_Da] != null) {
      bn.c(import_xml_builder.XmlNode.of(_ITD, String(input[_Da])).n(_Da));
    }
    if (input[_AT] != null) {
      bn.c(import_xml_builder.XmlNode.of(_ITAT, input[_AT]).n(_AT));
    }
    return bn;
  }, "se_Tiering");
  var se_TieringList = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_Tiering(entry, context);
      return n.n(_me);
    });
  }, "se_TieringList");
  var se_TopicConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_TCo);
    if (input[_I] != null) {
      bn.c(import_xml_builder.XmlNode.of(_NI, input[_I]).n(_I));
    }
    if (input[_TA] != null) {
      bn.c(import_xml_builder.XmlNode.of(_TA, input[_TA]).n(_Top));
    }
    bn.l(input, "Events", "Event", () => se_EventList(input[_Eve], context));
    if (input[_F] != null) {
      bn.c(se_NotificationConfigurationFilter(input[_F], context).n(_F));
    }
    return bn;
  }, "se_TopicConfiguration");
  var se_TopicConfigurationList = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_TopicConfiguration(entry, context);
      return n.n(_me);
    });
  }, "se_TopicConfigurationList");
  var se_Transition = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_Tra);
    if (input[_Dat] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Dat, (input[_Dat].toISOString().split(".")[0] + "Z").toString()).n(_Dat));
    }
    if (input[_Da] != null) {
      bn.c(import_xml_builder.XmlNode.of(_Da, String(input[_Da])).n(_Da));
    }
    if (input[_SC] != null) {
      bn.c(import_xml_builder.XmlNode.of(_TSC, input[_SC]).n(_SC));
    }
    return bn;
  }, "se_Transition");
  var se_TransitionList = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_Transition(entry, context);
      return n.n(_me);
    });
  }, "se_TransitionList");
  var se_UserMetadata = __name((input, context) => {
    return input.filter((e) => e != null).map((entry) => {
      const n = se_MetadataEntry(entry, context);
      return n.n(_ME);
    });
  }, "se_UserMetadata");
  var se_VersioningConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_VCe);
    if (input[_MFAD] != null) {
      bn.c(import_xml_builder.XmlNode.of(_MFAD, input[_MFAD]).n(_MDf));
    }
    if (input[_S] != null) {
      bn.c(import_xml_builder.XmlNode.of(_BVS, input[_S]).n(_S));
    }
    return bn;
  }, "se_VersioningConfiguration");
  var se_WebsiteConfiguration = __name((input, context) => {
    const bn = new import_xml_builder.XmlNode(_WC);
    if (input[_ED] != null) {
      bn.c(se_ErrorDocument(input[_ED], context).n(_ED));
    }
    if (input[_ID] != null) {
      bn.c(se_IndexDocument(input[_ID], context).n(_ID));
    }
    if (input[_RART] != null) {
      bn.c(se_RedirectAllRequestsTo(input[_RART], context).n(_RART));
    }
    bn.lc(input, "RoutingRules", "RoutingRules", () => se_RoutingRules(input[_RRo], context));
    return bn;
  }, "se_WebsiteConfiguration");
  var de_AbortIncompleteMultipartUpload = __name((output, context) => {
    const contents = {};
    if (output[_DAI] != null) {
      contents[_DAI] = (0, import_smithy_client.strictParseInt32)(output[_DAI]);
    }
    return contents;
  }, "de_AbortIncompleteMultipartUpload");
  var de_AccessControlTranslation = __name((output, context) => {
    const contents = {};
    if (output[_O] != null) {
      contents[_O] = (0, import_smithy_client.expectString)(output[_O]);
    }
    return contents;
  }, "de_AccessControlTranslation");
  var de_AllowedHeaders = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_AllowedHeaders");
  var de_AllowedMethods = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_AllowedMethods");
  var de_AllowedOrigins = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_AllowedOrigins");
  var de_AnalyticsAndOperator = __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output.Tag === "") {
      contents[_Tag] = [];
    } else if (output[_Ta] != null) {
      contents[_Tag] = de_TagSet((0, import_smithy_client.getArrayIfSingleItem)(output[_Ta]), context);
    }
    return contents;
  }, "de_AnalyticsAndOperator");
  var de_AnalyticsConfiguration = __name((output, context) => {
    const contents = {};
    if (output[_I] != null) {
      contents[_I] = (0, import_smithy_client.expectString)(output[_I]);
    }
    if (output.Filter === "") {
    } else if (output[_F] != null) {
      contents[_F] = de_AnalyticsFilter((0, import_smithy_client.expectUnion)(output[_F]), context);
    }
    if (output[_SCA] != null) {
      contents[_SCA] = de_StorageClassAnalysis(output[_SCA], context);
    }
    return contents;
  }, "de_AnalyticsConfiguration");
  var de_AnalyticsConfigurationList = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_AnalyticsConfiguration(entry, context);
    });
  }, "de_AnalyticsConfigurationList");
  var de_AnalyticsExportDestination = __name((output, context) => {
    const contents = {};
    if (output[_SBD] != null) {
      contents[_SBD] = de_AnalyticsS3BucketDestination(output[_SBD], context);
    }
    return contents;
  }, "de_AnalyticsExportDestination");
  var de_AnalyticsFilter = __name((output, context) => {
    if (output[_P] != null) {
      return {
        Prefix: (0, import_smithy_client.expectString)(output[_P])
      };
    }
    if (output[_Ta] != null) {
      return {
        Tag: de_Tag(output[_Ta], context)
      };
    }
    if (output[_A] != null) {
      return {
        And: de_AnalyticsAndOperator(output[_A], context)
      };
    }
    return { $unknown: Object.entries(output)[0] };
  }, "de_AnalyticsFilter");
  var de_AnalyticsS3BucketDestination = __name((output, context) => {
    const contents = {};
    if (output[_Fo] != null) {
      contents[_Fo] = (0, import_smithy_client.expectString)(output[_Fo]);
    }
    if (output[_BAI] != null) {
      contents[_BAI] = (0, import_smithy_client.expectString)(output[_BAI]);
    }
    if (output[_B] != null) {
      contents[_B] = (0, import_smithy_client.expectString)(output[_B]);
    }
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    return contents;
  }, "de_AnalyticsS3BucketDestination");
  var de_Bucket = __name((output, context) => {
    const contents = {};
    if (output[_N] != null) {
      contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
    }
    if (output[_CDr] != null) {
      contents[_CDr] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CDr]));
    }
    return contents;
  }, "de_Bucket");
  var de_Buckets = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_Bucket(entry, context);
    });
  }, "de_Buckets");
  var de_Checksum = __name((output, context) => {
    const contents = {};
    if (output[_CCRC] != null) {
      contents[_CCRC] = (0, import_smithy_client.expectString)(output[_CCRC]);
    }
    if (output[_CCRCC] != null) {
      contents[_CCRCC] = (0, import_smithy_client.expectString)(output[_CCRCC]);
    }
    if (output[_CSHA] != null) {
      contents[_CSHA] = (0, import_smithy_client.expectString)(output[_CSHA]);
    }
    if (output[_CSHAh] != null) {
      contents[_CSHAh] = (0, import_smithy_client.expectString)(output[_CSHAh]);
    }
    return contents;
  }, "de_Checksum");
  var de_ChecksumAlgorithmList = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_ChecksumAlgorithmList");
  var de_CommonPrefix = __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    return contents;
  }, "de_CommonPrefix");
  var de_CommonPrefixList = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_CommonPrefix(entry, context);
    });
  }, "de_CommonPrefixList");
  var de_Condition = __name((output, context) => {
    const contents = {};
    if (output[_HECRE] != null) {
      contents[_HECRE] = (0, import_smithy_client.expectString)(output[_HECRE]);
    }
    if (output[_KPE] != null) {
      contents[_KPE] = (0, import_smithy_client.expectString)(output[_KPE]);
    }
    return contents;
  }, "de_Condition");
  var de_ContinuationEvent = __name((output, context) => {
    const contents = {};
    return contents;
  }, "de_ContinuationEvent");
  var de_CopyObjectResult = __name((output, context) => {
    const contents = {};
    if (output[_ETa] != null) {
      contents[_ETa] = (0, import_smithy_client.expectString)(output[_ETa]);
    }
    if (output[_LM] != null) {
      contents[_LM] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LM]));
    }
    if (output[_CCRC] != null) {
      contents[_CCRC] = (0, import_smithy_client.expectString)(output[_CCRC]);
    }
    if (output[_CCRCC] != null) {
      contents[_CCRCC] = (0, import_smithy_client.expectString)(output[_CCRCC]);
    }
    if (output[_CSHA] != null) {
      contents[_CSHA] = (0, import_smithy_client.expectString)(output[_CSHA]);
    }
    if (output[_CSHAh] != null) {
      contents[_CSHAh] = (0, import_smithy_client.expectString)(output[_CSHAh]);
    }
    return contents;
  }, "de_CopyObjectResult");
  var de_CopyPartResult = __name((output, context) => {
    const contents = {};
    if (output[_ETa] != null) {
      contents[_ETa] = (0, import_smithy_client.expectString)(output[_ETa]);
    }
    if (output[_LM] != null) {
      contents[_LM] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LM]));
    }
    if (output[_CCRC] != null) {
      contents[_CCRC] = (0, import_smithy_client.expectString)(output[_CCRC]);
    }
    if (output[_CCRCC] != null) {
      contents[_CCRCC] = (0, import_smithy_client.expectString)(output[_CCRCC]);
    }
    if (output[_CSHA] != null) {
      contents[_CSHA] = (0, import_smithy_client.expectString)(output[_CSHA]);
    }
    if (output[_CSHAh] != null) {
      contents[_CSHAh] = (0, import_smithy_client.expectString)(output[_CSHAh]);
    }
    return contents;
  }, "de_CopyPartResult");
  var de_CORSRule = __name((output, context) => {
    const contents = {};
    if (output[_ID_] != null) {
      contents[_ID_] = (0, import_smithy_client.expectString)(output[_ID_]);
    }
    if (output.AllowedHeader === "") {
      contents[_AHl] = [];
    } else if (output[_AH] != null) {
      contents[_AHl] = de_AllowedHeaders((0, import_smithy_client.getArrayIfSingleItem)(output[_AH]), context);
    }
    if (output.AllowedMethod === "") {
      contents[_AMl] = [];
    } else if (output[_AM] != null) {
      contents[_AMl] = de_AllowedMethods((0, import_smithy_client.getArrayIfSingleItem)(output[_AM]), context);
    }
    if (output.AllowedOrigin === "") {
      contents[_AOl] = [];
    } else if (output[_AO] != null) {
      contents[_AOl] = de_AllowedOrigins((0, import_smithy_client.getArrayIfSingleItem)(output[_AO]), context);
    }
    if (output.ExposeHeader === "") {
      contents[_EH] = [];
    } else if (output[_EHx] != null) {
      contents[_EH] = de_ExposeHeaders((0, import_smithy_client.getArrayIfSingleItem)(output[_EHx]), context);
    }
    if (output[_MAS] != null) {
      contents[_MAS] = (0, import_smithy_client.strictParseInt32)(output[_MAS]);
    }
    return contents;
  }, "de_CORSRule");
  var de_CORSRules = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_CORSRule(entry, context);
    });
  }, "de_CORSRules");
  var de_DefaultRetention = __name((output, context) => {
    const contents = {};
    if (output[_Mo] != null) {
      contents[_Mo] = (0, import_smithy_client.expectString)(output[_Mo]);
    }
    if (output[_Da] != null) {
      contents[_Da] = (0, import_smithy_client.strictParseInt32)(output[_Da]);
    }
    if (output[_Y] != null) {
      contents[_Y] = (0, import_smithy_client.strictParseInt32)(output[_Y]);
    }
    return contents;
  }, "de_DefaultRetention");
  var de_DeletedObject = __name((output, context) => {
    const contents = {};
    if (output[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
    }
    if (output[_VI] != null) {
      contents[_VI] = (0, import_smithy_client.expectString)(output[_VI]);
    }
    if (output[_DM] != null) {
      contents[_DM] = (0, import_smithy_client.parseBoolean)(output[_DM]);
    }
    if (output[_DMVI] != null) {
      contents[_DMVI] = (0, import_smithy_client.expectString)(output[_DMVI]);
    }
    return contents;
  }, "de_DeletedObject");
  var de_DeletedObjects = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_DeletedObject(entry, context);
    });
  }, "de_DeletedObjects");
  var de_DeleteMarkerEntry = __name((output, context) => {
    const contents = {};
    if (output[_O] != null) {
      contents[_O] = de_Owner(output[_O], context);
    }
    if (output[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
    }
    if (output[_VI] != null) {
      contents[_VI] = (0, import_smithy_client.expectString)(output[_VI]);
    }
    if (output[_IL] != null) {
      contents[_IL] = (0, import_smithy_client.parseBoolean)(output[_IL]);
    }
    if (output[_LM] != null) {
      contents[_LM] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LM]));
    }
    return contents;
  }, "de_DeleteMarkerEntry");
  var de_DeleteMarkerReplication = __name((output, context) => {
    const contents = {};
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    return contents;
  }, "de_DeleteMarkerReplication");
  var de_DeleteMarkers = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_DeleteMarkerEntry(entry, context);
    });
  }, "de_DeleteMarkers");
  var de_Destination = __name((output, context) => {
    const contents = {};
    if (output[_B] != null) {
      contents[_B] = (0, import_smithy_client.expectString)(output[_B]);
    }
    if (output[_Ac] != null) {
      contents[_Ac] = (0, import_smithy_client.expectString)(output[_Ac]);
    }
    if (output[_SC] != null) {
      contents[_SC] = (0, import_smithy_client.expectString)(output[_SC]);
    }
    if (output[_ACT] != null) {
      contents[_ACT] = de_AccessControlTranslation(output[_ACT], context);
    }
    if (output[_ECn] != null) {
      contents[_ECn] = de_EncryptionConfiguration(output[_ECn], context);
    }
    if (output[_RTe] != null) {
      contents[_RTe] = de_ReplicationTime(output[_RTe], context);
    }
    if (output[_Me] != null) {
      contents[_Me] = de_Metrics(output[_Me], context);
    }
    return contents;
  }, "de_Destination");
  var de_EncryptionConfiguration = __name((output, context) => {
    const contents = {};
    if (output[_RKKID] != null) {
      contents[_RKKID] = (0, import_smithy_client.expectString)(output[_RKKID]);
    }
    return contents;
  }, "de_EncryptionConfiguration");
  var de_EndEvent = __name((output, context) => {
    const contents = {};
    return contents;
  }, "de_EndEvent");
  var de__Error = __name((output, context) => {
    const contents = {};
    if (output[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
    }
    if (output[_VI] != null) {
      contents[_VI] = (0, import_smithy_client.expectString)(output[_VI]);
    }
    if (output[_Cod] != null) {
      contents[_Cod] = (0, import_smithy_client.expectString)(output[_Cod]);
    }
    if (output[_Mes] != null) {
      contents[_Mes] = (0, import_smithy_client.expectString)(output[_Mes]);
    }
    return contents;
  }, "de__Error");
  var de_ErrorDocument = __name((output, context) => {
    const contents = {};
    if (output[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
    }
    return contents;
  }, "de_ErrorDocument");
  var de_Errors = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de__Error(entry, context);
    });
  }, "de_Errors");
  var de_EventBridgeConfiguration = __name((output, context) => {
    const contents = {};
    return contents;
  }, "de_EventBridgeConfiguration");
  var de_EventList = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_EventList");
  var de_ExistingObjectReplication = __name((output, context) => {
    const contents = {};
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    return contents;
  }, "de_ExistingObjectReplication");
  var de_ExposeHeaders = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_ExposeHeaders");
  var de_FilterRule = __name((output, context) => {
    const contents = {};
    if (output[_N] != null) {
      contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
    }
    if (output[_Va] != null) {
      contents[_Va] = (0, import_smithy_client.expectString)(output[_Va]);
    }
    return contents;
  }, "de_FilterRule");
  var de_FilterRuleList = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_FilterRule(entry, context);
    });
  }, "de_FilterRuleList");
  var de_GetObjectAttributesParts = __name((output, context) => {
    const contents = {};
    if (output[_PC] != null) {
      contents[_TPC] = (0, import_smithy_client.strictParseInt32)(output[_PC]);
    }
    if (output[_PNM] != null) {
      contents[_PNM] = (0, import_smithy_client.expectString)(output[_PNM]);
    }
    if (output[_NPNM] != null) {
      contents[_NPNM] = (0, import_smithy_client.expectString)(output[_NPNM]);
    }
    if (output[_MP] != null) {
      contents[_MP] = (0, import_smithy_client.strictParseInt32)(output[_MP]);
    }
    if (output[_IT] != null) {
      contents[_IT] = (0, import_smithy_client.parseBoolean)(output[_IT]);
    }
    if (output.Part === "") {
      contents[_Part] = [];
    } else if (output[_Par] != null) {
      contents[_Part] = de_PartsList((0, import_smithy_client.getArrayIfSingleItem)(output[_Par]), context);
    }
    return contents;
  }, "de_GetObjectAttributesParts");
  var de_Grant = __name((output, context) => {
    const contents = {};
    if (output[_Gra] != null) {
      contents[_Gra] = de_Grantee(output[_Gra], context);
    }
    if (output[_Pe] != null) {
      contents[_Pe] = (0, import_smithy_client.expectString)(output[_Pe]);
    }
    return contents;
  }, "de_Grant");
  var de_Grantee = __name((output, context) => {
    const contents = {};
    if (output[_DN] != null) {
      contents[_DN] = (0, import_smithy_client.expectString)(output[_DN]);
    }
    if (output[_EA] != null) {
      contents[_EA] = (0, import_smithy_client.expectString)(output[_EA]);
    }
    if (output[_ID_] != null) {
      contents[_ID_] = (0, import_smithy_client.expectString)(output[_ID_]);
    }
    if (output[_URI] != null) {
      contents[_URI] = (0, import_smithy_client.expectString)(output[_URI]);
    }
    if (output[_x] != null) {
      contents[_Ty] = (0, import_smithy_client.expectString)(output[_x]);
    }
    return contents;
  }, "de_Grantee");
  var de_Grants = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_Grant(entry, context);
    });
  }, "de_Grants");
  var de_IndexDocument = __name((output, context) => {
    const contents = {};
    if (output[_Su] != null) {
      contents[_Su] = (0, import_smithy_client.expectString)(output[_Su]);
    }
    return contents;
  }, "de_IndexDocument");
  var de_Initiator = __name((output, context) => {
    const contents = {};
    if (output[_ID_] != null) {
      contents[_ID_] = (0, import_smithy_client.expectString)(output[_ID_]);
    }
    if (output[_DN] != null) {
      contents[_DN] = (0, import_smithy_client.expectString)(output[_DN]);
    }
    return contents;
  }, "de_Initiator");
  var de_IntelligentTieringAndOperator = __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output.Tag === "") {
      contents[_Tag] = [];
    } else if (output[_Ta] != null) {
      contents[_Tag] = de_TagSet((0, import_smithy_client.getArrayIfSingleItem)(output[_Ta]), context);
    }
    return contents;
  }, "de_IntelligentTieringAndOperator");
  var de_IntelligentTieringConfiguration = __name((output, context) => {
    const contents = {};
    if (output[_I] != null) {
      contents[_I] = (0, import_smithy_client.expectString)(output[_I]);
    }
    if (output[_F] != null) {
      contents[_F] = de_IntelligentTieringFilter(output[_F], context);
    }
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    if (output.Tiering === "") {
      contents[_Tie] = [];
    } else if (output[_Tier] != null) {
      contents[_Tie] = de_TieringList((0, import_smithy_client.getArrayIfSingleItem)(output[_Tier]), context);
    }
    return contents;
  }, "de_IntelligentTieringConfiguration");
  var de_IntelligentTieringConfigurationList = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_IntelligentTieringConfiguration(entry, context);
    });
  }, "de_IntelligentTieringConfigurationList");
  var de_IntelligentTieringFilter = __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output[_Ta] != null) {
      contents[_Ta] = de_Tag(output[_Ta], context);
    }
    if (output[_A] != null) {
      contents[_A] = de_IntelligentTieringAndOperator(output[_A], context);
    }
    return contents;
  }, "de_IntelligentTieringFilter");
  var de_InventoryConfiguration = __name((output, context) => {
    const contents = {};
    if (output[_Des] != null) {
      contents[_Des] = de_InventoryDestination(output[_Des], context);
    }
    if (output[_IE] != null) {
      contents[_IE] = (0, import_smithy_client.parseBoolean)(output[_IE]);
    }
    if (output[_F] != null) {
      contents[_F] = de_InventoryFilter(output[_F], context);
    }
    if (output[_I] != null) {
      contents[_I] = (0, import_smithy_client.expectString)(output[_I]);
    }
    if (output[_IOV] != null) {
      contents[_IOV] = (0, import_smithy_client.expectString)(output[_IOV]);
    }
    if (output.OptionalFields === "") {
      contents[_OF] = [];
    } else if (output[_OF] != null && output[_OF][_Fi] != null) {
      contents[_OF] = de_InventoryOptionalFields((0, import_smithy_client.getArrayIfSingleItem)(output[_OF][_Fi]), context);
    }
    if (output[_Sc] != null) {
      contents[_Sc] = de_InventorySchedule(output[_Sc], context);
    }
    return contents;
  }, "de_InventoryConfiguration");
  var de_InventoryConfigurationList = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_InventoryConfiguration(entry, context);
    });
  }, "de_InventoryConfigurationList");
  var de_InventoryDestination = __name((output, context) => {
    const contents = {};
    if (output[_SBD] != null) {
      contents[_SBD] = de_InventoryS3BucketDestination(output[_SBD], context);
    }
    return contents;
  }, "de_InventoryDestination");
  var de_InventoryEncryption = __name((output, context) => {
    const contents = {};
    if (output[_SS] != null) {
      contents[_SSES] = de_SSES3(output[_SS], context);
    }
    if (output[_SK] != null) {
      contents[_SSEKMS] = de_SSEKMS(output[_SK], context);
    }
    return contents;
  }, "de_InventoryEncryption");
  var de_InventoryFilter = __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    return contents;
  }, "de_InventoryFilter");
  var de_InventoryOptionalFields = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return (0, import_smithy_client.expectString)(entry);
    });
  }, "de_InventoryOptionalFields");
  var de_InventoryS3BucketDestination = __name((output, context) => {
    const contents = {};
    if (output[_AIc] != null) {
      contents[_AIc] = (0, import_smithy_client.expectString)(output[_AIc]);
    }
    if (output[_B] != null) {
      contents[_B] = (0, import_smithy_client.expectString)(output[_B]);
    }
    if (output[_Fo] != null) {
      contents[_Fo] = (0, import_smithy_client.expectString)(output[_Fo]);
    }
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output[_En] != null) {
      contents[_En] = de_InventoryEncryption(output[_En], context);
    }
    return contents;
  }, "de_InventoryS3BucketDestination");
  var de_InventorySchedule = __name((output, context) => {
    const contents = {};
    if (output[_Fr] != null) {
      contents[_Fr] = (0, import_smithy_client.expectString)(output[_Fr]);
    }
    return contents;
  }, "de_InventorySchedule");
  var de_LambdaFunctionConfiguration = __name((output, context) => {
    const contents = {};
    if (output[_I] != null) {
      contents[_I] = (0, import_smithy_client.expectString)(output[_I]);
    }
    if (output[_CF] != null) {
      contents[_LFA] = (0, import_smithy_client.expectString)(output[_CF]);
    }
    if (output.Event === "") {
      contents[_Eve] = [];
    } else if (output[_Ev] != null) {
      contents[_Eve] = de_EventList((0, import_smithy_client.getArrayIfSingleItem)(output[_Ev]), context);
    }
    if (output[_F] != null) {
      contents[_F] = de_NotificationConfigurationFilter(output[_F], context);
    }
    return contents;
  }, "de_LambdaFunctionConfiguration");
  var de_LambdaFunctionConfigurationList = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_LambdaFunctionConfiguration(entry, context);
    });
  }, "de_LambdaFunctionConfigurationList");
  var de_LifecycleExpiration = __name((output, context) => {
    const contents = {};
    if (output[_Dat] != null) {
      contents[_Dat] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_Dat]));
    }
    if (output[_Da] != null) {
      contents[_Da] = (0, import_smithy_client.strictParseInt32)(output[_Da]);
    }
    if (output[_EODM] != null) {
      contents[_EODM] = (0, import_smithy_client.parseBoolean)(output[_EODM]);
    }
    return contents;
  }, "de_LifecycleExpiration");
  var de_LifecycleRule = __name((output, context) => {
    const contents = {};
    if (output[_Exp] != null) {
      contents[_Exp] = de_LifecycleExpiration(output[_Exp], context);
    }
    if (output[_ID_] != null) {
      contents[_ID_] = (0, import_smithy_client.expectString)(output[_ID_]);
    }
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output.Filter === "") {
    } else if (output[_F] != null) {
      contents[_F] = de_LifecycleRuleFilter((0, import_smithy_client.expectUnion)(output[_F]), context);
    }
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    if (output.Transition === "") {
      contents[_Tr] = [];
    } else if (output[_Tra] != null) {
      contents[_Tr] = de_TransitionList((0, import_smithy_client.getArrayIfSingleItem)(output[_Tra]), context);
    }
    if (output.NoncurrentVersionTransition === "") {
      contents[_NVT] = [];
    } else if (output[_NVTo] != null) {
      contents[_NVT] = de_NoncurrentVersionTransitionList((0, import_smithy_client.getArrayIfSingleItem)(output[_NVTo]), context);
    }
    if (output[_NVE] != null) {
      contents[_NVE] = de_NoncurrentVersionExpiration(output[_NVE], context);
    }
    if (output[_AIMU] != null) {
      contents[_AIMU] = de_AbortIncompleteMultipartUpload(output[_AIMU], context);
    }
    return contents;
  }, "de_LifecycleRule");
  var de_LifecycleRuleAndOperator = __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output.Tag === "") {
      contents[_Tag] = [];
    } else if (output[_Ta] != null) {
      contents[_Tag] = de_TagSet((0, import_smithy_client.getArrayIfSingleItem)(output[_Ta]), context);
    }
    if (output[_OSGT] != null) {
      contents[_OSGT] = (0, import_smithy_client.strictParseLong)(output[_OSGT]);
    }
    if (output[_OSLT] != null) {
      contents[_OSLT] = (0, import_smithy_client.strictParseLong)(output[_OSLT]);
    }
    return contents;
  }, "de_LifecycleRuleAndOperator");
  var de_LifecycleRuleFilter = __name((output, context) => {
    if (output[_P] != null) {
      return {
        Prefix: (0, import_smithy_client.expectString)(output[_P])
      };
    }
    if (output[_Ta] != null) {
      return {
        Tag: de_Tag(output[_Ta], context)
      };
    }
    if (output[_OSGT] != null) {
      return {
        ObjectSizeGreaterThan: (0, import_smithy_client.strictParseLong)(output[_OSGT])
      };
    }
    if (output[_OSLT] != null) {
      return {
        ObjectSizeLessThan: (0, import_smithy_client.strictParseLong)(output[_OSLT])
      };
    }
    if (output[_A] != null) {
      return {
        And: de_LifecycleRuleAndOperator(output[_A], context)
      };
    }
    return { $unknown: Object.entries(output)[0] };
  }, "de_LifecycleRuleFilter");
  var de_LifecycleRules = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_LifecycleRule(entry, context);
    });
  }, "de_LifecycleRules");
  var de_LoggingEnabled = __name((output, context) => {
    const contents = {};
    if (output[_TB] != null) {
      contents[_TB] = (0, import_smithy_client.expectString)(output[_TB]);
    }
    if (output.TargetGrants === "") {
      contents[_TG] = [];
    } else if (output[_TG] != null && output[_TG][_G] != null) {
      contents[_TG] = de_TargetGrants((0, import_smithy_client.getArrayIfSingleItem)(output[_TG][_G]), context);
    }
    if (output[_TP] != null) {
      contents[_TP] = (0, import_smithy_client.expectString)(output[_TP]);
    }
    if (output[_TOKF] != null) {
      contents[_TOKF] = de_TargetObjectKeyFormat(output[_TOKF], context);
    }
    return contents;
  }, "de_LoggingEnabled");
  var de_Metrics = __name((output, context) => {
    const contents = {};
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    if (output[_ETv] != null) {
      contents[_ETv] = de_ReplicationTimeValue(output[_ETv], context);
    }
    return contents;
  }, "de_Metrics");
  var de_MetricsAndOperator = __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output.Tag === "") {
      contents[_Tag] = [];
    } else if (output[_Ta] != null) {
      contents[_Tag] = de_TagSet((0, import_smithy_client.getArrayIfSingleItem)(output[_Ta]), context);
    }
    if (output[_APAc] != null) {
      contents[_APAc] = (0, import_smithy_client.expectString)(output[_APAc]);
    }
    return contents;
  }, "de_MetricsAndOperator");
  var de_MetricsConfiguration = __name((output, context) => {
    const contents = {};
    if (output[_I] != null) {
      contents[_I] = (0, import_smithy_client.expectString)(output[_I]);
    }
    if (output.Filter === "") {
    } else if (output[_F] != null) {
      contents[_F] = de_MetricsFilter((0, import_smithy_client.expectUnion)(output[_F]), context);
    }
    return contents;
  }, "de_MetricsConfiguration");
  var de_MetricsConfigurationList = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_MetricsConfiguration(entry, context);
    });
  }, "de_MetricsConfigurationList");
  var de_MetricsFilter = __name((output, context) => {
    if (output[_P] != null) {
      return {
        Prefix: (0, import_smithy_client.expectString)(output[_P])
      };
    }
    if (output[_Ta] != null) {
      return {
        Tag: de_Tag(output[_Ta], context)
      };
    }
    if (output[_APAc] != null) {
      return {
        AccessPointArn: (0, import_smithy_client.expectString)(output[_APAc])
      };
    }
    if (output[_A] != null) {
      return {
        And: de_MetricsAndOperator(output[_A], context)
      };
    }
    return { $unknown: Object.entries(output)[0] };
  }, "de_MetricsFilter");
  var de_MultipartUpload = __name((output, context) => {
    const contents = {};
    if (output[_UI] != null) {
      contents[_UI] = (0, import_smithy_client.expectString)(output[_UI]);
    }
    if (output[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
    }
    if (output[_Ini] != null) {
      contents[_Ini] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_Ini]));
    }
    if (output[_SC] != null) {
      contents[_SC] = (0, import_smithy_client.expectString)(output[_SC]);
    }
    if (output[_O] != null) {
      contents[_O] = de_Owner(output[_O], context);
    }
    if (output[_In] != null) {
      contents[_In] = de_Initiator(output[_In], context);
    }
    if (output[_CA] != null) {
      contents[_CA] = (0, import_smithy_client.expectString)(output[_CA]);
    }
    return contents;
  }, "de_MultipartUpload");
  var de_MultipartUploadList = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_MultipartUpload(entry, context);
    });
  }, "de_MultipartUploadList");
  var de_NoncurrentVersionExpiration = __name((output, context) => {
    const contents = {};
    if (output[_ND] != null) {
      contents[_ND] = (0, import_smithy_client.strictParseInt32)(output[_ND]);
    }
    if (output[_NNV] != null) {
      contents[_NNV] = (0, import_smithy_client.strictParseInt32)(output[_NNV]);
    }
    return contents;
  }, "de_NoncurrentVersionExpiration");
  var de_NoncurrentVersionTransition = __name((output, context) => {
    const contents = {};
    if (output[_ND] != null) {
      contents[_ND] = (0, import_smithy_client.strictParseInt32)(output[_ND]);
    }
    if (output[_SC] != null) {
      contents[_SC] = (0, import_smithy_client.expectString)(output[_SC]);
    }
    if (output[_NNV] != null) {
      contents[_NNV] = (0, import_smithy_client.strictParseInt32)(output[_NNV]);
    }
    return contents;
  }, "de_NoncurrentVersionTransition");
  var de_NoncurrentVersionTransitionList = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_NoncurrentVersionTransition(entry, context);
    });
  }, "de_NoncurrentVersionTransitionList");
  var de_NotificationConfigurationFilter = __name((output, context) => {
    const contents = {};
    if (output[_SKe] != null) {
      contents[_K] = de_S3KeyFilter(output[_SKe], context);
    }
    return contents;
  }, "de_NotificationConfigurationFilter");
  var de__Object = __name((output, context) => {
    const contents = {};
    if (output[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
    }
    if (output[_LM] != null) {
      contents[_LM] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LM]));
    }
    if (output[_ETa] != null) {
      contents[_ETa] = (0, import_smithy_client.expectString)(output[_ETa]);
    }
    if (output.ChecksumAlgorithm === "") {
      contents[_CA] = [];
    } else if (output[_CA] != null) {
      contents[_CA] = de_ChecksumAlgorithmList((0, import_smithy_client.getArrayIfSingleItem)(output[_CA]), context);
    }
    if (output[_Si] != null) {
      contents[_Si] = (0, import_smithy_client.strictParseLong)(output[_Si]);
    }
    if (output[_SC] != null) {
      contents[_SC] = (0, import_smithy_client.expectString)(output[_SC]);
    }
    if (output[_O] != null) {
      contents[_O] = de_Owner(output[_O], context);
    }
    if (output[_RSe] != null) {
      contents[_RSe] = de_RestoreStatus(output[_RSe], context);
    }
    return contents;
  }, "de__Object");
  var de_ObjectList = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de__Object(entry, context);
    });
  }, "de_ObjectList");
  var de_ObjectLockConfiguration = __name((output, context) => {
    const contents = {};
    if (output[_OLE] != null) {
      contents[_OLE] = (0, import_smithy_client.expectString)(output[_OLE]);
    }
    if (output[_Ru] != null) {
      contents[_Ru] = de_ObjectLockRule(output[_Ru], context);
    }
    return contents;
  }, "de_ObjectLockConfiguration");
  var de_ObjectLockLegalHold = __name((output, context) => {
    const contents = {};
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    return contents;
  }, "de_ObjectLockLegalHold");
  var de_ObjectLockRetention = __name((output, context) => {
    const contents = {};
    if (output[_Mo] != null) {
      contents[_Mo] = (0, import_smithy_client.expectString)(output[_Mo]);
    }
    if (output[_RUD] != null) {
      contents[_RUD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_RUD]));
    }
    return contents;
  }, "de_ObjectLockRetention");
  var de_ObjectLockRule = __name((output, context) => {
    const contents = {};
    if (output[_DRe] != null) {
      contents[_DRe] = de_DefaultRetention(output[_DRe], context);
    }
    return contents;
  }, "de_ObjectLockRule");
  var de_ObjectPart = __name((output, context) => {
    const contents = {};
    if (output[_PN] != null) {
      contents[_PN] = (0, import_smithy_client.strictParseInt32)(output[_PN]);
    }
    if (output[_Si] != null) {
      contents[_Si] = (0, import_smithy_client.strictParseLong)(output[_Si]);
    }
    if (output[_CCRC] != null) {
      contents[_CCRC] = (0, import_smithy_client.expectString)(output[_CCRC]);
    }
    if (output[_CCRCC] != null) {
      contents[_CCRCC] = (0, import_smithy_client.expectString)(output[_CCRCC]);
    }
    if (output[_CSHA] != null) {
      contents[_CSHA] = (0, import_smithy_client.expectString)(output[_CSHA]);
    }
    if (output[_CSHAh] != null) {
      contents[_CSHAh] = (0, import_smithy_client.expectString)(output[_CSHAh]);
    }
    return contents;
  }, "de_ObjectPart");
  var de_ObjectVersion = __name((output, context) => {
    const contents = {};
    if (output[_ETa] != null) {
      contents[_ETa] = (0, import_smithy_client.expectString)(output[_ETa]);
    }
    if (output.ChecksumAlgorithm === "") {
      contents[_CA] = [];
    } else if (output[_CA] != null) {
      contents[_CA] = de_ChecksumAlgorithmList((0, import_smithy_client.getArrayIfSingleItem)(output[_CA]), context);
    }
    if (output[_Si] != null) {
      contents[_Si] = (0, import_smithy_client.strictParseLong)(output[_Si]);
    }
    if (output[_SC] != null) {
      contents[_SC] = (0, import_smithy_client.expectString)(output[_SC]);
    }
    if (output[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
    }
    if (output[_VI] != null) {
      contents[_VI] = (0, import_smithy_client.expectString)(output[_VI]);
    }
    if (output[_IL] != null) {
      contents[_IL] = (0, import_smithy_client.parseBoolean)(output[_IL]);
    }
    if (output[_LM] != null) {
      contents[_LM] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LM]));
    }
    if (output[_O] != null) {
      contents[_O] = de_Owner(output[_O], context);
    }
    if (output[_RSe] != null) {
      contents[_RSe] = de_RestoreStatus(output[_RSe], context);
    }
    return contents;
  }, "de_ObjectVersion");
  var de_ObjectVersionList = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_ObjectVersion(entry, context);
    });
  }, "de_ObjectVersionList");
  var de_Owner = __name((output, context) => {
    const contents = {};
    if (output[_DN] != null) {
      contents[_DN] = (0, import_smithy_client.expectString)(output[_DN]);
    }
    if (output[_ID_] != null) {
      contents[_ID_] = (0, import_smithy_client.expectString)(output[_ID_]);
    }
    return contents;
  }, "de_Owner");
  var de_OwnershipControls = __name((output, context) => {
    const contents = {};
    if (output.Rule === "") {
      contents[_Rul] = [];
    } else if (output[_Ru] != null) {
      contents[_Rul] = de_OwnershipControlsRules((0, import_smithy_client.getArrayIfSingleItem)(output[_Ru]), context);
    }
    return contents;
  }, "de_OwnershipControls");
  var de_OwnershipControlsRule = __name((output, context) => {
    const contents = {};
    if (output[_OO] != null) {
      contents[_OO] = (0, import_smithy_client.expectString)(output[_OO]);
    }
    return contents;
  }, "de_OwnershipControlsRule");
  var de_OwnershipControlsRules = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_OwnershipControlsRule(entry, context);
    });
  }, "de_OwnershipControlsRules");
  var de_Part = __name((output, context) => {
    const contents = {};
    if (output[_PN] != null) {
      contents[_PN] = (0, import_smithy_client.strictParseInt32)(output[_PN]);
    }
    if (output[_LM] != null) {
      contents[_LM] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_LM]));
    }
    if (output[_ETa] != null) {
      contents[_ETa] = (0, import_smithy_client.expectString)(output[_ETa]);
    }
    if (output[_Si] != null) {
      contents[_Si] = (0, import_smithy_client.strictParseLong)(output[_Si]);
    }
    if (output[_CCRC] != null) {
      contents[_CCRC] = (0, import_smithy_client.expectString)(output[_CCRC]);
    }
    if (output[_CCRCC] != null) {
      contents[_CCRCC] = (0, import_smithy_client.expectString)(output[_CCRCC]);
    }
    if (output[_CSHA] != null) {
      contents[_CSHA] = (0, import_smithy_client.expectString)(output[_CSHA]);
    }
    if (output[_CSHAh] != null) {
      contents[_CSHAh] = (0, import_smithy_client.expectString)(output[_CSHAh]);
    }
    return contents;
  }, "de_Part");
  var de_PartitionedPrefix = __name((output, context) => {
    const contents = {};
    if (output[_PDS] != null) {
      contents[_PDS] = (0, import_smithy_client.expectString)(output[_PDS]);
    }
    return contents;
  }, "de_PartitionedPrefix");
  var de_Parts = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_Part(entry, context);
    });
  }, "de_Parts");
  var de_PartsList = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_ObjectPart(entry, context);
    });
  }, "de_PartsList");
  var de_PolicyStatus = __name((output, context) => {
    const contents = {};
    if (output[_IP] != null) {
      contents[_IP] = (0, import_smithy_client.parseBoolean)(output[_IP]);
    }
    return contents;
  }, "de_PolicyStatus");
  var de_Progress = __name((output, context) => {
    const contents = {};
    if (output[_BS] != null) {
      contents[_BS] = (0, import_smithy_client.strictParseLong)(output[_BS]);
    }
    if (output[_BP] != null) {
      contents[_BP] = (0, import_smithy_client.strictParseLong)(output[_BP]);
    }
    if (output[_BRy] != null) {
      contents[_BRy] = (0, import_smithy_client.strictParseLong)(output[_BRy]);
    }
    return contents;
  }, "de_Progress");
  var de_PublicAccessBlockConfiguration = __name((output, context) => {
    const contents = {};
    if (output[_BPA] != null) {
      contents[_BPA] = (0, import_smithy_client.parseBoolean)(output[_BPA]);
    }
    if (output[_IPA] != null) {
      contents[_IPA] = (0, import_smithy_client.parseBoolean)(output[_IPA]);
    }
    if (output[_BPP] != null) {
      contents[_BPP] = (0, import_smithy_client.parseBoolean)(output[_BPP]);
    }
    if (output[_RPB] != null) {
      contents[_RPB] = (0, import_smithy_client.parseBoolean)(output[_RPB]);
    }
    return contents;
  }, "de_PublicAccessBlockConfiguration");
  var de_QueueConfiguration = __name((output, context) => {
    const contents = {};
    if (output[_I] != null) {
      contents[_I] = (0, import_smithy_client.expectString)(output[_I]);
    }
    if (output[_Qu] != null) {
      contents[_QA] = (0, import_smithy_client.expectString)(output[_Qu]);
    }
    if (output.Event === "") {
      contents[_Eve] = [];
    } else if (output[_Ev] != null) {
      contents[_Eve] = de_EventList((0, import_smithy_client.getArrayIfSingleItem)(output[_Ev]), context);
    }
    if (output[_F] != null) {
      contents[_F] = de_NotificationConfigurationFilter(output[_F], context);
    }
    return contents;
  }, "de_QueueConfiguration");
  var de_QueueConfigurationList = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_QueueConfiguration(entry, context);
    });
  }, "de_QueueConfigurationList");
  var de_Redirect = __name((output, context) => {
    const contents = {};
    if (output[_HN] != null) {
      contents[_HN] = (0, import_smithy_client.expectString)(output[_HN]);
    }
    if (output[_HRC] != null) {
      contents[_HRC] = (0, import_smithy_client.expectString)(output[_HRC]);
    }
    if (output[_Pr] != null) {
      contents[_Pr] = (0, import_smithy_client.expectString)(output[_Pr]);
    }
    if (output[_RKPW] != null) {
      contents[_RKPW] = (0, import_smithy_client.expectString)(output[_RKPW]);
    }
    if (output[_RKW] != null) {
      contents[_RKW] = (0, import_smithy_client.expectString)(output[_RKW]);
    }
    return contents;
  }, "de_Redirect");
  var de_RedirectAllRequestsTo = __name((output, context) => {
    const contents = {};
    if (output[_HN] != null) {
      contents[_HN] = (0, import_smithy_client.expectString)(output[_HN]);
    }
    if (output[_Pr] != null) {
      contents[_Pr] = (0, import_smithy_client.expectString)(output[_Pr]);
    }
    return contents;
  }, "de_RedirectAllRequestsTo");
  var de_ReplicaModifications = __name((output, context) => {
    const contents = {};
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    return contents;
  }, "de_ReplicaModifications");
  var de_ReplicationConfiguration = __name((output, context) => {
    const contents = {};
    if (output[_Ro] != null) {
      contents[_Ro] = (0, import_smithy_client.expectString)(output[_Ro]);
    }
    if (output.Rule === "") {
      contents[_Rul] = [];
    } else if (output[_Ru] != null) {
      contents[_Rul] = de_ReplicationRules((0, import_smithy_client.getArrayIfSingleItem)(output[_Ru]), context);
    }
    return contents;
  }, "de_ReplicationConfiguration");
  var de_ReplicationRule = __name((output, context) => {
    const contents = {};
    if (output[_ID_] != null) {
      contents[_ID_] = (0, import_smithy_client.expectString)(output[_ID_]);
    }
    if (output[_Pri] != null) {
      contents[_Pri] = (0, import_smithy_client.strictParseInt32)(output[_Pri]);
    }
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output.Filter === "") {
    } else if (output[_F] != null) {
      contents[_F] = de_ReplicationRuleFilter((0, import_smithy_client.expectUnion)(output[_F]), context);
    }
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    if (output[_SSC] != null) {
      contents[_SSC] = de_SourceSelectionCriteria(output[_SSC], context);
    }
    if (output[_EOR] != null) {
      contents[_EOR] = de_ExistingObjectReplication(output[_EOR], context);
    }
    if (output[_Des] != null) {
      contents[_Des] = de_Destination(output[_Des], context);
    }
    if (output[_DMR] != null) {
      contents[_DMR] = de_DeleteMarkerReplication(output[_DMR], context);
    }
    return contents;
  }, "de_ReplicationRule");
  var de_ReplicationRuleAndOperator = __name((output, context) => {
    const contents = {};
    if (output[_P] != null) {
      contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
    }
    if (output.Tag === "") {
      contents[_Tag] = [];
    } else if (output[_Ta] != null) {
      contents[_Tag] = de_TagSet((0, import_smithy_client.getArrayIfSingleItem)(output[_Ta]), context);
    }
    return contents;
  }, "de_ReplicationRuleAndOperator");
  var de_ReplicationRuleFilter = __name((output, context) => {
    if (output[_P] != null) {
      return {
        Prefix: (0, import_smithy_client.expectString)(output[_P])
      };
    }
    if (output[_Ta] != null) {
      return {
        Tag: de_Tag(output[_Ta], context)
      };
    }
    if (output[_A] != null) {
      return {
        And: de_ReplicationRuleAndOperator(output[_A], context)
      };
    }
    return { $unknown: Object.entries(output)[0] };
  }, "de_ReplicationRuleFilter");
  var de_ReplicationRules = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_ReplicationRule(entry, context);
    });
  }, "de_ReplicationRules");
  var de_ReplicationTime = __name((output, context) => {
    const contents = {};
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    if (output[_Tim] != null) {
      contents[_Tim] = de_ReplicationTimeValue(output[_Tim], context);
    }
    return contents;
  }, "de_ReplicationTime");
  var de_ReplicationTimeValue = __name((output, context) => {
    const contents = {};
    if (output[_Mi] != null) {
      contents[_Mi] = (0, import_smithy_client.strictParseInt32)(output[_Mi]);
    }
    return contents;
  }, "de_ReplicationTimeValue");
  var de_RestoreStatus = __name((output, context) => {
    const contents = {};
    if (output[_IRIP] != null) {
      contents[_IRIP] = (0, import_smithy_client.parseBoolean)(output[_IRIP]);
    }
    if (output[_RED] != null) {
      contents[_RED] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_RED]));
    }
    return contents;
  }, "de_RestoreStatus");
  var de_RoutingRule = __name((output, context) => {
    const contents = {};
    if (output[_Con] != null) {
      contents[_Con] = de_Condition(output[_Con], context);
    }
    if (output[_Red] != null) {
      contents[_Red] = de_Redirect(output[_Red], context);
    }
    return contents;
  }, "de_RoutingRule");
  var de_RoutingRules = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_RoutingRule(entry, context);
    });
  }, "de_RoutingRules");
  var de_S3KeyFilter = __name((output, context) => {
    const contents = {};
    if (output.FilterRule === "") {
      contents[_FRi] = [];
    } else if (output[_FR] != null) {
      contents[_FRi] = de_FilterRuleList((0, import_smithy_client.getArrayIfSingleItem)(output[_FR]), context);
    }
    return contents;
  }, "de_S3KeyFilter");
  var de_ServerSideEncryptionByDefault = __name((output, context) => {
    const contents = {};
    if (output[_SSEA] != null) {
      contents[_SSEA] = (0, import_smithy_client.expectString)(output[_SSEA]);
    }
    if (output[_KMSMKID] != null) {
      contents[_KMSMKID] = (0, import_smithy_client.expectString)(output[_KMSMKID]);
    }
    return contents;
  }, "de_ServerSideEncryptionByDefault");
  var de_ServerSideEncryptionConfiguration = __name((output, context) => {
    const contents = {};
    if (output.Rule === "") {
      contents[_Rul] = [];
    } else if (output[_Ru] != null) {
      contents[_Rul] = de_ServerSideEncryptionRules((0, import_smithy_client.getArrayIfSingleItem)(output[_Ru]), context);
    }
    return contents;
  }, "de_ServerSideEncryptionConfiguration");
  var de_ServerSideEncryptionRule = __name((output, context) => {
    const contents = {};
    if (output[_ASSEBD] != null) {
      contents[_ASSEBD] = de_ServerSideEncryptionByDefault(output[_ASSEBD], context);
    }
    if (output[_BKE] != null) {
      contents[_BKE] = (0, import_smithy_client.parseBoolean)(output[_BKE]);
    }
    return contents;
  }, "de_ServerSideEncryptionRule");
  var de_ServerSideEncryptionRules = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_ServerSideEncryptionRule(entry, context);
    });
  }, "de_ServerSideEncryptionRules");
  var de_SessionCredentials = __name((output, context) => {
    const contents = {};
    if (output[_AKI] != null) {
      contents[_AKI] = (0, import_smithy_client.expectString)(output[_AKI]);
    }
    if (output[_SAK] != null) {
      contents[_SAK] = (0, import_smithy_client.expectString)(output[_SAK]);
    }
    if (output[_ST] != null) {
      contents[_ST] = (0, import_smithy_client.expectString)(output[_ST]);
    }
    if (output[_Exp] != null) {
      contents[_Exp] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_Exp]));
    }
    return contents;
  }, "de_SessionCredentials");
  var de_SimplePrefix = __name((output, context) => {
    const contents = {};
    return contents;
  }, "de_SimplePrefix");
  var de_SourceSelectionCriteria = __name((output, context) => {
    const contents = {};
    if (output[_SKEO] != null) {
      contents[_SKEO] = de_SseKmsEncryptedObjects(output[_SKEO], context);
    }
    if (output[_RM] != null) {
      contents[_RM] = de_ReplicaModifications(output[_RM], context);
    }
    return contents;
  }, "de_SourceSelectionCriteria");
  var de_SSEKMS = __name((output, context) => {
    const contents = {};
    if (output[_KI] != null) {
      contents[_KI] = (0, import_smithy_client.expectString)(output[_KI]);
    }
    return contents;
  }, "de_SSEKMS");
  var de_SseKmsEncryptedObjects = __name((output, context) => {
    const contents = {};
    if (output[_S] != null) {
      contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
    }
    return contents;
  }, "de_SseKmsEncryptedObjects");
  var de_SSES3 = __name((output, context) => {
    const contents = {};
    return contents;
  }, "de_SSES3");
  var de_Stats = __name((output, context) => {
    const contents = {};
    if (output[_BS] != null) {
      contents[_BS] = (0, import_smithy_client.strictParseLong)(output[_BS]);
    }
    if (output[_BP] != null) {
      contents[_BP] = (0, import_smithy_client.strictParseLong)(output[_BP]);
    }
    if (output[_BRy] != null) {
      contents[_BRy] = (0, import_smithy_client.strictParseLong)(output[_BRy]);
    }
    return contents;
  }, "de_Stats");
  var de_StorageClassAnalysis = __name((output, context) => {
    const contents = {};
    if (output[_DE] != null) {
      contents[_DE] = de_StorageClassAnalysisDataExport(output[_DE], context);
    }
    return contents;
  }, "de_StorageClassAnalysis");
  var de_StorageClassAnalysisDataExport = __name((output, context) => {
    const contents = {};
    if (output[_OSV] != null) {
      contents[_OSV] = (0, import_smithy_client.expectString)(output[_OSV]);
    }
    if (output[_Des] != null) {
      contents[_Des] = de_AnalyticsExportDestination(output[_Des], context);
    }
    return contents;
  }, "de_StorageClassAnalysisDataExport");
  var de_Tag = __name((output, context) => {
    const contents = {};
    if (output[_K] != null) {
      contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
    }
    if (output[_Va] != null) {
      contents[_Va] = (0, import_smithy_client.expectString)(output[_Va]);
    }
    return contents;
  }, "de_Tag");
  var de_TagSet = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_Tag(entry, context);
    });
  }, "de_TagSet");
  var de_TargetGrant = __name((output, context) => {
    const contents = {};
    if (output[_Gra] != null) {
      contents[_Gra] = de_Grantee(output[_Gra], context);
    }
    if (output[_Pe] != null) {
      contents[_Pe] = (0, import_smithy_client.expectString)(output[_Pe]);
    }
    return contents;
  }, "de_TargetGrant");
  var de_TargetGrants = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_TargetGrant(entry, context);
    });
  }, "de_TargetGrants");
  var de_TargetObjectKeyFormat = __name((output, context) => {
    const contents = {};
    if (output[_SPi] != null) {
      contents[_SPi] = de_SimplePrefix(output[_SPi], context);
    }
    if (output[_PP] != null) {
      contents[_PP] = de_PartitionedPrefix(output[_PP], context);
    }
    return contents;
  }, "de_TargetObjectKeyFormat");
  var de_Tiering = __name((output, context) => {
    const contents = {};
    if (output[_Da] != null) {
      contents[_Da] = (0, import_smithy_client.strictParseInt32)(output[_Da]);
    }
    if (output[_AT] != null) {
      contents[_AT] = (0, import_smithy_client.expectString)(output[_AT]);
    }
    return contents;
  }, "de_Tiering");
  var de_TieringList = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_Tiering(entry, context);
    });
  }, "de_TieringList");
  var de_TopicConfiguration = __name((output, context) => {
    const contents = {};
    if (output[_I] != null) {
      contents[_I] = (0, import_smithy_client.expectString)(output[_I]);
    }
    if (output[_Top] != null) {
      contents[_TA] = (0, import_smithy_client.expectString)(output[_Top]);
    }
    if (output.Event === "") {
      contents[_Eve] = [];
    } else if (output[_Ev] != null) {
      contents[_Eve] = de_EventList((0, import_smithy_client.getArrayIfSingleItem)(output[_Ev]), context);
    }
    if (output[_F] != null) {
      contents[_F] = de_NotificationConfigurationFilter(output[_F], context);
    }
    return contents;
  }, "de_TopicConfiguration");
  var de_TopicConfigurationList = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_TopicConfiguration(entry, context);
    });
  }, "de_TopicConfigurationList");
  var de_Transition = __name((output, context) => {
    const contents = {};
    if (output[_Dat] != null) {
      contents[_Dat] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_Dat]));
    }
    if (output[_Da] != null) {
      contents[_Da] = (0, import_smithy_client.strictParseInt32)(output[_Da]);
    }
    if (output[_SC] != null) {
      contents[_SC] = (0, import_smithy_client.expectString)(output[_SC]);
    }
    return contents;
  }, "de_Transition");
  var de_TransitionList = __name((output, context) => {
    return (output || []).filter((e) => e != null).map((entry) => {
      return de_Transition(entry, context);
    });
  }, "de_TransitionList");
  var deserializeMetadata = __name((output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  }), "deserializeMetadata");
  var collectBodyString = __name((streamBody, context) => (0, import_smithy_client.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body)), "collectBodyString");
  var isSerializableHeaderValue = __name((value) => value !== undefined && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0), "isSerializableHeaderValue");
  var _A = "And";
  var _AAO = "AnalyticsAndOperator";
  var _AC = "AnalyticsConfiguration";
  var _ACL = "ACL";
  var _ACLc = "AccessControlList";
  var _ACLn = "AnalyticsConfigurationList";
  var _ACP = "AccessControlPolicy";
  var _ACT = "AccessControlTranslation";
  var _ACc = "AccelerateConfiguration";
  var _AD = "AbortDate";
  var _AED = "AnalyticsExportDestination";
  var _AF = "AnalyticsFilter";
  var _AH = "AllowedHeader";
  var _AHl = "AllowedHeaders";
  var _AI = "AnalyticsId";
  var _AIMU = "AbortIncompleteMultipartUpload";
  var _AIc = "AccountId";
  var _AKI = "AccessKeyId";
  var _AM = "AllowedMethod";
  var _AMl = "AllowedMethods";
  var _AO = "AllowedOrigin";
  var _AOl = "AllowedOrigins";
  var _APA = "AccessPointAlias";
  var _APAc = "AccessPointArn";
  var _AQRD = "AllowQuotedRecordDelimiter";
  var _AR = "AcceptRanges";
  var _ARI = "AbortRuleId";
  var _AS = "ArchiveStatus";
  var _ASBD = "AnalyticsS3BucketDestination";
  var _ASEFF = "AnalyticsS3ExportFileFormat";
  var _ASSEBD = "ApplyServerSideEncryptionByDefault";
  var _AT = "AccessTier";
  var _Ac = "Account";
  var _B = "Bucket";
  var _BAI = "BucketAccountId";
  var _BAS = "BucketAccelerateStatus";
  var _BGR = "BypassGovernanceRetention";
  var _BI = "BucketInfo";
  var _BKE = "BucketKeyEnabled";
  var _BLC = "BucketLifecycleConfiguration";
  var _BLCu = "BucketLocationConstraint";
  var _BLN = "BucketLocationName";
  var _BLP = "BucketLogsPermission";
  var _BLS = "BucketLoggingStatus";
  var _BLT = "BucketLocationType";
  var _BN = "BucketName";
  var _BP = "BytesProcessed";
  var _BPA = "BlockPublicAcls";
  var _BPP = "BlockPublicPolicy";
  var _BR = "BucketRegion";
  var _BRy = "BytesReturned";
  var _BS = "BytesScanned";
  var _BT = "BucketType";
  var _BVS = "BucketVersioningStatus";
  var _Bu = "Buckets";
  var _C = "Credentials";
  var _CA = "ChecksumAlgorithm";
  var _CACL = "CannedACL";
  var _CBC = "CreateBucketConfiguration";
  var _CC = "CacheControl";
  var _CCRC = "ChecksumCRC32";
  var _CCRCC = "ChecksumCRC32C";
  var _CD = "ContentDisposition";
  var _CDr = "CreationDate";
  var _CE = "ContentEncoding";
  var _CF = "CloudFunction";
  var _CFC = "CloudFunctionConfiguration";
  var _CL = "ContentLanguage";
  var _CLo = "ContentLength";
  var _CM = "ChecksumMode";
  var _CMD = "ContentMD5";
  var _CMU = "CompletedMultipartUpload";
  var _CORSC = "CORSConfiguration";
  var _CORSR = "CORSRule";
  var _CORSRu = "CORSRules";
  var _CP = "CommonPrefixes";
  var _CPo = "CompletedPart";
  var _CR = "ContentRange";
  var _CRSBA = "ConfirmRemoveSelfBucketAccess";
  var _CS = "CopySource";
  var _CSHA = "ChecksumSHA1";
  var _CSHAh = "ChecksumSHA256";
  var _CSIM = "CopySourceIfMatch";
  var _CSIMS = "CopySourceIfModifiedSince";
  var _CSINM = "CopySourceIfNoneMatch";
  var _CSIUS = "CopySourceIfUnmodifiedSince";
  var _CSR = "CopySourceRange";
  var _CSSSECA = "CopySourceSSECustomerAlgorithm";
  var _CSSSECK = "CopySourceSSECustomerKey";
  var _CSSSECKMD = "CopySourceSSECustomerKeyMD5";
  var _CSV = "CSV";
  var _CSVI = "CopySourceVersionId";
  var _CSVIn = "CSVInput";
  var _CSVO = "CSVOutput";
  var _CT = "ContentType";
  var _CTo = "ContinuationToken";
  var _CTom = "CompressionType";
  var _Ch = "Checksum";
  var _Co = "Contents";
  var _Cod = "Code";
  var _Com = "Comments";
  var _Con = "Condition";
  var _D = "Delimiter";
  var _DAI = "DaysAfterInitiation";
  var _DE = "DataExport";
  var _DM = "DeleteMarker";
  var _DMR = "DeleteMarkerReplication";
  var _DMRS = "DeleteMarkerReplicationStatus";
  var _DMVI = "DeleteMarkerVersionId";
  var _DMe = "DeleteMarkers";
  var _DN = "DisplayName";
  var _DR = "DataRedundancy";
  var _DRe = "DefaultRetention";
  var _Da = "Days";
  var _Dat = "Date";
  var _De = "Deleted";
  var _Del = "Delete";
  var _Des = "Destination";
  var _Desc = "Description";
  var _E = "Expires";
  var _EA = "EmailAddress";
  var _EBC = "EventBridgeConfiguration";
  var _EBO = "ExpectedBucketOwner";
  var _EC = "ErrorCode";
  var _ECn = "EncryptionConfiguration";
  var _ED = "ErrorDocument";
  var _EH = "ExposeHeaders";
  var _EHx = "ExposeHeader";
  var _EM = "ErrorMessage";
  var _EODM = "ExpiredObjectDeleteMarker";
  var _EOR = "ExistingObjectReplication";
  var _EORS = "ExistingObjectReplicationStatus";
  var _ERP = "EnableRequestProgress";
  var _ES = "ExpiresString";
  var _ESBO = "ExpectedSourceBucketOwner";
  var _ESx = "ExpirationStatus";
  var _ET = "EncodingType";
  var _ETa = "ETag";
  var _ETn = "EncryptionType";
  var _ETv = "EventThreshold";
  var _ETx = "ExpressionType";
  var _En = "Encryption";
  var _Ena = "Enabled";
  var _End = "End";
  var _Er = "Error";
  var _Err = "Errors";
  var _Ev = "Event";
  var _Eve = "Events";
  var _Ex = "Expression";
  var _Exp = "Expiration";
  var _F = "Filter";
  var _FD = "FieldDelimiter";
  var _FHI = "FileHeaderInfo";
  var _FO = "FetchOwner";
  var _FR = "FilterRule";
  var _FRN = "FilterRuleName";
  var _FRV = "FilterRuleValue";
  var _FRi = "FilterRules";
  var _Fi = "Field";
  var _Fo = "Format";
  var _Fr = "Frequency";
  var _G = "Grant";
  var _GFC = "GrantFullControl";
  var _GJP = "GlacierJobParameters";
  var _GR = "GrantRead";
  var _GRACP = "GrantReadACP";
  var _GW = "GrantWrite";
  var _GWACP = "GrantWriteACP";
  var _Gr = "Grants";
  var _Gra = "Grantee";
  var _HECRE = "HttpErrorCodeReturnedEquals";
  var _HN = "HostName";
  var _HRC = "HttpRedirectCode";
  var _I = "Id";
  var _IC = "InventoryConfiguration";
  var _ICL = "InventoryConfigurationList";
  var _ID = "IndexDocument";
  var _ID_ = "ID";
  var _IDn = "InventoryDestination";
  var _IE = "IsEnabled";
  var _IEn = "InventoryEncryption";
  var _IF = "InventoryFilter";
  var _IFn = "InventoryFormat";
  var _IFnv = "InventoryFrequency";
  var _II = "InventoryId";
  var _IIOV = "InventoryIncludedObjectVersions";
  var _IL = "IsLatest";
  var _IM = "IfMatch";
  var _IMS = "IfModifiedSince";
  var _INM = "IfNoneMatch";
  var _IOF = "InventoryOptionalField";
  var _IOV = "IncludedObjectVersions";
  var _IP = "IsPublic";
  var _IPA = "IgnorePublicAcls";
  var _IRIP = "IsRestoreInProgress";
  var _IS = "InputSerialization";
  var _ISBD = "InventoryS3BucketDestination";
  var _ISn = "InventorySchedule";
  var _IT = "IsTruncated";
  var _ITAO = "IntelligentTieringAndOperator";
  var _ITAT = "IntelligentTieringAccessTier";
  var _ITC = "IntelligentTieringConfiguration";
  var _ITCL = "IntelligentTieringConfigurationList";
  var _ITD = "IntelligentTieringDays";
  var _ITF = "IntelligentTieringFilter";
  var _ITI = "IntelligentTieringId";
  var _ITS = "IntelligentTieringStatus";
  var _IUS = "IfUnmodifiedSince";
  var _In = "Initiator";
  var _Ini = "Initiated";
  var _JSON = "JSON";
  var _JSONI = "JSONInput";
  var _JSONO = "JSONOutput";
  var _JSONT = "JSONType";
  var _K = "Key";
  var _KC = "KeyCount";
  var _KI = "KeyId";
  var _KM = "KeyMarker";
  var _KMSC = "KMSContext";
  var _KMSKI = "KMSKeyId";
  var _KMSMKID = "KMSMasterKeyID";
  var _KPE = "KeyPrefixEquals";
  var _L = "Location";
  var _LC = "LocationConstraint";
  var _LE = "LoggingEnabled";
  var _LEi = "LifecycleExpiration";
  var _LFA = "LambdaFunctionArn";
  var _LFC = "LambdaFunctionConfigurations";
  var _LFCa = "LambdaFunctionConfiguration";
  var _LI = "LocationInfo";
  var _LM = "LastModified";
  var _LNAS = "LocationNameAsString";
  var _LP = "LocationPrefix";
  var _LR = "LifecycleRule";
  var _LRAO = "LifecycleRuleAndOperator";
  var _LRF = "LifecycleRuleFilter";
  var _LT = "LocationType";
  var _M = "Marker";
  var _MAO = "MetricsAndOperator";
  var _MAS = "MaxAgeSeconds";
  var _MC = "MetricsConfiguration";
  var _MCL = "MetricsConfigurationList";
  var _MD = "MetadataDirective";
  var _MDB = "MaxDirectoryBuckets";
  var _MDf = "MfaDelete";
  var _ME = "MetadataEntry";
  var _MF = "MetricsFilter";
  var _MFA = "MFA";
  var _MFAD = "MFADelete";
  var _MI = "MetricsId";
  var _MK = "MaxKeys";
  var _MKe = "MetadataKey";
  var _MM = "MissingMeta";
  var _MP = "MaxParts";
  var _MS = "MetricsStatus";
  var _MU = "MaxUploads";
  var _MV = "MetadataValue";
  var _Me = "Metrics";
  var _Mes = "Message";
  var _Mi = "Minutes";
  var _Mo = "Mode";
  var _N = "Name";
  var _NC = "NotificationConfiguration";
  var _NCF = "NotificationConfigurationFilter";
  var _NCT = "NextContinuationToken";
  var _ND = "NoncurrentDays";
  var _NI = "NotificationId";
  var _NKM = "NextKeyMarker";
  var _NM = "NextMarker";
  var _NNV = "NewerNoncurrentVersions";
  var _NPNM = "NextPartNumberMarker";
  var _NUIM = "NextUploadIdMarker";
  var _NVE = "NoncurrentVersionExpiration";
  var _NVIM = "NextVersionIdMarker";
  var _NVT = "NoncurrentVersionTransitions";
  var _NVTo = "NoncurrentVersionTransition";
  var _O = "Owner";
  var _OA = "ObjectAttributes";
  var _OC = "OwnershipControls";
  var _OCACL = "ObjectCannedACL";
  var _OCR = "OwnershipControlsRule";
  var _OF = "OptionalFields";
  var _OI = "ObjectIdentifier";
  var _OK = "ObjectKey";
  var _OL = "OutputLocation";
  var _OLC = "ObjectLockConfiguration";
  var _OLE = "ObjectLockEnabled";
  var _OLEFB = "ObjectLockEnabledForBucket";
  var _OLLH = "ObjectLockLegalHold";
  var _OLLHS = "ObjectLockLegalHoldStatus";
  var _OLM = "ObjectLockMode";
  var _OLR = "ObjectLockRetention";
  var _OLRM = "ObjectLockRetentionMode";
  var _OLRUD = "ObjectLockRetainUntilDate";
  var _OLRb = "ObjectLockRule";
  var _OO = "ObjectOwnership";
  var _OOA = "OptionalObjectAttributes";
  var _OOw = "OwnerOverride";
  var _OP = "ObjectParts";
  var _OS = "OutputSerialization";
  var _OSGT = "ObjectSizeGreaterThan";
  var _OSGTB = "ObjectSizeGreaterThanBytes";
  var _OSLT = "ObjectSizeLessThan";
  var _OSLTB = "ObjectSizeLessThanBytes";
  var _OSV = "OutputSchemaVersion";
  var _OSb = "ObjectSize";
  var _OVI = "ObjectVersionId";
  var _Ob = "Objects";
  var _P = "Prefix";
  var _PABC = "PublicAccessBlockConfiguration";
  var _PC = "PartsCount";
  var _PDS = "PartitionDateSource";
  var _PI = "ParquetInput";
  var _PN = "PartNumber";
  var _PNM = "PartNumberMarker";
  var _PP = "PartitionedPrefix";
  var _Pa = "Payer";
  var _Par = "Part";
  var _Parq = "Parquet";
  var _Part = "Parts";
  var _Pe = "Permission";
  var _Pr = "Protocol";
  var _Pri = "Priority";
  var _Q = "Quiet";
  var _QA = "QueueArn";
  var _QC = "QueueConfiguration";
  var _QCu = "QueueConfigurations";
  var _QCuo = "QuoteCharacter";
  var _QEC = "QuoteEscapeCharacter";
  var _QF = "QuoteFields";
  var _Qu = "Queue";
  var _R = "Range";
  var _RART = "RedirectAllRequestsTo";
  var _RC = "RequestCharged";
  var _RCC = "ResponseCacheControl";
  var _RCD = "ResponseContentDisposition";
  var _RCE = "ResponseContentEncoding";
  var _RCL = "ResponseContentLanguage";
  var _RCT = "ResponseContentType";
  var _RCe = "ReplicationConfiguration";
  var _RD = "RecordDelimiter";
  var _RE = "ResponseExpires";
  var _RED = "RestoreExpiryDate";
  var _RKKID = "ReplicaKmsKeyID";
  var _RKPW = "ReplaceKeyPrefixWith";
  var _RKW = "ReplaceKeyWith";
  var _RM = "ReplicaModifications";
  var _RMS = "ReplicaModificationsStatus";
  var _ROP = "RestoreOutputPath";
  var _RP = "RequestPayer";
  var _RPB = "RestrictPublicBuckets";
  var _RPC = "RequestPaymentConfiguration";
  var _RPe = "RequestProgress";
  var _RR = "RequestRoute";
  var _RRAO = "ReplicationRuleAndOperator";
  var _RRF = "ReplicationRuleFilter";
  var _RRS = "ReplicationRuleStatus";
  var _RRT = "RestoreRequestType";
  var _RRe = "ReplicationRule";
  var _RRes = "RestoreRequest";
  var _RRo = "RoutingRules";
  var _RRou = "RoutingRule";
  var _RS = "ReplicationStatus";
  var _RSe = "RestoreStatus";
  var _RT = "RequestToken";
  var _RTS = "ReplicationTimeStatus";
  var _RTV = "ReplicationTimeValue";
  var _RTe = "ReplicationTime";
  var _RUD = "RetainUntilDate";
  var _Re = "Restore";
  var _Red = "Redirect";
  var _Ro = "Role";
  var _Ru = "Rule";
  var _Rul = "Rules";
  var _S = "Status";
  var _SA = "StartAfter";
  var _SAK = "SecretAccessKey";
  var _SBD = "S3BucketDestination";
  var _SC = "StorageClass";
  var _SCA = "StorageClassAnalysis";
  var _SCADE = "StorageClassAnalysisDataExport";
  var _SCASV = "StorageClassAnalysisSchemaVersion";
  var _SCt = "StatusCode";
  var _SDV = "SkipDestinationValidation";
  var _SK = "SSE-KMS";
  var _SKEO = "SseKmsEncryptedObjects";
  var _SKEOS = "SseKmsEncryptedObjectsStatus";
  var _SKF = "S3KeyFilter";
  var _SKe = "S3Key";
  var _SL = "S3Location";
  var _SM = "SessionMode";
  var _SOCR = "SelectObjectContentRequest";
  var _SP = "SelectParameters";
  var _SPi = "SimplePrefix";
  var _SR = "ScanRange";
  var _SS = "SSE-S3";
  var _SSC = "SourceSelectionCriteria";
  var _SSE = "ServerSideEncryption";
  var _SSEA = "SSEAlgorithm";
  var _SSEBD = "ServerSideEncryptionByDefault";
  var _SSEC = "ServerSideEncryptionConfiguration";
  var _SSECA = "SSECustomerAlgorithm";
  var _SSECK = "SSECustomerKey";
  var _SSECKMD = "SSECustomerKeyMD5";
  var _SSEKMS = "SSEKMS";
  var _SSEKMSEC = "SSEKMSEncryptionContext";
  var _SSEKMSKI = "SSEKMSKeyId";
  var _SSER = "ServerSideEncryptionRule";
  var _SSES = "SSES3";
  var _ST = "SessionToken";
  var _S_ = "S3";
  var _Sc = "Schedule";
  var _Se = "Setting";
  var _Si = "Size";
  var _St = "Start";
  var _Su = "Suffix";
  var _T = "Tagging";
  var _TA = "TopicArn";
  var _TB = "TargetBucket";
  var _TC = "TagCount";
  var _TCo = "TopicConfiguration";
  var _TCop = "TopicConfigurations";
  var _TD = "TaggingDirective";
  var _TG = "TargetGrants";
  var _TGa = "TargetGrant";
  var _TOKF = "TargetObjectKeyFormat";
  var _TP = "TargetPrefix";
  var _TPC = "TotalPartsCount";
  var _TS = "TagSet";
  var _TSC = "TransitionStorageClass";
  var _Ta = "Tag";
  var _Tag = "Tags";
  var _Ti = "Tier";
  var _Tie = "Tierings";
  var _Tier = "Tiering";
  var _Tim = "Time";
  var _To = "Token";
  var _Top = "Topic";
  var _Tr = "Transitions";
  var _Tra = "Transition";
  var _Ty = "Type";
  var _U = "Upload";
  var _UI = "UploadId";
  var _UIM = "UploadIdMarker";
  var _UM = "UserMetadata";
  var _URI = "URI";
  var _Up = "Uploads";
  var _V = "Version";
  var _VC = "VersionCount";
  var _VCe = "VersioningConfiguration";
  var _VI = "VersionId";
  var _VIM = "VersionIdMarker";
  var _Va = "Value";
  var _Ve = "Versions";
  var _WC = "WebsiteConfiguration";
  var _WRL = "WebsiteRedirectLocation";
  var _Y = "Years";
  var _a = "analytics";
  var _ac = "accelerate";
  var _acl = "acl";
  var _ar = "accept-ranges";
  var _at = "attributes";
  var _c = "cors";
  var _cc = "cache-control";
  var _cd = "content-disposition";
  var _ce = "content-encoding";
  var _cl = "content-language";
  var _cl_ = "content-length";
  var _cm = "content-md5";
  var _cr = "content-range";
  var _ct = "content-type";
  var _ct_ = "continuation-token";
  var _d = "delete";
  var _de = "delimiter";
  var _e = "expires";
  var _en = "encryption";
  var _et = "encoding-type";
  var _eta = "etag";
  var _ex = "expiresstring";
  var _fo = "fetch-owner";
  var _i = "id";
  var _im = "if-match";
  var _ims = "if-modified-since";
  var _in = "inventory";
  var _inm = "if-none-match";
  var _it = "intelligent-tiering";
  var _ius = "if-unmodified-since";
  var _km = "key-marker";
  var _l = "lifecycle";
  var _lh = "legal-hold";
  var _lm = "last-modified";
  var _lo = "location";
  var _log = "logging";
  var _lt = "list-type";
  var _m = "metrics";
  var _ma = "marker";
  var _mdb = "max-directory-buckets";
  var _me = "member";
  var _mk = "max-keys";
  var _mp = "max-parts";
  var _mu = "max-uploads";
  var _n = "notification";
  var _oC = "ownershipControls";
  var _ol = "object-lock";
  var _p = "policy";
  var _pAB = "publicAccessBlock";
  var _pN = "partNumber";
  var _pS = "policyStatus";
  var _pnm = "part-number-marker";
  var _pr = "prefix";
  var _r = "replication";
  var _rP = "requestPayment";
  var _ra = "range";
  var _rcc = "response-cache-control";
  var _rcd = "response-content-disposition";
  var _rce = "response-content-encoding";
  var _rcl = "response-content-language";
  var _rct = "response-content-type";
  var _re = "response-expires";
  var _res = "restore";
  var _ret = "retention";
  var _s = "session";
  var _sa = "start-after";
  var _se = "select";
  var _st = "select-type";
  var _t = "tagging";
  var _to = "torrent";
  var _u = "uploads";
  var _uI = "uploadId";
  var _uim = "upload-id-marker";
  var _v = "versioning";
  var _vI = "versionId";
  var _ve = '<?xml version="1.0" encoding="UTF-8"?>';
  var _ver = "versions";
  var _vim = "version-id-marker";
  var _w = "website";
  var _x = "xsi:type";
  var _xaa = "x-amz-acl";
  var _xaad = "x-amz-abort-date";
  var _xaapa = "x-amz-access-point-alias";
  var _xaari = "x-amz-abort-rule-id";
  var _xaas = "x-amz-archive-status";
  var _xabgr = "x-amz-bypass-governance-retention";
  var _xabln = "x-amz-bucket-location-name";
  var _xablt = "x-amz-bucket-location-type";
  var _xabole = "x-amz-bucket-object-lock-enabled";
  var _xabolt = "x-amz-bucket-object-lock-token";
  var _xabr = "x-amz-bucket-region";
  var _xaca = "x-amz-checksum-algorithm";
  var _xacc = "x-amz-checksum-crc32";
  var _xacc_ = "x-amz-checksum-crc32c";
  var _xacm = "x-amz-checksum-mode";
  var _xacrsba = "x-amz-confirm-remove-self-bucket-access";
  var _xacs = "x-amz-checksum-sha1";
  var _xacs_ = "x-amz-checksum-sha256";
  var _xacs__ = "x-amz-copy-source";
  var _xacsim = "x-amz-copy-source-if-match";
  var _xacsims = "x-amz-copy-source-if-modified-since";
  var _xacsinm = "x-amz-copy-source-if-none-match";
  var _xacsius = "x-amz-copy-source-if-unmodified-since";
  var _xacsm = "x-amz-create-session-mode";
  var _xacsr = "x-amz-copy-source-range";
  var _xacssseca = "x-amz-copy-source-server-side-encryption-customer-algorithm";
  var _xacssseck = "x-amz-copy-source-server-side-encryption-customer-key";
  var _xacssseckm = "x-amz-copy-source-server-side-encryption-customer-key-md5";
  var _xacsvi = "x-amz-copy-source-version-id";
  var _xadm = "x-amz-delete-marker";
  var _xae = "x-amz-expiration";
  var _xaebo = "x-amz-expected-bucket-owner";
  var _xafec = "x-amz-fwd-error-code";
  var _xafem = "x-amz-fwd-error-message";
  var _xafhar = "x-amz-fwd-header-accept-ranges";
  var _xafhcc = "x-amz-fwd-header-cache-control";
  var _xafhcd = "x-amz-fwd-header-content-disposition";
  var _xafhce = "x-amz-fwd-header-content-encoding";
  var _xafhcl = "x-amz-fwd-header-content-language";
  var _xafhcr = "x-amz-fwd-header-content-range";
  var _xafhct = "x-amz-fwd-header-content-type";
  var _xafhe = "x-amz-fwd-header-etag";
  var _xafhe_ = "x-amz-fwd-header-expires";
  var _xafhlm = "x-amz-fwd-header-last-modified";
  var _xafhxacc = "x-amz-fwd-header-x-amz-checksum-crc32";
  var _xafhxacc_ = "x-amz-fwd-header-x-amz-checksum-crc32c";
  var _xafhxacs = "x-amz-fwd-header-x-amz-checksum-sha1";
  var _xafhxacs_ = "x-amz-fwd-header-x-amz-checksum-sha256";
  var _xafhxadm = "x-amz-fwd-header-x-amz-delete-marker";
  var _xafhxae = "x-amz-fwd-header-x-amz-expiration";
  var _xafhxamm = "x-amz-fwd-header-x-amz-missing-meta";
  var _xafhxampc = "x-amz-fwd-header-x-amz-mp-parts-count";
  var _xafhxaollh = "x-amz-fwd-header-x-amz-object-lock-legal-hold";
  var _xafhxaolm = "x-amz-fwd-header-x-amz-object-lock-mode";
  var _xafhxaolrud = "x-amz-fwd-header-x-amz-object-lock-retain-until-date";
  var _xafhxar = "x-amz-fwd-header-x-amz-restore";
  var _xafhxarc = "x-amz-fwd-header-x-amz-request-charged";
  var _xafhxars = "x-amz-fwd-header-x-amz-replication-status";
  var _xafhxasc = "x-amz-fwd-header-x-amz-storage-class";
  var _xafhxasse = "x-amz-fwd-header-x-amz-server-side-encryption";
  var _xafhxasseakki = "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id";
  var _xafhxassebke = "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled";
  var _xafhxasseca = "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm";
  var _xafhxasseckm = "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-md5";
  var _xafhxatc = "x-amz-fwd-header-x-amz-tagging-count";
  var _xafhxavi = "x-amz-fwd-header-x-amz-version-id";
  var _xafs = "x-amz-fwd-status";
  var _xagfc = "x-amz-grant-full-control";
  var _xagr = "x-amz-grant-read";
  var _xagra = "x-amz-grant-read-acp";
  var _xagw = "x-amz-grant-write";
  var _xagwa = "x-amz-grant-write-acp";
  var _xam = "x-amz-mfa";
  var _xamd = "x-amz-metadata-directive";
  var _xamm = "x-amz-missing-meta";
  var _xamp = "x-amz-max-parts";
  var _xampc = "x-amz-mp-parts-count";
  var _xaoa = "x-amz-object-attributes";
  var _xaollh = "x-amz-object-lock-legal-hold";
  var _xaolm = "x-amz-object-lock-mode";
  var _xaolrud = "x-amz-object-lock-retain-until-date";
  var _xaoo = "x-amz-object-ownership";
  var _xaooa = "x-amz-optional-object-attributes";
  var _xapnm = "x-amz-part-number-marker";
  var _xar = "x-amz-restore";
  var _xarc = "x-amz-request-charged";
  var _xarop = "x-amz-restore-output-path";
  var _xarp = "x-amz-request-payer";
  var _xarr = "x-amz-request-route";
  var _xars = "x-amz-replication-status";
  var _xart = "x-amz-request-token";
  var _xasc = "x-amz-storage-class";
  var _xasca = "x-amz-sdk-checksum-algorithm";
  var _xasdv = "x-amz-skip-destination-validation";
  var _xasebo = "x-amz-source-expected-bucket-owner";
  var _xasse = "x-amz-server-side-encryption";
  var _xasseakki = "x-amz-server-side-encryption-aws-kms-key-id";
  var _xassebke = "x-amz-server-side-encryption-bucket-key-enabled";
  var _xassec = "x-amz-server-side-encryption-context";
  var _xasseca = "x-amz-server-side-encryption-customer-algorithm";
  var _xasseck = "x-amz-server-side-encryption-customer-key";
  var _xasseckm = "x-amz-server-side-encryption-customer-key-md5";
  var _xat = "x-amz-tagging";
  var _xatc = "x-amz-tagging-count";
  var _xatd = "x-amz-tagging-directive";
  var _xavi = "x-amz-version-id";
  var _xawrl = "x-amz-website-redirect-location";
  var _xi = "x-id";
  var parseBody = __name((streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
      const parser = new import_fast_xml_parser.XMLParser({
        attributeNamePrefix: "",
        htmlEntities: true,
        ignoreAttributes: false,
        ignoreDeclaration: true,
        parseTagValue: false,
        trimValues: false,
        tagValueProcessor: (_, val2) => val2.trim() === "" && val2.includes("\n") ? "" : undefined
      });
      parser.addEntity("#xD", "\r");
      parser.addEntity("#10", "\n");
      const parsedObj = parser.parse(encoded);
      const textNodeName = "#text";
      const key = Object.keys(parsedObj)[0];
      const parsedObjToReturn = parsedObj[key];
      if (parsedObjToReturn[textNodeName]) {
        parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
        delete parsedObjToReturn[textNodeName];
      }
      return (0, import_smithy_client.getValueFromTextNode)(parsedObjToReturn);
    }
    return {};
  }), "parseBody");
  var parseErrorBody = __name(async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    if (value.Error) {
      value.Error.message = value.Error.message ?? value.Error.Message;
    }
    return value;
  }, "parseErrorBody");
  var loadRestXmlErrorCode = __name((output, data) => {
    if ((data == null ? undefined : data.Code) !== undefined) {
      return data.Code;
    }
    if (output.statusCode == 404) {
      return "NotFound";
    }
  }, "loadRestXmlErrorCode");
  var _CreateSessionCommand = class _CreateSessionCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    DisableS3ExpressSessionAuth: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "CreateSession", {}).n("S3Client", "CreateSessionCommand").f(undefined, CreateSessionOutputFilterSensitiveLog).ser(se_CreateSessionCommand).de(de_CreateSessionCommand).build() {
  };
  __name(_CreateSessionCommand, "CreateSessionCommand");
  var CreateSessionCommand = _CreateSessionCommand;
  var import_runtimeConfig = require_runtimeConfig3();
  var import_region_config_resolver = require_dist_cjs51();
  var asPartial = __name((t) => t, "asPartial");
  var resolveRuntimeExtensions = __name((runtimeConfig, extensions) => {
    const extensionConfiguration = {
      ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
      ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
      ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig))
    };
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return {
      ...runtimeConfig,
      ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
      ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
      ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration)
    };
  }, "resolveRuntimeExtensions");
  var _S3Client = class _S3Client2 extends import_smithy_client.Client {
    constructor(...[configuration]) {
      const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
      const _config_1 = resolveClientEndpointParameters(_config_0);
      const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
      const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
      const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
      const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
      const _config_6 = (0, import_middleware_signing.resolveAwsAuthConfig)(_config_5);
      const _config_7 = (0, import_middleware_sdk_s3.resolveS3Config)(_config_6, { session: [() => this, CreateSessionCommand] });
      const _config_8 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_7);
      const _config_9 = (0, import_eventstream_serde_config_resolver.resolveEventStreamSerdeConfig)(_config_8);
      const _config_10 = resolveRuntimeExtensions(_config_9, (configuration == null ? undefined : configuration.extensions) || []);
      super(_config_10);
      this.config = _config_10;
      this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_signing.getAwsAuthPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_sdk_s3.getValidateBucketNamePlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_expect_continue.getAddExpectContinuePlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_sdk_s3.getRegionRedirectMiddlewarePlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_sdk_s3.getS3ExpressPlugin)(this.config));
      this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    }
    destroy() {
      super.destroy();
    }
  };
  __name(_S3Client, "S3Client");
  var S3Client = _S3Client;
  var _AbortMultipartUploadCommand = class _AbortMultipartUploadCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "AbortMultipartUpload", {}).n("S3Client", "AbortMultipartUploadCommand").f(undefined, undefined).ser(se_AbortMultipartUploadCommand).de(de_AbortMultipartUploadCommand).build() {
  };
  __name(_AbortMultipartUploadCommand, "AbortMultipartUploadCommand");
  var AbortMultipartUploadCommand = _AbortMultipartUploadCommand;
  var import_middleware_sdk_s32 = require_dist_cjs24();
  var import_middleware_ssec = require_dist_cjs65();
  var _CompleteMultipartUploadCommand = class _CompleteMultipartUploadCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s32.getThrow200ExceptionsPlugin)(config),
      (0, import_middleware_ssec.getSsecPlugin)(config)
    ];
  }).s("AmazonS3", "CompleteMultipartUpload", {}).n("S3Client", "CompleteMultipartUploadCommand").f(CompleteMultipartUploadRequestFilterSensitiveLog, CompleteMultipartUploadOutputFilterSensitiveLog).ser(se_CompleteMultipartUploadCommand).de(de_CompleteMultipartUploadCommand).build() {
  };
  __name(_CompleteMultipartUploadCommand, "CompleteMultipartUploadCommand");
  var CompleteMultipartUploadCommand = _CompleteMultipartUploadCommand;
  var import_middleware_sdk_s33 = require_dist_cjs24();
  var _CopyObjectCommand = class _CopyObjectCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    DisableS3ExpressSessionAuth: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s33.getThrow200ExceptionsPlugin)(config),
      (0, import_middleware_ssec.getSsecPlugin)(config)
    ];
  }).s("AmazonS3", "CopyObject", {}).n("S3Client", "CopyObjectCommand").f(CopyObjectRequestFilterSensitiveLog, CopyObjectOutputFilterSensitiveLog).ser(se_CopyObjectCommand).de(de_CopyObjectCommand).build() {
  };
  __name(_CopyObjectCommand, "CopyObjectCommand");
  var CopyObjectCommand = _CopyObjectCommand;
  var import_middleware_location_constraint = require_dist_cjs66();
  var _CreateBucketCommand = class _CreateBucketCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    DisableAccessPoints: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_location_constraint.getLocationConstraintPlugin)(config)
    ];
  }).s("AmazonS3", "CreateBucket", {}).n("S3Client", "CreateBucketCommand").f(undefined, undefined).ser(se_CreateBucketCommand).de(de_CreateBucketCommand).build() {
  };
  __name(_CreateBucketCommand, "CreateBucketCommand");
  var CreateBucketCommand = _CreateBucketCommand;
  var _CreateMultipartUploadCommand = class _CreateMultipartUploadCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_ssec.getSsecPlugin)(config)
    ];
  }).s("AmazonS3", "CreateMultipartUpload", {}).n("S3Client", "CreateMultipartUploadCommand").f(CreateMultipartUploadRequestFilterSensitiveLog, CreateMultipartUploadOutputFilterSensitiveLog).ser(se_CreateMultipartUploadCommand).de(de_CreateMultipartUploadCommand).build() {
  };
  __name(_CreateMultipartUploadCommand, "CreateMultipartUploadCommand");
  var CreateMultipartUploadCommand = _CreateMultipartUploadCommand;
  var _DeleteBucketAnalyticsConfigurationCommand = class _DeleteBucketAnalyticsConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketAnalyticsConfiguration", {}).n("S3Client", "DeleteBucketAnalyticsConfigurationCommand").f(undefined, undefined).ser(se_DeleteBucketAnalyticsConfigurationCommand).de(de_DeleteBucketAnalyticsConfigurationCommand).build() {
  };
  __name(_DeleteBucketAnalyticsConfigurationCommand, "DeleteBucketAnalyticsConfigurationCommand");
  var DeleteBucketAnalyticsConfigurationCommand = _DeleteBucketAnalyticsConfigurationCommand;
  var _DeleteBucketCommand = class _DeleteBucketCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucket", {}).n("S3Client", "DeleteBucketCommand").f(undefined, undefined).ser(se_DeleteBucketCommand).de(de_DeleteBucketCommand).build() {
  };
  __name(_DeleteBucketCommand, "DeleteBucketCommand");
  var DeleteBucketCommand = _DeleteBucketCommand;
  var _DeleteBucketCorsCommand = class _DeleteBucketCorsCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketCors", {}).n("S3Client", "DeleteBucketCorsCommand").f(undefined, undefined).ser(se_DeleteBucketCorsCommand).de(de_DeleteBucketCorsCommand).build() {
  };
  __name(_DeleteBucketCorsCommand, "DeleteBucketCorsCommand");
  var DeleteBucketCorsCommand = _DeleteBucketCorsCommand;
  var _DeleteBucketEncryptionCommand = class _DeleteBucketEncryptionCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketEncryption", {}).n("S3Client", "DeleteBucketEncryptionCommand").f(undefined, undefined).ser(se_DeleteBucketEncryptionCommand).de(de_DeleteBucketEncryptionCommand).build() {
  };
  __name(_DeleteBucketEncryptionCommand, "DeleteBucketEncryptionCommand");
  var DeleteBucketEncryptionCommand = _DeleteBucketEncryptionCommand;
  var _DeleteBucketIntelligentTieringConfigurationCommand = class _DeleteBucketIntelligentTieringConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketIntelligentTieringConfiguration", {}).n("S3Client", "DeleteBucketIntelligentTieringConfigurationCommand").f(undefined, undefined).ser(se_DeleteBucketIntelligentTieringConfigurationCommand).de(de_DeleteBucketIntelligentTieringConfigurationCommand).build() {
  };
  __name(_DeleteBucketIntelligentTieringConfigurationCommand, "DeleteBucketIntelligentTieringConfigurationCommand");
  var DeleteBucketIntelligentTieringConfigurationCommand = _DeleteBucketIntelligentTieringConfigurationCommand;
  var _DeleteBucketInventoryConfigurationCommand = class _DeleteBucketInventoryConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketInventoryConfiguration", {}).n("S3Client", "DeleteBucketInventoryConfigurationCommand").f(undefined, undefined).ser(se_DeleteBucketInventoryConfigurationCommand).de(de_DeleteBucketInventoryConfigurationCommand).build() {
  };
  __name(_DeleteBucketInventoryConfigurationCommand, "DeleteBucketInventoryConfigurationCommand");
  var DeleteBucketInventoryConfigurationCommand = _DeleteBucketInventoryConfigurationCommand;
  var _DeleteBucketLifecycleCommand = class _DeleteBucketLifecycleCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketLifecycle", {}).n("S3Client", "DeleteBucketLifecycleCommand").f(undefined, undefined).ser(se_DeleteBucketLifecycleCommand).de(de_DeleteBucketLifecycleCommand).build() {
  };
  __name(_DeleteBucketLifecycleCommand, "DeleteBucketLifecycleCommand");
  var DeleteBucketLifecycleCommand = _DeleteBucketLifecycleCommand;
  var _DeleteBucketMetricsConfigurationCommand = class _DeleteBucketMetricsConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketMetricsConfiguration", {}).n("S3Client", "DeleteBucketMetricsConfigurationCommand").f(undefined, undefined).ser(se_DeleteBucketMetricsConfigurationCommand).de(de_DeleteBucketMetricsConfigurationCommand).build() {
  };
  __name(_DeleteBucketMetricsConfigurationCommand, "DeleteBucketMetricsConfigurationCommand");
  var DeleteBucketMetricsConfigurationCommand = _DeleteBucketMetricsConfigurationCommand;
  var _DeleteBucketOwnershipControlsCommand = class _DeleteBucketOwnershipControlsCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketOwnershipControls", {}).n("S3Client", "DeleteBucketOwnershipControlsCommand").f(undefined, undefined).ser(se_DeleteBucketOwnershipControlsCommand).de(de_DeleteBucketOwnershipControlsCommand).build() {
  };
  __name(_DeleteBucketOwnershipControlsCommand, "DeleteBucketOwnershipControlsCommand");
  var DeleteBucketOwnershipControlsCommand = _DeleteBucketOwnershipControlsCommand;
  var _DeleteBucketPolicyCommand = class _DeleteBucketPolicyCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketPolicy", {}).n("S3Client", "DeleteBucketPolicyCommand").f(undefined, undefined).ser(se_DeleteBucketPolicyCommand).de(de_DeleteBucketPolicyCommand).build() {
  };
  __name(_DeleteBucketPolicyCommand, "DeleteBucketPolicyCommand");
  var DeleteBucketPolicyCommand = _DeleteBucketPolicyCommand;
  var _DeleteBucketReplicationCommand = class _DeleteBucketReplicationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketReplication", {}).n("S3Client", "DeleteBucketReplicationCommand").f(undefined, undefined).ser(se_DeleteBucketReplicationCommand).de(de_DeleteBucketReplicationCommand).build() {
  };
  __name(_DeleteBucketReplicationCommand, "DeleteBucketReplicationCommand");
  var DeleteBucketReplicationCommand = _DeleteBucketReplicationCommand;
  var _DeleteBucketTaggingCommand = class _DeleteBucketTaggingCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketTagging", {}).n("S3Client", "DeleteBucketTaggingCommand").f(undefined, undefined).ser(se_DeleteBucketTaggingCommand).de(de_DeleteBucketTaggingCommand).build() {
  };
  __name(_DeleteBucketTaggingCommand, "DeleteBucketTaggingCommand");
  var DeleteBucketTaggingCommand = _DeleteBucketTaggingCommand;
  var _DeleteBucketWebsiteCommand = class _DeleteBucketWebsiteCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteBucketWebsite", {}).n("S3Client", "DeleteBucketWebsiteCommand").f(undefined, undefined).ser(se_DeleteBucketWebsiteCommand).de(de_DeleteBucketWebsiteCommand).build() {
  };
  __name(_DeleteBucketWebsiteCommand, "DeleteBucketWebsiteCommand");
  var DeleteBucketWebsiteCommand = _DeleteBucketWebsiteCommand;
  var _DeleteObjectCommand = class _DeleteObjectCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteObject", {}).n("S3Client", "DeleteObjectCommand").f(undefined, undefined).ser(se_DeleteObjectCommand).de(de_DeleteObjectCommand).build() {
  };
  __name(_DeleteObjectCommand, "DeleteObjectCommand");
  var DeleteObjectCommand = _DeleteObjectCommand;
  var import_middleware_flexible_checksums = require_dist_cjs67();
  var _DeleteObjectsCommand = class _DeleteObjectsCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "DeleteObjects", {}).n("S3Client", "DeleteObjectsCommand").f(undefined, undefined).ser(se_DeleteObjectsCommand).de(de_DeleteObjectsCommand).build() {
  };
  __name(_DeleteObjectsCommand, "DeleteObjectsCommand");
  var DeleteObjectsCommand = _DeleteObjectsCommand;
  var _DeleteObjectTaggingCommand = class _DeleteObjectTaggingCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeleteObjectTagging", {}).n("S3Client", "DeleteObjectTaggingCommand").f(undefined, undefined).ser(se_DeleteObjectTaggingCommand).de(de_DeleteObjectTaggingCommand).build() {
  };
  __name(_DeleteObjectTaggingCommand, "DeleteObjectTaggingCommand");
  var DeleteObjectTaggingCommand = _DeleteObjectTaggingCommand;
  var _DeletePublicAccessBlockCommand = class _DeletePublicAccessBlockCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "DeletePublicAccessBlock", {}).n("S3Client", "DeletePublicAccessBlockCommand").f(undefined, undefined).ser(se_DeletePublicAccessBlockCommand).de(de_DeletePublicAccessBlockCommand).build() {
  };
  __name(_DeletePublicAccessBlockCommand, "DeletePublicAccessBlockCommand");
  var DeletePublicAccessBlockCommand = _DeletePublicAccessBlockCommand;
  var _GetBucketAccelerateConfigurationCommand = class _GetBucketAccelerateConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketAccelerateConfiguration", {}).n("S3Client", "GetBucketAccelerateConfigurationCommand").f(undefined, undefined).ser(se_GetBucketAccelerateConfigurationCommand).de(de_GetBucketAccelerateConfigurationCommand).build() {
  };
  __name(_GetBucketAccelerateConfigurationCommand, "GetBucketAccelerateConfigurationCommand");
  var GetBucketAccelerateConfigurationCommand = _GetBucketAccelerateConfigurationCommand;
  var _GetBucketAclCommand = class _GetBucketAclCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketAcl", {}).n("S3Client", "GetBucketAclCommand").f(undefined, undefined).ser(se_GetBucketAclCommand).de(de_GetBucketAclCommand).build() {
  };
  __name(_GetBucketAclCommand, "GetBucketAclCommand");
  var GetBucketAclCommand = _GetBucketAclCommand;
  var _GetBucketAnalyticsConfigurationCommand = class _GetBucketAnalyticsConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketAnalyticsConfiguration", {}).n("S3Client", "GetBucketAnalyticsConfigurationCommand").f(undefined, undefined).ser(se_GetBucketAnalyticsConfigurationCommand).de(de_GetBucketAnalyticsConfigurationCommand).build() {
  };
  __name(_GetBucketAnalyticsConfigurationCommand, "GetBucketAnalyticsConfigurationCommand");
  var GetBucketAnalyticsConfigurationCommand = _GetBucketAnalyticsConfigurationCommand;
  var _GetBucketCorsCommand = class _GetBucketCorsCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketCors", {}).n("S3Client", "GetBucketCorsCommand").f(undefined, undefined).ser(se_GetBucketCorsCommand).de(de_GetBucketCorsCommand).build() {
  };
  __name(_GetBucketCorsCommand, "GetBucketCorsCommand");
  var GetBucketCorsCommand = _GetBucketCorsCommand;
  var _GetBucketEncryptionCommand = class _GetBucketEncryptionCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketEncryption", {}).n("S3Client", "GetBucketEncryptionCommand").f(undefined, GetBucketEncryptionOutputFilterSensitiveLog).ser(se_GetBucketEncryptionCommand).de(de_GetBucketEncryptionCommand).build() {
  };
  __name(_GetBucketEncryptionCommand, "GetBucketEncryptionCommand");
  var GetBucketEncryptionCommand = _GetBucketEncryptionCommand;
  var _GetBucketIntelligentTieringConfigurationCommand = class _GetBucketIntelligentTieringConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketIntelligentTieringConfiguration", {}).n("S3Client", "GetBucketIntelligentTieringConfigurationCommand").f(undefined, undefined).ser(se_GetBucketIntelligentTieringConfigurationCommand).de(de_GetBucketIntelligentTieringConfigurationCommand).build() {
  };
  __name(_GetBucketIntelligentTieringConfigurationCommand, "GetBucketIntelligentTieringConfigurationCommand");
  var GetBucketIntelligentTieringConfigurationCommand = _GetBucketIntelligentTieringConfigurationCommand;
  var _GetBucketInventoryConfigurationCommand = class _GetBucketInventoryConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketInventoryConfiguration", {}).n("S3Client", "GetBucketInventoryConfigurationCommand").f(undefined, GetBucketInventoryConfigurationOutputFilterSensitiveLog).ser(se_GetBucketInventoryConfigurationCommand).de(de_GetBucketInventoryConfigurationCommand).build() {
  };
  __name(_GetBucketInventoryConfigurationCommand, "GetBucketInventoryConfigurationCommand");
  var GetBucketInventoryConfigurationCommand = _GetBucketInventoryConfigurationCommand;
  var _GetBucketLifecycleConfigurationCommand = class _GetBucketLifecycleConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketLifecycleConfiguration", {}).n("S3Client", "GetBucketLifecycleConfigurationCommand").f(undefined, undefined).ser(se_GetBucketLifecycleConfigurationCommand).de(de_GetBucketLifecycleConfigurationCommand).build() {
  };
  __name(_GetBucketLifecycleConfigurationCommand, "GetBucketLifecycleConfigurationCommand");
  var GetBucketLifecycleConfigurationCommand = _GetBucketLifecycleConfigurationCommand;
  var _GetBucketLocationCommand = class _GetBucketLocationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketLocation", {}).n("S3Client", "GetBucketLocationCommand").f(undefined, undefined).ser(se_GetBucketLocationCommand).de(de_GetBucketLocationCommand).build() {
  };
  __name(_GetBucketLocationCommand, "GetBucketLocationCommand");
  var GetBucketLocationCommand = _GetBucketLocationCommand;
  var _GetBucketLoggingCommand = class _GetBucketLoggingCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketLogging", {}).n("S3Client", "GetBucketLoggingCommand").f(undefined, undefined).ser(se_GetBucketLoggingCommand).de(de_GetBucketLoggingCommand).build() {
  };
  __name(_GetBucketLoggingCommand, "GetBucketLoggingCommand");
  var GetBucketLoggingCommand = _GetBucketLoggingCommand;
  var _GetBucketMetricsConfigurationCommand = class _GetBucketMetricsConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketMetricsConfiguration", {}).n("S3Client", "GetBucketMetricsConfigurationCommand").f(undefined, undefined).ser(se_GetBucketMetricsConfigurationCommand).de(de_GetBucketMetricsConfigurationCommand).build() {
  };
  __name(_GetBucketMetricsConfigurationCommand, "GetBucketMetricsConfigurationCommand");
  var GetBucketMetricsConfigurationCommand = _GetBucketMetricsConfigurationCommand;
  var _GetBucketNotificationConfigurationCommand = class _GetBucketNotificationConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketNotificationConfiguration", {}).n("S3Client", "GetBucketNotificationConfigurationCommand").f(undefined, undefined).ser(se_GetBucketNotificationConfigurationCommand).de(de_GetBucketNotificationConfigurationCommand).build() {
  };
  __name(_GetBucketNotificationConfigurationCommand, "GetBucketNotificationConfigurationCommand");
  var GetBucketNotificationConfigurationCommand = _GetBucketNotificationConfigurationCommand;
  var _GetBucketOwnershipControlsCommand = class _GetBucketOwnershipControlsCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketOwnershipControls", {}).n("S3Client", "GetBucketOwnershipControlsCommand").f(undefined, undefined).ser(se_GetBucketOwnershipControlsCommand).de(de_GetBucketOwnershipControlsCommand).build() {
  };
  __name(_GetBucketOwnershipControlsCommand, "GetBucketOwnershipControlsCommand");
  var GetBucketOwnershipControlsCommand = _GetBucketOwnershipControlsCommand;
  var _GetBucketPolicyCommand = class _GetBucketPolicyCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketPolicy", {}).n("S3Client", "GetBucketPolicyCommand").f(undefined, undefined).ser(se_GetBucketPolicyCommand).de(de_GetBucketPolicyCommand).build() {
  };
  __name(_GetBucketPolicyCommand, "GetBucketPolicyCommand");
  var GetBucketPolicyCommand = _GetBucketPolicyCommand;
  var _GetBucketPolicyStatusCommand = class _GetBucketPolicyStatusCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketPolicyStatus", {}).n("S3Client", "GetBucketPolicyStatusCommand").f(undefined, undefined).ser(se_GetBucketPolicyStatusCommand).de(de_GetBucketPolicyStatusCommand).build() {
  };
  __name(_GetBucketPolicyStatusCommand, "GetBucketPolicyStatusCommand");
  var GetBucketPolicyStatusCommand = _GetBucketPolicyStatusCommand;
  var _GetBucketReplicationCommand = class _GetBucketReplicationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketReplication", {}).n("S3Client", "GetBucketReplicationCommand").f(undefined, undefined).ser(se_GetBucketReplicationCommand).de(de_GetBucketReplicationCommand).build() {
  };
  __name(_GetBucketReplicationCommand, "GetBucketReplicationCommand");
  var GetBucketReplicationCommand = _GetBucketReplicationCommand;
  var _GetBucketRequestPaymentCommand = class _GetBucketRequestPaymentCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketRequestPayment", {}).n("S3Client", "GetBucketRequestPaymentCommand").f(undefined, undefined).ser(se_GetBucketRequestPaymentCommand).de(de_GetBucketRequestPaymentCommand).build() {
  };
  __name(_GetBucketRequestPaymentCommand, "GetBucketRequestPaymentCommand");
  var GetBucketRequestPaymentCommand = _GetBucketRequestPaymentCommand;
  var _GetBucketTaggingCommand = class _GetBucketTaggingCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketTagging", {}).n("S3Client", "GetBucketTaggingCommand").f(undefined, undefined).ser(se_GetBucketTaggingCommand).de(de_GetBucketTaggingCommand).build() {
  };
  __name(_GetBucketTaggingCommand, "GetBucketTaggingCommand");
  var GetBucketTaggingCommand = _GetBucketTaggingCommand;
  var _GetBucketVersioningCommand = class _GetBucketVersioningCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketVersioning", {}).n("S3Client", "GetBucketVersioningCommand").f(undefined, undefined).ser(se_GetBucketVersioningCommand).de(de_GetBucketVersioningCommand).build() {
  };
  __name(_GetBucketVersioningCommand, "GetBucketVersioningCommand");
  var GetBucketVersioningCommand = _GetBucketVersioningCommand;
  var _GetBucketWebsiteCommand = class _GetBucketWebsiteCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetBucketWebsite", {}).n("S3Client", "GetBucketWebsiteCommand").f(undefined, undefined).ser(se_GetBucketWebsiteCommand).de(de_GetBucketWebsiteCommand).build() {
  };
  __name(_GetBucketWebsiteCommand, "GetBucketWebsiteCommand");
  var GetBucketWebsiteCommand = _GetBucketWebsiteCommand;
  var _GetObjectAclCommand = class _GetObjectAclCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetObjectAcl", {}).n("S3Client", "GetObjectAclCommand").f(undefined, undefined).ser(se_GetObjectAclCommand).de(de_GetObjectAclCommand).build() {
  };
  __name(_GetObjectAclCommand, "GetObjectAclCommand");
  var GetObjectAclCommand = _GetObjectAclCommand;
  var _GetObjectAttributesCommand = class _GetObjectAttributesCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_ssec.getSsecPlugin)(config)
    ];
  }).s("AmazonS3", "GetObjectAttributes", {}).n("S3Client", "GetObjectAttributesCommand").f(GetObjectAttributesRequestFilterSensitiveLog, undefined).ser(se_GetObjectAttributesCommand).de(de_GetObjectAttributesCommand).build() {
  };
  __name(_GetObjectAttributesCommand, "GetObjectAttributesCommand");
  var GetObjectAttributesCommand = _GetObjectAttributesCommand;
  var import_middleware_sdk_s34 = require_dist_cjs24();
  var _GetObjectCommand = class _GetObjectCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_ssec.getSsecPlugin)(config),
      (0, import_middleware_sdk_s34.getS3ExpiresMiddlewarePlugin)(config),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestChecksumRequired: false,
        requestValidationModeMember: "ChecksumMode",
        responseAlgorithms: ["CRC32", "CRC32C", "SHA256", "SHA1"]
      })
    ];
  }).s("AmazonS3", "GetObject", {}).n("S3Client", "GetObjectCommand").f(GetObjectRequestFilterSensitiveLog, GetObjectOutputFilterSensitiveLog).ser(se_GetObjectCommand).de(de_GetObjectCommand).build() {
  };
  __name(_GetObjectCommand, "GetObjectCommand");
  var GetObjectCommand = _GetObjectCommand;
  var _GetObjectLegalHoldCommand = class _GetObjectLegalHoldCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetObjectLegalHold", {}).n("S3Client", "GetObjectLegalHoldCommand").f(undefined, undefined).ser(se_GetObjectLegalHoldCommand).de(de_GetObjectLegalHoldCommand).build() {
  };
  __name(_GetObjectLegalHoldCommand, "GetObjectLegalHoldCommand");
  var GetObjectLegalHoldCommand = _GetObjectLegalHoldCommand;
  var _GetObjectLockConfigurationCommand = class _GetObjectLockConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetObjectLockConfiguration", {}).n("S3Client", "GetObjectLockConfigurationCommand").f(undefined, undefined).ser(se_GetObjectLockConfigurationCommand).de(de_GetObjectLockConfigurationCommand).build() {
  };
  __name(_GetObjectLockConfigurationCommand, "GetObjectLockConfigurationCommand");
  var GetObjectLockConfigurationCommand = _GetObjectLockConfigurationCommand;
  var _GetObjectRetentionCommand = class _GetObjectRetentionCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetObjectRetention", {}).n("S3Client", "GetObjectRetentionCommand").f(undefined, undefined).ser(se_GetObjectRetentionCommand).de(de_GetObjectRetentionCommand).build() {
  };
  __name(_GetObjectRetentionCommand, "GetObjectRetentionCommand");
  var GetObjectRetentionCommand = _GetObjectRetentionCommand;
  var _GetObjectTaggingCommand = class _GetObjectTaggingCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetObjectTagging", {}).n("S3Client", "GetObjectTaggingCommand").f(undefined, undefined).ser(se_GetObjectTaggingCommand).de(de_GetObjectTaggingCommand).build() {
  };
  __name(_GetObjectTaggingCommand, "GetObjectTaggingCommand");
  var GetObjectTaggingCommand = _GetObjectTaggingCommand;
  var _GetObjectTorrentCommand = class _GetObjectTorrentCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetObjectTorrent", {}).n("S3Client", "GetObjectTorrentCommand").f(undefined, GetObjectTorrentOutputFilterSensitiveLog).ser(se_GetObjectTorrentCommand).de(de_GetObjectTorrentCommand).build() {
  };
  __name(_GetObjectTorrentCommand, "GetObjectTorrentCommand");
  var GetObjectTorrentCommand = _GetObjectTorrentCommand;
  var _GetPublicAccessBlockCommand = class _GetPublicAccessBlockCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "GetPublicAccessBlock", {}).n("S3Client", "GetPublicAccessBlockCommand").f(undefined, undefined).ser(se_GetPublicAccessBlockCommand).de(de_GetPublicAccessBlockCommand).build() {
  };
  __name(_GetPublicAccessBlockCommand, "GetPublicAccessBlockCommand");
  var GetPublicAccessBlockCommand = _GetPublicAccessBlockCommand;
  var _HeadBucketCommand = class _HeadBucketCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "HeadBucket", {}).n("S3Client", "HeadBucketCommand").f(undefined, undefined).ser(se_HeadBucketCommand).de(de_HeadBucketCommand).build() {
  };
  __name(_HeadBucketCommand, "HeadBucketCommand");
  var HeadBucketCommand = _HeadBucketCommand;
  var import_middleware_sdk_s35 = require_dist_cjs24();
  var _HeadObjectCommand = class _HeadObjectCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_ssec.getSsecPlugin)(config),
      (0, import_middleware_sdk_s35.getS3ExpiresMiddlewarePlugin)(config)
    ];
  }).s("AmazonS3", "HeadObject", {}).n("S3Client", "HeadObjectCommand").f(HeadObjectRequestFilterSensitiveLog, HeadObjectOutputFilterSensitiveLog).ser(se_HeadObjectCommand).de(de_HeadObjectCommand).build() {
  };
  __name(_HeadObjectCommand, "HeadObjectCommand");
  var HeadObjectCommand = _HeadObjectCommand;
  var _ListBucketAnalyticsConfigurationsCommand = class _ListBucketAnalyticsConfigurationsCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "ListBucketAnalyticsConfigurations", {}).n("S3Client", "ListBucketAnalyticsConfigurationsCommand").f(undefined, undefined).ser(se_ListBucketAnalyticsConfigurationsCommand).de(de_ListBucketAnalyticsConfigurationsCommand).build() {
  };
  __name(_ListBucketAnalyticsConfigurationsCommand, "ListBucketAnalyticsConfigurationsCommand");
  var ListBucketAnalyticsConfigurationsCommand = _ListBucketAnalyticsConfigurationsCommand;
  var _ListBucketIntelligentTieringConfigurationsCommand = class _ListBucketIntelligentTieringConfigurationsCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "ListBucketIntelligentTieringConfigurations", {}).n("S3Client", "ListBucketIntelligentTieringConfigurationsCommand").f(undefined, undefined).ser(se_ListBucketIntelligentTieringConfigurationsCommand).de(de_ListBucketIntelligentTieringConfigurationsCommand).build() {
  };
  __name(_ListBucketIntelligentTieringConfigurationsCommand, "ListBucketIntelligentTieringConfigurationsCommand");
  var ListBucketIntelligentTieringConfigurationsCommand = _ListBucketIntelligentTieringConfigurationsCommand;
  var _ListBucketInventoryConfigurationsCommand = class _ListBucketInventoryConfigurationsCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "ListBucketInventoryConfigurations", {}).n("S3Client", "ListBucketInventoryConfigurationsCommand").f(undefined, ListBucketInventoryConfigurationsOutputFilterSensitiveLog).ser(se_ListBucketInventoryConfigurationsCommand).de(de_ListBucketInventoryConfigurationsCommand).build() {
  };
  __name(_ListBucketInventoryConfigurationsCommand, "ListBucketInventoryConfigurationsCommand");
  var ListBucketInventoryConfigurationsCommand = _ListBucketInventoryConfigurationsCommand;
  var _ListBucketMetricsConfigurationsCommand = class _ListBucketMetricsConfigurationsCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "ListBucketMetricsConfigurations", {}).n("S3Client", "ListBucketMetricsConfigurationsCommand").f(undefined, undefined).ser(se_ListBucketMetricsConfigurationsCommand).de(de_ListBucketMetricsConfigurationsCommand).build() {
  };
  __name(_ListBucketMetricsConfigurationsCommand, "ListBucketMetricsConfigurationsCommand");
  var ListBucketMetricsConfigurationsCommand = _ListBucketMetricsConfigurationsCommand;
  var _ListBucketsCommand = class _ListBucketsCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "ListBuckets", {}).n("S3Client", "ListBucketsCommand").f(undefined, undefined).ser(se_ListBucketsCommand).de(de_ListBucketsCommand).build() {
  };
  __name(_ListBucketsCommand, "ListBucketsCommand");
  var ListBucketsCommand = _ListBucketsCommand;
  var _ListDirectoryBucketsCommand = class _ListDirectoryBucketsCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "ListDirectoryBuckets", {}).n("S3Client", "ListDirectoryBucketsCommand").f(undefined, undefined).ser(se_ListDirectoryBucketsCommand).de(de_ListDirectoryBucketsCommand).build() {
  };
  __name(_ListDirectoryBucketsCommand, "ListDirectoryBucketsCommand");
  var ListDirectoryBucketsCommand = _ListDirectoryBucketsCommand;
  var _ListMultipartUploadsCommand = class _ListMultipartUploadsCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Prefix: { type: "contextParams", name: "Prefix" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "ListMultipartUploads", {}).n("S3Client", "ListMultipartUploadsCommand").f(undefined, undefined).ser(se_ListMultipartUploadsCommand).de(de_ListMultipartUploadsCommand).build() {
  };
  __name(_ListMultipartUploadsCommand, "ListMultipartUploadsCommand");
  var ListMultipartUploadsCommand = _ListMultipartUploadsCommand;
  var _ListObjectsCommand = class _ListObjectsCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Prefix: { type: "contextParams", name: "Prefix" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "ListObjects", {}).n("S3Client", "ListObjectsCommand").f(undefined, undefined).ser(se_ListObjectsCommand).de(de_ListObjectsCommand).build() {
  };
  __name(_ListObjectsCommand, "ListObjectsCommand");
  var ListObjectsCommand = _ListObjectsCommand;
  var _ListObjectsV2Command = class _ListObjectsV2Command2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Prefix: { type: "contextParams", name: "Prefix" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "ListObjectsV2", {}).n("S3Client", "ListObjectsV2Command").f(undefined, undefined).ser(se_ListObjectsV2Command).de(de_ListObjectsV2Command).build() {
  };
  __name(_ListObjectsV2Command, "ListObjectsV2Command");
  var ListObjectsV2Command = _ListObjectsV2Command;
  var _ListObjectVersionsCommand = class _ListObjectVersionsCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Prefix: { type: "contextParams", name: "Prefix" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "ListObjectVersions", {}).n("S3Client", "ListObjectVersionsCommand").f(undefined, undefined).ser(se_ListObjectVersionsCommand).de(de_ListObjectVersionsCommand).build() {
  };
  __name(_ListObjectVersionsCommand, "ListObjectVersionsCommand");
  var ListObjectVersionsCommand = _ListObjectVersionsCommand;
  var _ListPartsCommand = class _ListPartsCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_ssec.getSsecPlugin)(config)
    ];
  }).s("AmazonS3", "ListParts", {}).n("S3Client", "ListPartsCommand").f(ListPartsRequestFilterSensitiveLog, undefined).ser(se_ListPartsCommand).de(de_ListPartsCommand).build() {
  };
  __name(_ListPartsCommand, "ListPartsCommand");
  var ListPartsCommand = _ListPartsCommand;
  var _PutBucketAccelerateConfigurationCommand = class _PutBucketAccelerateConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: false
      })
    ];
  }).s("AmazonS3", "PutBucketAccelerateConfiguration", {}).n("S3Client", "PutBucketAccelerateConfigurationCommand").f(undefined, undefined).ser(se_PutBucketAccelerateConfigurationCommand).de(de_PutBucketAccelerateConfigurationCommand).build() {
  };
  __name(_PutBucketAccelerateConfigurationCommand, "PutBucketAccelerateConfigurationCommand");
  var PutBucketAccelerateConfigurationCommand = _PutBucketAccelerateConfigurationCommand;
  var _PutBucketAclCommand = class _PutBucketAclCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketAcl", {}).n("S3Client", "PutBucketAclCommand").f(undefined, undefined).ser(se_PutBucketAclCommand).de(de_PutBucketAclCommand).build() {
  };
  __name(_PutBucketAclCommand, "PutBucketAclCommand");
  var PutBucketAclCommand = _PutBucketAclCommand;
  var _PutBucketAnalyticsConfigurationCommand = class _PutBucketAnalyticsConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "PutBucketAnalyticsConfiguration", {}).n("S3Client", "PutBucketAnalyticsConfigurationCommand").f(undefined, undefined).ser(se_PutBucketAnalyticsConfigurationCommand).de(de_PutBucketAnalyticsConfigurationCommand).build() {
  };
  __name(_PutBucketAnalyticsConfigurationCommand, "PutBucketAnalyticsConfigurationCommand");
  var PutBucketAnalyticsConfigurationCommand = _PutBucketAnalyticsConfigurationCommand;
  var _PutBucketCorsCommand = class _PutBucketCorsCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketCors", {}).n("S3Client", "PutBucketCorsCommand").f(undefined, undefined).ser(se_PutBucketCorsCommand).de(de_PutBucketCorsCommand).build() {
  };
  __name(_PutBucketCorsCommand, "PutBucketCorsCommand");
  var PutBucketCorsCommand = _PutBucketCorsCommand;
  var _PutBucketEncryptionCommand = class _PutBucketEncryptionCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketEncryption", {}).n("S3Client", "PutBucketEncryptionCommand").f(PutBucketEncryptionRequestFilterSensitiveLog, undefined).ser(se_PutBucketEncryptionCommand).de(de_PutBucketEncryptionCommand).build() {
  };
  __name(_PutBucketEncryptionCommand, "PutBucketEncryptionCommand");
  var PutBucketEncryptionCommand = _PutBucketEncryptionCommand;
  var _PutBucketIntelligentTieringConfigurationCommand = class _PutBucketIntelligentTieringConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "PutBucketIntelligentTieringConfiguration", {}).n("S3Client", "PutBucketIntelligentTieringConfigurationCommand").f(undefined, undefined).ser(se_PutBucketIntelligentTieringConfigurationCommand).de(de_PutBucketIntelligentTieringConfigurationCommand).build() {
  };
  __name(_PutBucketIntelligentTieringConfigurationCommand, "PutBucketIntelligentTieringConfigurationCommand");
  var PutBucketIntelligentTieringConfigurationCommand = _PutBucketIntelligentTieringConfigurationCommand;
  var _PutBucketInventoryConfigurationCommand = class _PutBucketInventoryConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "PutBucketInventoryConfiguration", {}).n("S3Client", "PutBucketInventoryConfigurationCommand").f(PutBucketInventoryConfigurationRequestFilterSensitiveLog, undefined).ser(se_PutBucketInventoryConfigurationCommand).de(de_PutBucketInventoryConfigurationCommand).build() {
  };
  __name(_PutBucketInventoryConfigurationCommand, "PutBucketInventoryConfigurationCommand");
  var PutBucketInventoryConfigurationCommand = _PutBucketInventoryConfigurationCommand;
  var _PutBucketLifecycleConfigurationCommand = class _PutBucketLifecycleConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketLifecycleConfiguration", {}).n("S3Client", "PutBucketLifecycleConfigurationCommand").f(undefined, undefined).ser(se_PutBucketLifecycleConfigurationCommand).de(de_PutBucketLifecycleConfigurationCommand).build() {
  };
  __name(_PutBucketLifecycleConfigurationCommand, "PutBucketLifecycleConfigurationCommand");
  var PutBucketLifecycleConfigurationCommand = _PutBucketLifecycleConfigurationCommand;
  var _PutBucketLoggingCommand = class _PutBucketLoggingCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketLogging", {}).n("S3Client", "PutBucketLoggingCommand").f(undefined, undefined).ser(se_PutBucketLoggingCommand).de(de_PutBucketLoggingCommand).build() {
  };
  __name(_PutBucketLoggingCommand, "PutBucketLoggingCommand");
  var PutBucketLoggingCommand = _PutBucketLoggingCommand;
  var _PutBucketMetricsConfigurationCommand = class _PutBucketMetricsConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "PutBucketMetricsConfiguration", {}).n("S3Client", "PutBucketMetricsConfigurationCommand").f(undefined, undefined).ser(se_PutBucketMetricsConfigurationCommand).de(de_PutBucketMetricsConfigurationCommand).build() {
  };
  __name(_PutBucketMetricsConfigurationCommand, "PutBucketMetricsConfigurationCommand");
  var PutBucketMetricsConfigurationCommand = _PutBucketMetricsConfigurationCommand;
  var _PutBucketNotificationConfigurationCommand = class _PutBucketNotificationConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "PutBucketNotificationConfiguration", {}).n("S3Client", "PutBucketNotificationConfigurationCommand").f(undefined, undefined).ser(se_PutBucketNotificationConfigurationCommand).de(de_PutBucketNotificationConfigurationCommand).build() {
  };
  __name(_PutBucketNotificationConfigurationCommand, "PutBucketNotificationConfigurationCommand");
  var PutBucketNotificationConfigurationCommand = _PutBucketNotificationConfigurationCommand;
  var _PutBucketOwnershipControlsCommand = class _PutBucketOwnershipControlsCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, { input: this.input, requestChecksumRequired: true })
    ];
  }).s("AmazonS3", "PutBucketOwnershipControls", {}).n("S3Client", "PutBucketOwnershipControlsCommand").f(undefined, undefined).ser(se_PutBucketOwnershipControlsCommand).de(de_PutBucketOwnershipControlsCommand).build() {
  };
  __name(_PutBucketOwnershipControlsCommand, "PutBucketOwnershipControlsCommand");
  var PutBucketOwnershipControlsCommand = _PutBucketOwnershipControlsCommand;
  var _PutBucketPolicyCommand = class _PutBucketPolicyCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketPolicy", {}).n("S3Client", "PutBucketPolicyCommand").f(undefined, undefined).ser(se_PutBucketPolicyCommand).de(de_PutBucketPolicyCommand).build() {
  };
  __name(_PutBucketPolicyCommand, "PutBucketPolicyCommand");
  var PutBucketPolicyCommand = _PutBucketPolicyCommand;
  var _PutBucketReplicationCommand = class _PutBucketReplicationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketReplication", {}).n("S3Client", "PutBucketReplicationCommand").f(undefined, undefined).ser(se_PutBucketReplicationCommand).de(de_PutBucketReplicationCommand).build() {
  };
  __name(_PutBucketReplicationCommand, "PutBucketReplicationCommand");
  var PutBucketReplicationCommand = _PutBucketReplicationCommand;
  var _PutBucketRequestPaymentCommand = class _PutBucketRequestPaymentCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketRequestPayment", {}).n("S3Client", "PutBucketRequestPaymentCommand").f(undefined, undefined).ser(se_PutBucketRequestPaymentCommand).de(de_PutBucketRequestPaymentCommand).build() {
  };
  __name(_PutBucketRequestPaymentCommand, "PutBucketRequestPaymentCommand");
  var PutBucketRequestPaymentCommand = _PutBucketRequestPaymentCommand;
  var _PutBucketTaggingCommand = class _PutBucketTaggingCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketTagging", {}).n("S3Client", "PutBucketTaggingCommand").f(undefined, undefined).ser(se_PutBucketTaggingCommand).de(de_PutBucketTaggingCommand).build() {
  };
  __name(_PutBucketTaggingCommand, "PutBucketTaggingCommand");
  var PutBucketTaggingCommand = _PutBucketTaggingCommand;
  var _PutBucketVersioningCommand = class _PutBucketVersioningCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketVersioning", {}).n("S3Client", "PutBucketVersioningCommand").f(undefined, undefined).ser(se_PutBucketVersioningCommand).de(de_PutBucketVersioningCommand).build() {
  };
  __name(_PutBucketVersioningCommand, "PutBucketVersioningCommand");
  var PutBucketVersioningCommand = _PutBucketVersioningCommand;
  var _PutBucketWebsiteCommand = class _PutBucketWebsiteCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutBucketWebsite", {}).n("S3Client", "PutBucketWebsiteCommand").f(undefined, undefined).ser(se_PutBucketWebsiteCommand).de(de_PutBucketWebsiteCommand).build() {
  };
  __name(_PutBucketWebsiteCommand, "PutBucketWebsiteCommand");
  var PutBucketWebsiteCommand = _PutBucketWebsiteCommand;
  var _PutObjectAclCommand = class _PutObjectAclCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutObjectAcl", {}).n("S3Client", "PutObjectAclCommand").f(undefined, undefined).ser(se_PutObjectAclCommand).de(de_PutObjectAclCommand).build() {
  };
  __name(_PutObjectAclCommand, "PutObjectAclCommand");
  var PutObjectAclCommand = _PutObjectAclCommand;
  var import_middleware_sdk_s36 = require_dist_cjs24();
  var _PutObjectCommand = class _PutObjectCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s36.getCheckContentLengthHeaderPlugin)(config),
      (0, import_middleware_ssec.getSsecPlugin)(config),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: false
      })
    ];
  }).s("AmazonS3", "PutObject", {}).n("S3Client", "PutObjectCommand").f(PutObjectRequestFilterSensitiveLog, PutObjectOutputFilterSensitiveLog).ser(se_PutObjectCommand).de(de_PutObjectCommand).build() {
  };
  __name(_PutObjectCommand, "PutObjectCommand");
  var PutObjectCommand = _PutObjectCommand;
  var _PutObjectLegalHoldCommand = class _PutObjectLegalHoldCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutObjectLegalHold", {}).n("S3Client", "PutObjectLegalHoldCommand").f(undefined, undefined).ser(se_PutObjectLegalHoldCommand).de(de_PutObjectLegalHoldCommand).build() {
  };
  __name(_PutObjectLegalHoldCommand, "PutObjectLegalHoldCommand");
  var PutObjectLegalHoldCommand = _PutObjectLegalHoldCommand;
  var _PutObjectLockConfigurationCommand = class _PutObjectLockConfigurationCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutObjectLockConfiguration", {}).n("S3Client", "PutObjectLockConfigurationCommand").f(undefined, undefined).ser(se_PutObjectLockConfigurationCommand).de(de_PutObjectLockConfigurationCommand).build() {
  };
  __name(_PutObjectLockConfigurationCommand, "PutObjectLockConfigurationCommand");
  var PutObjectLockConfigurationCommand = _PutObjectLockConfigurationCommand;
  var _PutObjectRetentionCommand = class _PutObjectRetentionCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutObjectRetention", {}).n("S3Client", "PutObjectRetentionCommand").f(undefined, undefined).ser(se_PutObjectRetentionCommand).de(de_PutObjectRetentionCommand).build() {
  };
  __name(_PutObjectRetentionCommand, "PutObjectRetentionCommand");
  var PutObjectRetentionCommand = _PutObjectRetentionCommand;
  var _PutObjectTaggingCommand = class _PutObjectTaggingCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutObjectTagging", {}).n("S3Client", "PutObjectTaggingCommand").f(undefined, undefined).ser(se_PutObjectTaggingCommand).de(de_PutObjectTaggingCommand).build() {
  };
  __name(_PutObjectTaggingCommand, "PutObjectTaggingCommand");
  var PutObjectTaggingCommand = _PutObjectTaggingCommand;
  var _PutPublicAccessBlockCommand = class _PutPublicAccessBlockCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      })
    ];
  }).s("AmazonS3", "PutPublicAccessBlock", {}).n("S3Client", "PutPublicAccessBlockCommand").f(undefined, undefined).ser(se_PutPublicAccessBlockCommand).de(de_PutPublicAccessBlockCommand).build() {
  };
  __name(_PutPublicAccessBlockCommand, "PutPublicAccessBlockCommand");
  var PutPublicAccessBlockCommand = _PutPublicAccessBlockCommand;
  var _RestoreObjectCommand = class _RestoreObjectCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: false
      })
    ];
  }).s("AmazonS3", "RestoreObject", {}).n("S3Client", "RestoreObjectCommand").f(RestoreObjectRequestFilterSensitiveLog, undefined).ser(se_RestoreObjectCommand).de(de_RestoreObjectCommand).build() {
  };
  __name(_RestoreObjectCommand, "RestoreObjectCommand");
  var RestoreObjectCommand = _RestoreObjectCommand;
  var _SelectObjectContentCommand = class _SelectObjectContentCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_ssec.getSsecPlugin)(config)
    ];
  }).s("AmazonS3", "SelectObjectContent", {
    eventStream: {
      output: true
    }
  }).n("S3Client", "SelectObjectContentCommand").f(SelectObjectContentRequestFilterSensitiveLog, SelectObjectContentOutputFilterSensitiveLog).ser(se_SelectObjectContentCommand).de(de_SelectObjectContentCommand).build() {
  };
  __name(_SelectObjectContentCommand, "SelectObjectContentCommand");
  var SelectObjectContentCommand = _SelectObjectContentCommand;
  var _UploadPartCommand = class _UploadPartCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    Bucket: { type: "contextParams", name: "Bucket" },
    Key: { type: "contextParams", name: "Key" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_ssec.getSsecPlugin)(config),
      (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: false
      })
    ];
  }).s("AmazonS3", "UploadPart", {}).n("S3Client", "UploadPartCommand").f(UploadPartRequestFilterSensitiveLog, UploadPartOutputFilterSensitiveLog).ser(se_UploadPartCommand).de(de_UploadPartCommand).build() {
  };
  __name(_UploadPartCommand, "UploadPartCommand");
  var UploadPartCommand = _UploadPartCommand;
  var import_middleware_sdk_s37 = require_dist_cjs24();
  var _UploadPartCopyCommand = class _UploadPartCopyCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    DisableS3ExpressSessionAuth: { type: "staticContextParams", value: true },
    Bucket: { type: "contextParams", name: "Bucket" }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
      (0, import_middleware_sdk_s37.getThrow200ExceptionsPlugin)(config),
      (0, import_middleware_ssec.getSsecPlugin)(config)
    ];
  }).s("AmazonS3", "UploadPartCopy", {}).n("S3Client", "UploadPartCopyCommand").f(UploadPartCopyRequestFilterSensitiveLog, UploadPartCopyOutputFilterSensitiveLog).ser(se_UploadPartCopyCommand).de(de_UploadPartCopyCommand).build() {
  };
  __name(_UploadPartCopyCommand, "UploadPartCopyCommand");
  var UploadPartCopyCommand = _UploadPartCopyCommand;
  var _WriteGetObjectResponseCommand = class _WriteGetObjectResponseCommand2 extends import_smithy_client.Command.classBuilder().ep({
    ...commonParams,
    UseObjectLambdaEndpoint: { type: "staticContextParams", value: true }
  }).m(function(Command, cs, config, o) {
    return [
      (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
      (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
    ];
  }).s("AmazonS3", "WriteGetObjectResponse", {}).n("S3Client", "WriteGetObjectResponseCommand").f(WriteGetObjectResponseRequestFilterSensitiveLog, undefined).ser(se_WriteGetObjectResponseCommand).de(de_WriteGetObjectResponseCommand).build() {
  };
  __name(_WriteGetObjectResponseCommand, "WriteGetObjectResponseCommand");
  var WriteGetObjectResponseCommand = _WriteGetObjectResponseCommand;
  var commands = {
    AbortMultipartUploadCommand,
    CompleteMultipartUploadCommand,
    CopyObjectCommand,
    CreateBucketCommand,
    CreateMultipartUploadCommand,
    CreateSessionCommand,
    DeleteBucketCommand,
    DeleteBucketAnalyticsConfigurationCommand,
    DeleteBucketCorsCommand,
    DeleteBucketEncryptionCommand,
    DeleteBucketIntelligentTieringConfigurationCommand,
    DeleteBucketInventoryConfigurationCommand,
    DeleteBucketLifecycleCommand,
    DeleteBucketMetricsConfigurationCommand,
    DeleteBucketOwnershipControlsCommand,
    DeleteBucketPolicyCommand,
    DeleteBucketReplicationCommand,
    DeleteBucketTaggingCommand,
    DeleteBucketWebsiteCommand,
    DeleteObjectCommand,
    DeleteObjectsCommand,
    DeleteObjectTaggingCommand,
    DeletePublicAccessBlockCommand,
    GetBucketAccelerateConfigurationCommand,
    GetBucketAclCommand,
    GetBucketAnalyticsConfigurationCommand,
    GetBucketCorsCommand,
    GetBucketEncryptionCommand,
    GetBucketIntelligentTieringConfigurationCommand,
    GetBucketInventoryConfigurationCommand,
    GetBucketLifecycleConfigurationCommand,
    GetBucketLocationCommand,
    GetBucketLoggingCommand,
    GetBucketMetricsConfigurationCommand,
    GetBucketNotificationConfigurationCommand,
    GetBucketOwnershipControlsCommand,
    GetBucketPolicyCommand,
    GetBucketPolicyStatusCommand,
    GetBucketReplicationCommand,
    GetBucketRequestPaymentCommand,
    GetBucketTaggingCommand,
    GetBucketVersioningCommand,
    GetBucketWebsiteCommand,
    GetObjectCommand,
    GetObjectAclCommand,
    GetObjectAttributesCommand,
    GetObjectLegalHoldCommand,
    GetObjectLockConfigurationCommand,
    GetObjectRetentionCommand,
    GetObjectTaggingCommand,
    GetObjectTorrentCommand,
    GetPublicAccessBlockCommand,
    HeadBucketCommand,
    HeadObjectCommand,
    ListBucketAnalyticsConfigurationsCommand,
    ListBucketIntelligentTieringConfigurationsCommand,
    ListBucketInventoryConfigurationsCommand,
    ListBucketMetricsConfigurationsCommand,
    ListBucketsCommand,
    ListDirectoryBucketsCommand,
    ListMultipartUploadsCommand,
    ListObjectsCommand,
    ListObjectsV2Command,
    ListObjectVersionsCommand,
    ListPartsCommand,
    PutBucketAccelerateConfigurationCommand,
    PutBucketAclCommand,
    PutBucketAnalyticsConfigurationCommand,
    PutBucketCorsCommand,
    PutBucketEncryptionCommand,
    PutBucketIntelligentTieringConfigurationCommand,
    PutBucketInventoryConfigurationCommand,
    PutBucketLifecycleConfigurationCommand,
    PutBucketLoggingCommand,
    PutBucketMetricsConfigurationCommand,
    PutBucketNotificationConfigurationCommand,
    PutBucketOwnershipControlsCommand,
    PutBucketPolicyCommand,
    PutBucketReplicationCommand,
    PutBucketRequestPaymentCommand,
    PutBucketTaggingCommand,
    PutBucketVersioningCommand,
    PutBucketWebsiteCommand,
    PutObjectCommand,
    PutObjectAclCommand,
    PutObjectLegalHoldCommand,
    PutObjectLockConfigurationCommand,
    PutObjectRetentionCommand,
    PutObjectTaggingCommand,
    PutPublicAccessBlockCommand,
    RestoreObjectCommand,
    SelectObjectContentCommand,
    UploadPartCommand,
    UploadPartCopyCommand,
    WriteGetObjectResponseCommand
  };
  var _S3 = class _S32 extends S3Client {
  };
  __name(_S3, "S3");
  var S3 = _S3;
  (0, import_smithy_client.createAggregatedClient)(commands, S3);
  var paginateListDirectoryBuckets = (0, import_core.createPaginator)(S3Client, ListDirectoryBucketsCommand, "ContinuationToken", "ContinuationToken", "MaxDirectoryBuckets");
  var paginateListObjectsV2 = (0, import_core.createPaginator)(S3Client, ListObjectsV2Command, "ContinuationToken", "NextContinuationToken", "MaxKeys");
  var paginateListParts = (0, import_core.createPaginator)(S3Client, ListPartsCommand, "PartNumberMarker", "NextPartNumberMarker", "MaxParts");
  var import_util_waiter = require_dist_cjs68();
  var checkState = __name(async (client, input) => {
    let reason;
    try {
      const result = await client.send(new HeadBucketCommand(input));
      reason = result;
      return { state: import_util_waiter.WaiterState.SUCCESS, reason };
    } catch (exception) {
      reason = exception;
      if (exception.name && exception.name == "NotFound") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    }
    return { state: import_util_waiter.WaiterState.RETRY, reason };
  }, "checkState");
  var waitForBucketExists = __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
  }, "waitForBucketExists");
  var waitUntilBucketExists = __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    return (0, import_util_waiter.checkExceptions)(result);
  }, "waitUntilBucketExists");
  var checkState2 = __name(async (client, input) => {
    let reason;
    try {
      const result = await client.send(new HeadBucketCommand(input));
      reason = result;
    } catch (exception) {
      reason = exception;
      if (exception.name && exception.name == "NotFound") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    }
    return { state: import_util_waiter.WaiterState.RETRY, reason };
  }, "checkState");
  var waitForBucketNotExists = __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
  }, "waitForBucketNotExists");
  var waitUntilBucketNotExists = __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
    return (0, import_util_waiter.checkExceptions)(result);
  }, "waitUntilBucketNotExists");
  var checkState3 = __name(async (client, input) => {
    let reason;
    try {
      const result = await client.send(new HeadObjectCommand(input));
      reason = result;
      return { state: import_util_waiter.WaiterState.SUCCESS, reason };
    } catch (exception) {
      reason = exception;
      if (exception.name && exception.name == "NotFound") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    }
    return { state: import_util_waiter.WaiterState.RETRY, reason };
  }, "checkState");
  var waitForObjectExists = __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
  }, "waitForObjectExists");
  var waitUntilObjectExists = __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
    return (0, import_util_waiter.checkExceptions)(result);
  }, "waitUntilObjectExists");
  var checkState4 = __name(async (client, input) => {
    let reason;
    try {
      const result = await client.send(new HeadObjectCommand(input));
      reason = result;
    } catch (exception) {
      reason = exception;
      if (exception.name && exception.name == "NotFound") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    }
    return { state: import_util_waiter.WaiterState.RETRY, reason };
  }, "checkState");
  var waitForObjectNotExists = __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
  }, "waitForObjectNotExists");
  var waitUntilObjectNotExists = __name(async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
    return (0, import_util_waiter.checkExceptions)(result);
  }, "waitUntilObjectNotExists");
  var import_util_endpoints = require_dist_cjs28();
});

// node_modules/@aws-sdk/client-
var exports_task_parameters = {};
__export(exports_task_parameters, {
  PORT: () => {
    {
      return PORT;
    }
  },
  LOCAL_ENVIRONMENT: () => {
    {
      return LOCAL_ENVIRONMENT;
    }
  },
  IMAGE_STORE_BUCKET: () => {
    {
      return IMAGE_STORE_BUCKET;
    }
  },
  AWS_REGION: () => {
    {
      return AWS_REGION;
    }
  }
});
var IMAGE_STORE_BUCKET = process.env.IMAGE_STORE_BUCKET;
var LOCAL_ENVIRONMENT = process.env.ENVIRONMENT === "local";
var AWS_REGION = process.env.AWS_REGION;
var PORT = process.env.PORT;
// node_modules/@aws-sd
var import_pino = __toESM(require_pino(), 1);
var logger = import_pino.default({
  formatters: {
    level: (label) => ({ level: label })
  }
});
// node_modules/@aws-sdk/c
var ImageTypes;
(function(ImageTypes2) {
  ImageTypes2["avif"] = "avif";
  ImageTypes2["dz"] = "dz";
  ImageTypes2["fits"] = "fits";
  ImageTypes2["gif"] = "gif";
  ImageTypes2["heif"] = "heif";
  ImageTypes2["input"] = "input";
  ImageTypes2["jpeg"] = "jpeg";
  ImageTypes2["jpg"] = "jpg";
  ImageTypes2["jp2"] = "jp2";
  ImageTypes2["jxl"] = "jxl";
  ImageTypes2["magick"] = "magick";
  ImageTypes2["openslide"] = "openslide";
  ImageTypes2["pdf"] = "pdf";
  ImageTypes2["png"] = "png";
  ImageTypes2["ppm"] = "ppm";
  ImageTypes2["raw"] = "raw";
  ImageTypes2["svg"] = "svg";
  ImageTypes2["svg+xml"] = "svg+xml";
  ImageTypes2["tiff"] = "tiff";
  ImageTypes2["tif"] = "tif";
  ImageTypes2["v"] = "v";
  ImageTypes2["webp"] = "webp";
})(ImageTypes || (ImageTypes = {}));
// node_modules/@aws-sdk/client-sso
import sharp from "sharp";
var optimiseImage = async (image, imageType, width, quality, format) => {
  if (imageType === ImageTypes.svg || imageType === ImageTypes["svg+xml"]) {
    return {
      image,
      imageType
    };
  }
  const pipe = sharp(image);
  if (width > 0) {
    pipe.resize(width, undefined, {
      withoutEnlargement: true
    });
  }
  if (imageType === ImageTypes.gif) {
    return {
      image: await pipe.toBuffer(),
      imageType
    };
  }
  logger.info({
    message: `converting image to format: ${format}`
  });
  pipe.toFormat(format, {
    quality
  });
  return {
    image: await pipe.toBuffer(),
    imageType: format
  };
};
// node_modules/@aws-sdk/clie
var detectImageFormat = (buffer, fallbackContentType) => {
  if ([255, 216, 255].every((b, i) => buffer[i] === b)) {
    return ImageTypes.jpeg;
  }
  if ([137, 80, 78, 71, 13, 10, 26, 10].every((b, i) => buffer[i] === b)) {
    return ImageTypes.png;
  }
  if ([71, 73, 70, 56].every((b, i) => buffer[i] === b)) {
    return ImageTypes.gif;
  }
  if ([82, 73, 70, 70, 0, 0, 0, 0, 87, 69, 66, 80].every((b, i) => !b || buffer[i] === b)) {
    return ImageTypes.webp;
  }
  if ([60, 63, 120, 109, 108].every((b, i) => buffer[i] === b)) {
    return ImageTypes["svg+xml"];
  }
  if ([0, 0, 0, 0, 102, 116, 121, 112, 97, 118, 105, 102].every((b, i) => !b || buffer[i] === b)) {
    return ImageTypes.avif;
  }
  if (Object.values(ImageTypes).includes(fallbackContentType)) {
    return fallbackContentType;
  }
  return;
};
// node_modules/@aws-sdk/client-sso
var exports_image_request = {};
__export(exports_image_request, {
  handle: () => {
    {
      return handle;
    }
  }
});

// node_modules/@aws-sdk
var exports_image2 = {};
__export(exports_image2, {
  getOptimisedImage: () => {
    {
      return getOptimisedImage;
    }
  }
});

// node_modules/@aws-sdk/cli
var exports_image = {};
__export(exports_image, {
  get: () => {
    {
      return get;
    }
  }
});
var client_s3 = __toESM(require_dist_cjs69(), 1);
var s3Client = new client_s3.S3Client({
  region: exports_task_parameters.AWS_REGION
});
var get = async (imageKey) => {
  return s3Client.send(new client_s3.GetObjectCommand({
    Bucket: exports_task_parameters.IMAGE_STORE_BUCKET,
    Key: imageKey
  })).catch((error) => {
    logger.error({
      message: "error getting image from image store",
      error,
      imageKey
    });
    return null;
  });
};
// node_modules/@aws-sdk
var getOptimisedImage = async (imagePath, width, quality, format) => {
  const imageKey = imagePath.slice(1);
  logger.info({
    message: "getting optimised image",
    imagePath,
    width,
    quality,
    imageKey
  });
  const originalImage = await exports_image.get(imageKey);
  if (originalImage?.Body === undefined) {
    logger.error({
      message: "unable to find image"
    });
    return;
  }
  logger.info({
    message: "fetched image from source"
  });
  const imageBuffer = Buffer.from(await originalImage.Body.transformToByteArray());
  logger.info({
    message: "generated-image-buffer"
  });
  const contentType = originalImage.ContentType?.split("image/")[1];
  const originalImageType = detectImageFormat(imageBuffer, contentType);
  logger.info({
    message: "determined image metadata",
    contentType,
    originalImageType
  });
  if (originalImageType === undefined) {
    logger.error({
      message: "unable to determine image type"
    });
    return {
      image: imageBuffer,
      imageType: contentType ?? ""
    };
  }
  try {
    const { image, imageType } = await optimiseImage(imageBuffer, originalImageType, width, quality, format);
    logger.info({
      message: "optimised image"
    });
    return {
      image,
      imageType,
      cacheControl: originalImage.CacheControl,
      etag: originalImage.ETag
    };
  } catch (error) {
    logger.error({
      message: "failed to optimise image",
      error
    });
  }
  return {
    image: imageBuffer,
    imageType: originalImageType,
    cacheControl: originalImage.CacheControl,
    etag: originalImage.ETag
  };
};
// node_modules/@aws-sdk/client-sso
var bestAcceptedFormat = (acceptHeader) => {
  if (acceptHeader === undefined) {
    logger.info({
      message: "no accept header"
    });
    return ImageTypes.webp;
  }
  const headerValues = [];
  acceptHeader.forEach(({ value }) => {
    if (value.includes(",")) {
      const temp = value.split(",");
      temp.forEach((t) => {
        headerValues.push(t.trim());
      });
    } else
      headerValues.push(value);
  });
  if (headerValues.includes("*/*") || headerValues.includes("image/avif")) {
    logger.info({
      message: `best format is: ${ImageTypes.avif}`
    });
    return ImageTypes.avif;
  } else if (headerValues.includes("image/webp")) {
    logger.info({
      message: `best format is: ${ImageTypes.webp}`
    });
    return ImageTypes.webp;
  } else if (headerValues.includes("image/png")) {
    logger.info({
      message: `best format is: ${ImageTypes.png}`
    });
    return ImageTypes.png;
  } else if (headerValues.includes("image/jpeg")) {
    logger.info({
      message: `best format is: ${ImageTypes.jpeg}`
    });
    return ImageTypes.jpeg;
  } else if (headerValues.includes("image/jpg")) {
    logger.info({
      message: `best format is: ${ImageTypes.jpg}`
    });
    return ImageTypes.jpg;
  }
  return ImageTypes.webp;
};
var handle = async (request) => {
  const uri = request.uri;
  if (uri === undefined) {
    return {
      statusCode: "400",
      body: "Invalid Request",
      headers: {
        "Content-Type": "text/plain"
      }
    };
  }
  logger.info({
    message: "valid uri",
    uri
  });
  const queryString = new URLSearchParams(request.querystring);
  logger.info({
    queryString
  });
  const width = parseInt(queryString.get("width") ?? "0");
  logger.info({
    width
  });
  const quality = parseInt(queryString.get("quality") ?? "75");
  logger.info({
    quality
  });
  if (isNaN(width) || isNaN(quality)) {
    return {
      statusCode: "400",
      body: "Invalid value for width or quality",
      headers: {
        "Content-Type": "text/plain"
      }
    };
  }
  const format = bestAcceptedFormat(request.headers["accept"]);
  logger.info({
    message: `accepted format: ${format}`
  });
  const result = await exports_image2.getOptimisedImage(uri, width, Math.min(quality, 75), format);
  if (result === undefined) {
    return {
      statusCode: "404",
      body: "Not Found",
      headers: {
        "Content-Type": "text/plain"
      }
    };
  }
  logger.info({
    message: "succesfully generated optimised image"
  });
  return {
    statusCode: "200",
    body: result.image,
    headers: {
      "Content-Type": "image/" + result.imageType,
      ETag: result.etag,
      "Cache-Control": result.cacheControl
    }
  };
};
// node_modules
logger.info({
  message: "lambda starting",
  TASK_PARAMETERS: exports_task_parameters
});
var handler = async (event) => {
  logger.info({
    message: "event recieved",
    event
  });
  try {
    const result = await exports_image_request.handle(event.Records[0].cf.request);
    const headers = {};
    for (const [key, value] of Object.entries(result.headers)) {
      headers[key] = [
        {
          key,
          value: value ?? ""
        }
      ];
    }
    if (typeof result.body === "string" || exports_task_parameters.LOCAL_ENVIRONMENT) {
      return {
        body: result.body,
        status: result.statusCode,
        headers
      };
    }
    return {
      body: result.body.toString("base64"),
      bodyEncoding: "base64",
      status: result.statusCode,
      headers
    };
  } catch (error) {
    logger.error({
      message: "image optimisation failed",
      error
    });
    return {
      body: "Internal Server Error",
      status: "500"
    };
  }
};
export {
  handler
};
